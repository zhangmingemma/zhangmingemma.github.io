(function(e){function s(s){for(var t,n,j=s[0],b=s[1],h=s[2],o=0,O=[];o<j.length;o++)n=j[o],Object.prototype.hasOwnProperty.call(l,n)&&l[n]&&O.push(l[n][0]),l[n]=0;for(t in b)Object.prototype.hasOwnProperty.call(b,t)&&(e[t]=b[t]);r&&r(s);while(O.length)O.shift()();return a.push.apply(a,h||[]),c()}function c(){for(var e,s=0;s<a.length;s++){for(var c=a[s],t=!0,n=1;n<c.length;n++){var j=c[n];0!==l[j]&&(t=!1)}t&&(a.splice(s--,1),e=b(b.s=c[0]))}return e}var t={},n={app:0},l={app:0},a=[];function j(e){return b.p+"js/"+({}[e]||e)+"."+{"chunk-14436ac0":"e30d94bc","chunk-50f5b2d6":"630fc1fa","chunk-a7c54b84":"425d2af2"}[e]+".js"}function b(s){if(t[s])return t[s].exports;var c=t[s]={i:s,l:!1,exports:{}};return e[s].call(c.exports,c,c.exports,b),c.l=!0,c.exports}b.e=function(e){var s=[],c={"chunk-14436ac0":1,"chunk-50f5b2d6":1,"chunk-a7c54b84":1};n[e]?s.push(n[e]):0!==n[e]&&c[e]&&s.push(n[e]=new Promise((function(s,c){for(var t="css/"+({}[e]||e)+"."+{"chunk-14436ac0":"31954eab","chunk-50f5b2d6":"47e2e6c5","chunk-a7c54b84":"1f89fb70"}[e]+".css",l=b.p+t,a=document.getElementsByTagName("link"),j=0;j<a.length;j++){var h=a[j],o=h.getAttribute("data-href")||h.getAttribute("href");if("stylesheet"===h.rel&&(o===t||o===l))return s()}var O=document.getElementsByTagName("style");for(j=0;j<O.length;j++){h=O[j],o=h.getAttribute("data-href");if(o===t||o===l)return s()}var r=document.createElement("link");r.rel="stylesheet",r.type="text/css",r.onload=s,r.onerror=function(s){var t=s&&s.target&&s.target.src||l,a=new Error("Loading CSS chunk "+e+" failed.\n("+t+")");a.code="CSS_CHUNK_LOAD_FAILED",a.request=t,delete n[e],r.parentNode.removeChild(r),c(a)},r.href=l;var g=document.getElementsByTagName("head")[0];g.appendChild(r)})).then((function(){n[e]=0})));var t=l[e];if(0!==t)if(t)s.push(t[2]);else{var a=new Promise((function(s,c){t=l[e]=[s,c]}));s.push(t[2]=a);var h,o=document.createElement("script");o.charset="utf-8",o.timeout=120,b.nc&&o.setAttribute("nonce",b.nc),o.src=j(e);var O=new Error;h=function(s){o.onerror=o.onload=null,clearTimeout(r);var c=l[e];if(0!==c){if(c){var t=s&&("load"===s.type?"missing":s.type),n=s&&s.target&&s.target.src;O.message="Loading chunk "+e+" failed.\n("+t+": "+n+")",O.name="ChunkLoadError",O.type=t,O.request=n,c[1](O)}l[e]=void 0}};var r=setTimeout((function(){h({type:"timeout",target:o})}),12e4);o.onerror=o.onload=h,document.head.appendChild(o)}return Promise.all(s)},b.m=e,b.c=t,b.d=function(e,s,c){b.o(e,s)||Object.defineProperty(e,s,{enumerable:!0,get:c})},b.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},b.t=function(e,s){if(1&s&&(e=b(e)),8&s)return e;if(4&s&&"object"===typeof e&&e&&e.__esModule)return e;var c=Object.create(null);if(b.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:e}),2&s&&"string"!=typeof e)for(var t in e)b.d(c,t,function(s){return e[s]}.bind(null,t));return c},b.n=function(e){var s=e&&e.__esModule?function(){return e["default"]}:function(){return e};return b.d(s,"a",s),s},b.o=function(e,s){return Object.prototype.hasOwnProperty.call(e,s)},b.p="/dist/",b.oe=function(e){throw console.error(e),e};var h=window["webpackJsonp"]=window["webpackJsonp"]||[],o=h.push.bind(h);h.push=s,h=h.slice();for(var O=0;O<h.length;O++)s(h[O]);var r=o;a.push([0,"chunk-vendors"]),c()})({0:function(e,s,c){e.exports=c("cd49")},"03b1":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,[Object(t["g"])("AJAX，Asynchronous Javascript + XML的缩写，这一技术能够向服务器请求额外的数据，而无需刷新页面，在浏览器交互中会有更好的体验。"),Object(t["h"])("code",null,"AJAX"),Object(t["g"])("技术的核心是"),Object(t["h"])("code",null,"XMLHttpRequest"),Object(t["g"])("对象，"),Object(t["h"])("code",null,"XHR"),Object(t["g"])("为向服务器发送请求和解析服务器相应提供了流畅的接口，能够以异步的方式从服务器取得更多信息。意味着用户点击后，不必刷新页面也能取得新数据。")],-1),l=Object(t["h"])("h3",null,"1. XMLHttpRequest",-1),a=Object(t["h"])("p",null,[Object(t["g"])("XMLHttpRequest，是可扩展超文本传输请求，利用"),Object(t["h"])("code",null,"XMLHttpRequest"),Object(t["g"])("发送请求的基本用法是：")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" xhr = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" XMLHttpRequest()\nxhr.open("),Object(t["h"])("span",{class:"hljs-string"},'"GET"'),Object(t["g"])(", url, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\nxhr.send()\nxhr.onreadystatechange = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(xhr.readyState != "),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" \n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (xhr.status == "),Object(t["h"])("span",{class:"hljs-number"},"200"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(xhr.responseText)\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Error"),Object(t["g"])("(xhr.statusText)\n    }\n}\n")])],-1),b=Object(t["f"])("<p>这里用到几个关键的方法：</p><ul><li><strong>open</strong>：<code>open(method, url, async)</code>规定了请求的类型、<code>URL</code>和是否异步处理请求。</li><li><strong>send</strong>：<code>send(string)</code>方法是将请求发送到服务器，参数<code>string</code>仅在<code>POST</code>请求中使用</li><li><strong>onreadystatechange</strong>：当请求被发送到服务器时，我们需要执行一些基于响应的任务，处理服务器相应，每当<code>readyState</code>改变时，就会触发<code>onreadystatechange</code>的事件。</li><li><strong>setRequestHeader</strong>：浏览器对JS设置请求头的功能是有限的，<code>host</code>/<code>user-agent</code>等无法被JS修改</li></ul><p>此外，还有一些关键的变量：</p><p><strong><code>readyState</code>标识请求的状态</strong>，枚举值有：</p><ul><li><strong>0</strong>：请求未初始化，尚未调用<code>open()</code>方法</li><li><strong>1</strong>：服务器连接已建立，已经调用<code>open()</code>方法</li><li><strong>2</strong>：请求已发送，已经调用<code>send()</code>方法</li><li><strong>3</strong>：请求已接收，已经接收到部分响应数据</li><li><strong>4</strong>：请求已完成，已经接收到全部响应数据，而且已经可以在客户端使用</li></ul><p><strong><code>status</code>标识请求状态码</strong>，枚举值有：</p><ul><li><strong>200</strong>：OK</li><li><strong>404</strong>：未找到页面</li></ul><p>此外，<code>responseText</code>标识请求返回结果，<code>statusText</code>标识请求返回状态提示，在请求出错的时候，里面会包含请求的报错信息。</p><h3>2. AJAX</h3><p>可以用<code>Promise</code>封装一下<code>AJAX</code></p>",10),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"ajax"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"method, url, data"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" xhr = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" XMLHttpRequest()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        xhr.onreadystatechange = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (xhr.readyState == "),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(") {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (xhr.status == "),Object(t["h"])("span",{class:"hljs-number"},"200"),Object(t["g"])(") {\n                    resolve(xhr.responseText)\n                } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                    reject(xhr.statusText)\n                }\n            }\n        }\n        xhr.open(method, url)\n        xhr.send(data)\n    })\n}\n")])],-1),o=Object(t["h"])("p",null,[Object(t["g"])("可以用封装好的"),Object(t["h"])("code",null,"ajax"),Object(t["g"])("发起一个请求")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("ajax("),Object(t["h"])("span",{class:"hljs-string"},"'GET'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'/api/categories'"),Object(t["g"])(").then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"data"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(data)\n}).catch("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".error(e)\n})\n")])],-1);function r(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O])}const g={};g.render=r;s["default"]=g},"05e0":function(e,s,c){},"092d":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"在ES5中，生成实例对象是通过构造函数来实现的",-1),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Point"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"x, y"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".x = x\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".y = y\n}\nPoint.prototype.toString = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`("),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".x}")]),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".y}")]),Object(t["g"])(")`")]),Object(t["g"])("\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" p = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Point("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\n")])],-1),a=Object(t["h"])("p",null,[Object(t["g"])("ES6的"),Object(t["h"])("code",null,"Class"),Object(t["g"])("可以看做是一个语法糖，让对象原型的写法更加清晰、更像面向对象的编程语法。")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Point"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(x, y) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".x = x\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".y = y\n    }\n    toString() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`("),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".x}")]),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".y}")]),Object(t["g"])(")`")]),Object(t["g"])("\n    }\n}\n")])],-1),b=Object(t["f"])("<p>相比ES5的实现，<code>Class</code>类的实现：</p><ul><li>必须要通过<code>new</code>来实现，而构造函数可以直接执行，可以不必通过<code>new</code>来执行。</li><li>不存在变量提升，在<code>class</code>声明前，调用会报错</li></ul><h4>1. constructor</h4><p>constructor是一种用于创建和初始化<code>class</code>创建的对象的特殊方法。在通过<code>new</code>命令生成对象实例时，自动调用该方法。如果没有显式定义，一个空的<code>constructor()</code>方法会被默认添加。</p>",4),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Polygon"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = "),Object(t["h"])("span",{class:"hljs-string"},"'Polygan'"),Object(t["g"])("\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" poly = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Polygon()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(poly.name) "),Object(t["h"])("span",{class:"hljs-comment"},"// Polygon"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("h4",null,"2. getter和setter",-1),O=Object(t["h"])("p",null,[Object(t["g"])("在"),Object(t["h"])("code",null,"Class"),Object(t["g"])("内部使用"),Object(t["h"])("code",null,"get"),Object(t["g"])("和"),Object(t["h"])("code",null,"set"),Object(t["g"])("关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。需要注意的是："),Object(t["h"])("strong",null,"getter不可单独出现"),Object(t["g"])("，"),Object(t["h"])("strong",null,"getter和setter必须同级出现"),Object(t["g"])("。")],-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"MyClass"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("() {}\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"get"),Object(t["g"])(" prop() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"`getter`"),Object(t["g"])("\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"set"),Object(t["g"])(" prop(value) {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'setter:'"),Object(t["g"])(", value)\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" ins = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" MyClass()\nins.prop = "),Object(t["h"])("span",{class:"hljs-number"},"123"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// setter: 123"),Object(t["g"])("\nins.prop "),Object(t["h"])("span",{class:"hljs-comment"},"// getter"),Object(t["g"])("\n")])],-1),g=Object(t["h"])("h4",null,"3. 静态方法static",-1),p=Object(t["h"])("p",null,[Object(t["g"])("类通过"),Object(t["h"])("code",null,"static"),Object(t["g"])("关键字定义静态方法。不能在类的实例上调用静态方法，不会被实例继承，而应该通过类本身调用。这些通常是实用程序方法，例如创建或克隆对象的功能。")],-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Foo"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" classMethod() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])("\n    }\n}\nFoo.classMethod() "),Object(t["h"])("span",{class:"hljs-comment"},"// hello"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" foo = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Foo()\nfoo.classMethod() "),Object(t["h"])("span",{class:"hljs-comment"},"// classMethod is not a function"),Object(t["g"])("\n")])],-1),d=Object(t["h"])("p",null,"需要注意的是：",-1),u=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("静态方法中如果包含"),Object(t["h"])("code",null,"this"),Object(t["g"])("，这个"),Object(t["h"])("code",null,"this"),Object(t["g"])("指的是类，而不是实例")])],-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Foo"),Object(t["g"])()]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" bar() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".baz();\n  }\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" baz() {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])(");\n  }\n  baz() {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'world'"),Object(t["g"])(");\n  }\n}\n\nFoo.bar() "),Object(t["h"])("span",{class:"hljs-comment"},"// hello"),Object(t["g"])("\n")])],-1),y=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"父类的静态方法，可以被子类继承")],-1),f=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Foo"),Object(t["g"])()]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" classMethod() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])(";\n  }\n}\n\n"),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Bar"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"extends"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Foo"),Object(t["g"])()]),Object(t["g"])("{\n}\n\nBar.classMethod() "),Object(t["h"])("span",{class:"hljs-comment"},"// 'hello'"),Object(t["g"])("\n")])],-1),w=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("静态方法也是可以从"),Object(t["h"])("code",null,"super"),Object(t["g"])("对象上调用的。")])],-1),k=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Foo"),Object(t["g"])()]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" classMethod() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])(";\n  }\n}\n\n"),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Bar"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"extends"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Foo"),Object(t["g"])()]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" classMethod() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"super"),Object(t["g"])(".classMethod() + "),Object(t["h"])("span",{class:"hljs-string"},"', too'"),Object(t["g"])(";\n  }\n}\n\nBar.classMethod() "),Object(t["h"])("span",{class:"hljs-comment"},'// "hello, too"'),Object(t["g"])("\n")])],-1),v=Object(t["f"])("<h4>4. 继承</h4><p>Class可以通过<code>extends</code>关键字实现继承，但子类<code>constructor</code>里必须要调用<code>super</code>关键字，用来新建父类的<code>this</code>对象。并且<code>super</code>必须要在<code>this</code>之前调用，不然会报出<code>引用错误</code>。</p>",2),x=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Point"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(x, y) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".x = x\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".y = y\n    }\n}\n\n"),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"ColorPoint"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"extends"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Point"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(x, y, color) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"super"),Object(t["g"])("()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".color = color\n    }\n}\n")])],-1);function S(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x])}const P={};P.render=S;s["default"]=P},"0ed1":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>HTTP(Hypertext Transfer Protocol)，超文本传输协议，Web使用HTTP规范从客户端到服务端等一系列运转流程。HTTP协议定义了Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。</p><h2>一. URL</h2><p>在认识HTTP之前，我们需要先了解URL(Universal Resource Locator，统一资源定位符)是什么，以及是如何构成的？这里我们还要了解一个概念URI(Uniform Resource Identifier，统一资源标识符)。URI是指由某个协议方案标识的资源的定位标识符，协议就是指访问资源所需要的协议类型，例如http就是协议的一种。URL是URI的子集，表示的是资源的地点</p><p><strong>URL的组成</strong></p><ul><li><strong>scheme</strong>：访问服务器所需资源的协议，如http、https</li><li><strong>host</strong>：http服务器的IP地址或者域名</li><li><strong>port</strong>：http服务器的默认端口是80，https的默认端口是443，默认情况下可省略，否则需要定义端口</li><li><strong>path</strong>：访问资源的路径</li><li><strong>queryString</strong>：发送http服务器的数据，查询参数</li><li><strong>anchor</strong>：锚点</li></ul><h2>二. HTTP报文</h2><p>用于HTTP协议交互的信息被称为HTTP报文，请求端发送的报文叫请求报文，接收端发送的报文叫响应报文，报文大致构成可以划分为首部和主体两部分，首部通常包含服务端或客户端处理的请求/响应的内容和属性，主体通常包含传输的数据，可以没有</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-17/1.png" style="display:inline-block;margin-bottom:16px;width:50%;height:200px;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-17/2.png" style="display:inline-block;margin-bottom:16px;width:50%;"></div><p><strong>报文的构成包含</strong></p><ul><li>请求行：存在于请求报文，包含请求的方法，HTTP的版本</li><li>状态行：存在于响应报文，包含表明响应结果的状态码，原因短语和HTTP版本</li><li>首部字段：包含通用首部字段、请求首部字段、实体首部字段等</li></ul><p><strong>常见的通用首部字段</strong></p><ul><li>Date: 服务器产生响应的日期</li><li>Cache-Control：控制缓存的行为</li></ul><p><strong>常见的请求首部字段</strong></p><ul><li>HOST：请求资源所在服务器</li><li>Accept：用户代理可处理的媒体类型</li><li>Accept-Charset：优先的字符集</li><li>Accept-Encoding：优先的内容编码</li><li>Accept-Language：优先的语言</li><li>Authorization：web认证信息</li><li>缓存相关：If-Match / If-Modified-Since / If-None-Match / If-Unmodified-Since</li><li>User-Agent：HTTP客户端程序的信息</li><li>Referer：请求中URI的原始获取方</li><li>Range: 实体的字节范围请求</li></ul><p><strong>常见的响应首部字段</strong></p><ul><li>Accept-Range: 是否接受字节范围请求</li><li>Age: 推算资源创建时间</li><li>Etag: 资源匹配信息</li><li>Location: 令客户端定向至指定URL</li><li>Retry-After: 对再次发起请求的时机要求</li></ul><p><strong>常见的实体首部字段</strong></p><ul><li>Content-Encoding: 实体的编码方式</li><li>Content-Length: 实体的内容长度</li><li>Content-Location: 资源URL</li><li>Content-Type: 实体的媒体类型</li><li>Allow: 支持的HTTP方法</li><li>Expires: 实体的过期时间</li><li>Last-Modified: 资源的最后修改时间</li></ul><h2>三. HTTP方法</h2><p><strong>HTTP包含很多中请求方法：</strong></p><ul><li><strong>GET</strong>：用来访问已被URI标识的资源</li><li><strong>POST</strong>：传输实体的主体</li><li><strong>PUT</strong>：用来上传文件，存在安全性问题，一般不采用</li><li><strong>HEAD</strong>：用来获取报文头部</li><li><strong>DELETE</strong>：用来删除文件</li><li><strong>OPTIONS</strong>：询问支持的方法</li><li><strong>TRACE</strong>：跟踪路径</li><li><strong>CONNECT</strong>：要求用隧道协议连接代理。主要使用SSL和TLS协议把通信内容加密后经网络隧道传输</li></ul><p><strong>GET和POST的区别</strong></p><ul><li>定义不同：GET用来请求数据资源，POST用来传输数据资源</li><li>数据传输方式不同：GET方法的传输参数在URL中，而POST方法的传输参数在请求体中</li><li>参数长度不同：由于浏览器地址的长度限制，GET方法的请求数据会有长度限制，而POST没有</li><li>安全性不同：因为POST将传输的数据放在请求体内，所以要更安全</li><li>回退无害：GET方法刷新、后退等浏览器操作是无害的，POST会导致重新提交表单</li><li>收藏：GET可以作为书签被收藏，POST不可以</li><li>数据包：GET方法在请求中产生一个TCP数据包，而POST方法在请求中产生HEADER和数据体两个TCP数据包，在发送HEADER，收到服务器确认后，再发送数据体的数据包</li></ul><h2>四. HTTP状态码</h2><p>状态码的职责是当客户端向服务端发送请求时，描述返回的请求结果的请求状态</p><ul><li>1XX：接收的请求正在处理</li><li>2XX：请求正常处理完毕</li><li>3XX：需要附加操作以完成请求 <ul><li>301：永久重定向</li><li>302：临时重定向</li><li>304：Not Modified，可以使用浏览器缓存</li></ul></li><li>4XX：服务器无法处理请求 <ul><li>400：请求体存在语法错误</li><li>401：需要认证</li><li>403：拒绝访问</li><li>404：资源未找到</li></ul></li><li>5XX：服务器处理请求出错 <ul><li>500：服务器内部发生错误</li></ul></li></ul><h2>五. HTTP缓存</h2><p><strong>强缓存</strong></p><p>根据HTTP首部的<code>Expires</code>和<code>Cache-Control</code>判断是否命中强缓存，<code>Expires</code>代表资源的过期时间，是一个绝对时间，由服务器端返回，浏览器会根据<code>Expires</code>判断资源是否过期，如果过期会直接使用缓存资源。但浏览器时间和服务器的时间会有差异，可能会不提准确。<code>Cache-Control</code>就是为了解决这个问题，包含几个响应首部字段：</p><ul><li>max-age：缓存的最大时间</li><li>private：只针对单个用户或实体进行缓存资源</li><li>public：任何途径的缓存者都可以无条件缓存资源</li><li>no-store：不缓存任何数据，下次直接向服务器请求数据</li><li>no-cache：缓存在本地缓存中，只是在与服务器再度验证之前，缓存不能直接提供给浏览器使用</li></ul><p><strong>协商缓存</strong></p><p>当浏览器没有命中强缓存，就需要向服务器发起请求，验证协商缓存是否命中，命中则返回<code>304状态码</code>，否则返回新的数据资源：</p><ul><li>浏览器第一次发起请求，服务端的响应报文携带<code>Last-Modified</code>，表示资源的最后修改时间；下一次请求报文中携带<code>If-Modified-Since</code>，值为<code>Last-Modified</code>的值，服务端比较资源的更新时间，做出应答</li><li>浏览器第一次发起请求，服务端的响应报文携带<code>Etag</code>，表示自愿的唯一标识；下一次请求报文中携带<code>If-Not-Match</code>，值是<code>Etag</code>的值，服务端比较资源的ID，做出应答。相比第一种方式而言，弥补了资源内容没变化，但修改时间发生变化的情况。</li></ul><p><strong>实际应用</strong></p><p>在访问页面的四种方式中：</p><ul><li>地址栏回车、页面链接跳转、打开新窗口/标签页、history前进后退：从强缓存开始判断</li><li>点击刷新按钮、页面右键重新加载、f5、ctrl+R：会跳过强缓存，从协商缓存开始判断</li><li>硬性重新加载、ctrl+f5、ctrl+shift+R、勾选disable cache后点刷新：直接发起真实的请求，这种方式会在Request Header里添加<code>Cache-Control: no-cache</code>和<code>Pragma: no-cache</code>，也是浏览器自己的行为</li></ul><p><strong>Cache-Control</strong></p><p>在客户端与服务端的交互中，请求报文、响应报文中都可能会包含<code>Cache-Control</code>字段，请求头中的<code>Cache-Control</code>影响的是当前这一次的请求，响应头里的<code>Cache-Control</code>是告诉浏览器这样存储，下次按照这样来，影响的是下一次请求。</p><p>请求头中的<code>Cache-Control</code>只有在浏览器刷新、硬性重新加载才会添加，只有两个值：</p><ul><li>max-age = 0：这个值表示，这个请求按照协商缓存的规则走，一定会发出真实的请求，如果缓存未过期，则返回304，否则返回200</li><li>no-cache：表示这次请求不会读缓存资源，即便缓存没有过期或者资源并没有修改，要发出真实的请求</li></ul><p><strong>disk cache和memory cache</strong></p><p>在Chrome的网络请求的<code>Size</code>字段中会出现三种情况<code>from disk cache(磁盘缓存)</code>、<code>from memory cache(内存缓存)</code>和资源大小数值，是强缓存的两种存储位置。</p><ul><li>from memory cache：从提取速度上来讲，memory cache 比disk cache要快得多。但容量小且时效性短，一旦浏览器Tab页关闭，memory cache都将被清空。</li><li>from disk cache：是存在硬盘中的缓存，存储空间大，时间长，网站中绝大多数资源都是存在磁盘中的。</li></ul><h2>六. HTTP版本</h2><p><strong>HTTP 1.0</strong></p><ul><li>任何格式的内容都可以发送，不止可以传输文字，还可以传输图片、视频和二进制文件</li><li>除了<code>GET</code>之外，还支持<code>POST</code>和<code>HEAD</code></li><li>短连接模式，每次发送数据都需要建立连接，且每次都只能传送全部的页面数据</li><li>只使用首部的<code>Expires</code>和<code>If-Modified-Since</code>作为缓存失效的标准 <br></li></ul><p><strong>HTTP 1.1</strong></p><ul><li>引入持久连接，默认不关闭，复用连接，不用声明<code>connect:keep-alive</code>，连接时长通过首部的<code>keep-alive</code>来设置</li><li>引入管道机制，同一个连接内，客户端可以同时发送多个请求</li><li>新增<code>E-tag</code>、<code>If-Match</code>、<code>If-Not-Match</code>来控制缓存失效</li><li>支持断点续传，通过<code>Range</code>来实现</li><li>使用虚拟网络，一台物理机可能存在多个虚拟主机，并且共享一个IP地址，首部需要指定<code>HOST</code></li><li>新增<code>PUT</code>、<code>PATCH</code>、<code>OPTIONS</code>、<code>DELETE</code></li></ul><p><strong>HTTP 2.0</strong> HTTP2.0两个非常重要的概念，分别是帧和流，帧代表数据传输的最小单位，每个帧都有序列标识属于哪个流；流就是多个帧组成的数据流，一个流标识一个请求。HTTP2.0的主要特征：</p><ul><li><strong>二进制分帧</strong>：HTTP 1.x的解析是基于文本的，存在天然缺陷，需要兼容的场景必然很多，二进制则只识别0和1，HTTP 2.0开始协议的解析使用二进制格式，方便且强大</li><li><strong>多路复用</strong>：HTTP 2.0支持多路复用，一个TCP连接可以存在多条流，也就是多个请求，服务端可以通过帧的标识判断属于哪个请求，通过重新排序还原请求。多路复用允许并发多个请求，每个请求及该请求的响应不需要等待其他的请求或响应，避免了队头阻塞的问题，不会因为一个请求耗时严重就影响到其他的请求</li><li><strong>头部压缩</strong>：HTTP 1.x头部带有大量的信息，每次请求都需要重复发送，HTTP 2.0使用encoder减少传输的头部大小，通讯双方各自cache一份头部的field表，避免重复头部的传输，减少传输的大小</li><li><strong>服务端推送</strong>：会将客户端需要的js、img、css伴随index.html一起发送的客户端</li></ul><p><strong>HTTP 3.0</strong> HTTP 3.0是Google在UDP协议的基础上增加流量控制、有序交付、重传、多路复用、TSL加密等功能构成QUIC协议，用在了HTTP 3.0</p><ul><li><strong>避免包阻塞</strong>：多个流的数据包在TCP连接上传输的时候，若一个流的数据包传输出现，问题，整个TCP连接都需要等待重传，影响其他流的数据传输。但QUIC协议实现了不同流数据的互不干扰</li><li><strong>快速重启会话</strong>：基于TCP的链接是通过两端的IP和端口和协议来建立的，在切换网络环境之后要重新建立连接，QUIC协议使用UUID来标识连接，在网络环境变化后，只要UUID不变，不必握手建立连接</li></ul><h2>七. HTTP特点</h2><p><strong>优点</strong></p><ul><li>灵活可扩展：一个语法只规定了基本格式，内容上不仅可以传输文本，还可以传输图片、文件、视频等</li><li>可靠传输：是TCP中的一种，能够提供可靠传输</li><li>无状态：不记忆连接内容，会减少网络开销</li></ul><p><strong>缺点</strong></p><ul><li>无状态：不记忆连接内容，有些场景下需要保存顾客信息等</li><li>明文传输：报文使用文本形式，给攻击者带来便利</li><li>安全问题：不验证通信方的身份，可能会遭遇伪装；无法证明报文的完整性，所以有可能遭遇篡改</li><li>队头阻塞：当http开启长连接之后，共用一个TCP连接，请求时间过长时，其他请求只能处于阻塞状态</li></ul><blockquote><p>长连接的开启，可以在首部添加<code>connection: keep-alive</code> 队头阻塞的解决办法：</p><ul><li>并发连接：增加队列任务，并发进行多个连接</li><li>域名分片：在域名上分出多个二级域名，处理多个任务队列</li></ul></blockquote><h2>八. 代理</h2><p>代理服务器就是客户端和服务端之间的“中间商”，即HTTP请求通过代理服务器转发给服务器，再将服务器的响应返回给客户端的行为。代理服务器可以用来作为缓存服务器，也可以用来隐藏用户身份（正向代理）或者服务器身份（反向代理）增加安全性。</p><ul><li><strong>正向代理</strong>：客户为从源服务器获取内容，向代理服务器发起请求，指定目标访问服务器，转交请求获得内容后返回给客户端</li><li><strong>反向代理</strong>：客户端向代理服务器发起请求，代理服务器收到需求后判断请求的目标服务器，得到结果后将数据反馈给客户端。Nginx就是优秀的反向代理服务器，用户不需要知道服务端是谁，只需要获得最后的数据结果就可以了</li></ul><h2>九. HTTP和HTTPS的区别</h2><p>上面有提到过HTTP协议没有任何安全校验逻辑，存在数据被篡改、伪装身份等安全问题，HTTPS就是为了解决这些问题的，HTTPS其实就是将通信层替换成TSL/SSL协议的HTTP。HTTP直接和TCP通信，而HTTPS变成先和SSL通信，再由SSL和TCP进行通信，由此拥有了SSL的HTTPS加密、证书和完整性保护的能力。</p><p><strong>两种加密机制</strong></p><ul><li><strong>对称密钥加密</strong>：对称密钥加密，就是加密密钥和解密密钥是相同的密码体制。如果密钥具有固定长度，其可枚举范围是有限的，就可以计算出最终的密钥，其安全性有待考量。但如果密钥长度足够长，穷举破解就是不可能的了。但双方共用相同的密钥，密钥泄露的风险很高。</li><li><strong>非对称密钥加密</strong>：非对称密钥加密，有两把密钥，一把叫做私有密钥，一把叫做公开密钥。整个加密过程是发送密文的一方使用对方的公钥进行加密处理，对方收到加密的信息后，使用自己的私有密钥进行解密。</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-17/3.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p><strong>密钥</strong> 两种加密方式都涉及到公钥，似乎每个用户都知道所有用户的公钥，那是不是就可以有人伪装身份达到不法的目的。这里就要依赖认证机构，每个实体都可以向认证机构CA申请证书，证书里面包含其公钥及其拥有者的信息、数字签名Hash值和Hash算法。EV SSL证书就是一种典型的示例，通过认证的Web网站地址栏的背景色是绿色的，左侧还显示了SSL证书中记录的组织名称和颁发证书的认证机构的名称。</p><p><strong>CA证书校验步骤</strong> CA证书中的Hash值，其实就是证书的私钥加密后的值，客户端得到证书后，利用证书中的公钥去解密Hash的值，得到Hash-a；然后再利用证书内的签名Hash算法去生成一个Hash值Hash-b，如果相等，表明证书证书，服务端可被信任。</p><p><strong>HTTPS采用混合加密机制</strong></p><p>非对称加密相比对称加密更安全，但效率更低，因此HTTPS采用的是混合加密机制。就是采用对称加密的方式对以后要使用的密钥进行加密，确保交换的密钥安全的前提下，使用密钥进行通信。SSL的握手过程包含：</p><ul><li>首先，客户端A访问服务端B时，会生成一个随机数1，把随机数1、自己支持的SSL版本号以及加密算法等信息告诉服务器B</li><li>服务器B收到后，记下加密算法，服务端B也会生成一个随机数2，并将随机数2、选择的加密算法和自己的CA证书一起返回给客户端A</li><li>客户端A收到后，会先校验CA证书的有效性，无效则发出警告；有效则会生成随机数3，然后用证书中的公钥加密随机数3发送给客户端B</li><li>服务端B收到后，会用证书中的私钥进行解密，得到真正的随机数3，双方通过随机数1、2、3生成一个对话密钥。之后的通信都是校验这个对话密钥，用到的就是对称加密，一般是AES算法</li><li>客户端A通知服务端B，指明以后要用对话密钥来完成通信，握手过程结束</li><li>服务端B通知客户端A，指明以后要用对话密钥来完成通信，握手过程结束</li><li>SSL通道就建立好了，就可以开始进行通信了</li></ul><p><strong>Fiddle抓包，如何截获https请求</strong></p><p>首先<code>fiddler</code>截获客户端浏览器发送给服务器的<code>https</code>请求，此时还未建立握手。</p><ul><li><code>fiddler</code>向服务器发送请求进行握手，获取到服务器的CA证书，用根证书公钥进行解密，验证服务器的数据签名，获取到服务器CA证书公钥</li><li><code>fiddler</code>伪造自己的CA证书，冒充服务器证书传递给客户端浏览器，客户端浏览器也验证CA证书</li><li>客户端浏览器生成<code>https</code>通信用的对称密钥，用<code>fiddler</code>伪造的证书公钥加密后传递给服务器，被<code>fiddler</code>截获</li><li><code>fiddler</code>将截获的密文用自己伪造的证书的私钥解开，获取h<code>https</code>通信用的对称密钥</li><li><code>fiddler</code>将对称密钥用服务器证书公钥加密传递给服务器，服务器用私钥解开后建立信任，握手完成，开始用对称密钥进行加密通信</li><li><code>fiddler</code>收到服务器的密文，用对称密钥解开，获得服务器发送的铭文，再次加密传递给客户端</li></ul><p><b style="display:block;margin-top:48px;">参考文献</b></p><ul><li><a href="https://juejin.cn/post/6844903844216832007" target="_blank">前端基础篇之HTTP协议</a></li><li>图解HTTP</li><li>计算机网络 谢希仁著</li><li><a href="https://juejin.cn/post/6857287743966281736" target="_blank">查缺补漏 巩固你的HTTP知识体系</a></li></ul>',76);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},"0f04":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"元素是CSS文档流的组成单元和基础，我们常见的元素包含有行内元素、块级元素和替换元素等，不同的元素具有不同的样式规则。",-1),l=Object(t["h"])("h3",null,"块级元素",-1),a=Object(t["h"])("p",null,"块级元素，顾名思义呈现块状，有自己的高度和宽度，可以自定义width、height，独自占据一行，之后的邻接节点只能另起一行排布，可以作为其他容器使用，容纳行内元素和块级元素，具体特点是：",-1),j=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"独占一行"),Object(t["h"])("li",null,"高度、宽度、行高、内外边距、边框都可定义，不设置宽度时，宽度为父元素的宽度"),Object(t["h"])("li",null,"多个块级元素在同一容器内，自上而下排布")],-1),b=Object(t["h"])("p",null,"常见的块级元素标签包含有：",-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"address"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"p"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!--标题--\x3e"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("..."),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"h5"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!--列表--\x3e"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ol"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!--表格--\x3e"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"th"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"tbody"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"tr"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"td"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"thead"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"form"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"table"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),o=Object(t["h"])("h3",null,"行内元素",-1),O=Object(t["h"])("p",null,"行内元素，顾名思义可以在同一行内展示，具体样式特点是：",-1),r=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"不会独占一行，相邻的元素会展示在同一行内，直至放不下会换行，宽度随内容的变化而变化"),Object(t["h"])("li",null,"高宽无效，内外边距仅水平方向有效，垂直方向无效"),Object(t["h"])("li",null,"元素的宽度就是内容物的宽度，不可改变"),Object(t["h"])("li",null,"行内元素内不可再放置块级元素，a链接内不可再防止链接")],-1),g=Object(t["h"])("p",null,"常见的行内元素包含：",-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"b"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"em"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"strong"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"br"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"textarea"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"input"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"button"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"img"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),i=Object(t["f"])("<blockquote><p>其中<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>这样的元素，他们的展示并不是css控制的，而是根据元素的<code>type</code>、<code>src</code>等属性来控制，这种元素又被称为替换元素</p></blockquote><h3>行内块级元素</h3><p>行内元素和块级元素可以通过<code>display</code>来进行相互转换，<code>display:block</code>为块级元素，<code>display:inline</code>为行内元素，当<code>display:inline-block</code>时，为行内块级元素，此时</p><ul><li>不会独占一行，与相邻元素在同一行内，与相邻元素之间有空隙，可以通过设置<code>font-size:0</code>来消除</li><li>可以设置宽度、高度和内外边距</li><li>元素的宽度就是内容物的宽度</li></ul>",4);function d(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i])}const u={};u.render=d;s["default"]=u},"0f23":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>在打开一个页面后，页面首要内容出现在屏幕的时间影响着用户的体验，对CSS的性能优化非常必要</p><h4>1. 内联首屏关键CSS</h4><p>通过内联<code>css</code>关键代码，能够使浏览器在下载完<code>html</code>后立刻开始渲染。如果外部引用<code>css</code>代码，在解析<code>html</code>结构过程中遇到外部<code>css</code>文件，才会开始下载<code>css</code>代码，再渲染。所以内联<code>css</code>代码能够使渲染事件提前</p><h4>2. 异步加载CSS</h4><p>在<code>css</code>文件请求、下载、解析完成之前，<code>css</code>会阻塞渲染，浏览器将不会渲染任何已处理的内容。前面加载内联代码后，后面的外部引用<code>css</code>则没必要阻塞浏览器渲染，就可以采用异步加载的方案。用<code>javascript</code>将<code>link</code>标签插到<code>head</code>标签的最后</p>",5),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" myCss = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createElement("),Object(t["h"])("span",{class:"hljs-string"},"'link'"),Object(t["g"])(")\nmyCss.rel = "),Object(t["h"])("span",{class:"hljs-string"},"'stylesheet'"),Object(t["g"])("\nmyCss.href = "),Object(t["h"])("span",{class:"hljs-string"},"'myStyle.css'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".head.insertBefore(myCss, "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".head.childNodes["),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".head.childNodes.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("].nextSibling)\n")])],-1),a=Object(t["f"])("<h4>3. 资源压缩</h4><p>利用<code>webpack</code>、<code>gulp</code>、<code>rollup</code>等模块化工具，将<code>css</code>代码进行压缩，使文件变小，大大降低浏览器的加载时间</p><h4>4. 去除冗余css</h4><p>虽然文件压缩能够降低文件大小，但<code>css</code>压缩通常只会去除无用的空格，限制了<code>css</code>文件的压缩比例，因此去除冗余的<code>css</code>逻辑非常必要，可以借用<code>Uncss7</code>库来进行冗余<code>css</code>的删除</p><h4>5. 合理使用选择器</h4><p>css选择器的匹配是从右向左进行的，这一策略导致了不同种类的选择器之间的性能也存在差异，相比于<code>#markdown-content-h3</code>，<code>#markdown .content h3</code>生成渲染树的耗时要更多，因此在编写选择器的时候要注意：</p><ul><li>不要嵌套过多复杂选择器，最好不要三层以上</li><li>使用id选择器就没必要进行嵌套</li><li>通配符、属性选择器效率最低，避免使用</li></ul><h4>6. 减少重排与重绘</h4><p>重排会导致浏览器重新计算整个文档，重新构建渲染树，这一过程会降低浏览器的渲染速度。下面的这些操作会触发重排：</p><ul><li>改变<code>font-size</code>和<code>font-family</code></li><li>改变元素的内外边距</li><li>通过JS改变CSS类</li><li>通过JS获取DOM元素的位置相关的属性</li><li>CSS伪类激活</li><li>滚动滚动条或改变窗口大小</li></ul><p>当元素的外观(<code>color</code>、<code>background</code>、<code>visibility</code>)发生改变时，会触发重绘</p><h4>7. 不要使用@import</h4><p>css样式文件有两种引入方式，一种是<code>link</code>，一种是<code>@import</code>，<code>@import</code>会影响浏览器的并行下载，使得页面在加载时增加额外的延迟，而且多个<code>@import</code>会导致下载顺序紊乱</p>",13);function j(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a])}const b={};b.render=j;s["default"]=b},"0f54":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>JS中数据类型有很多种类型，我们这篇主要讲解的是数据类型的区分、存储以及判断。在JS中我们常见的数据类型包含有<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>null</code>、<code>undefined</code>、<code>Symbol</code>、<code>Object</code>、<code>Function</code>、<code>Array</code>、<code>Error</code>、<code>RegExp</code>、<code>Math</code>、<code>JSON</code>、<code>global</code>、<code>Set</code>、<code>Map</code>、<code>WeakSet</code>、<code>WeakMap</code></p><h3>一. 数据类型区分</h3><h4>1. 基本类型</h4><p>JS的基本数据类型包括<code>null</code>、<code>undefined</code>、<code>number</code>、<code>string</code>、<code>boolean</code>，ES6加入了<code>symbol</code>，是第3版提案中还在修改的要加入的<code>bigInt</code></p><h5>1) <strong>基本类型的基本特点</strong></h5><ul><li><strong>占用空间固定</strong>，存放在<strong>栈内存</strong>中。当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存中，随着方法的执行结束，这个方法的内存栈自然销毁。因此所有在方法中定义的变量都是放在栈内存中的，栈中存储的是基础变量以及一些对象的引用变量，基础变量的值是存在栈中，而引用变量存储在栈中的是指向堆中的数组或对象的地址，所以修改引用类型会影响到其他指向这个地址的引用变量。</li><li><strong>保存与复制的是值本身</strong></li><li><strong>使用typeof检测数据的类型</strong></li><li><strong>基本类型上不可以添加属性和方法</strong></li></ul><blockquote><p>栈会自动分配内存空间，会自动释放，存放基本类型，简单的数据段占据固定大小的空间。</p></blockquote><h5>2) <strong>BigInt</strong></h5><p><strong>BigInt数据类型的目的是比<code>Number</code>数据类型支持的范围更大的整数值</strong>，在对大整数执行数学运算时，以任意精度表示整数的能力尤为重要。使用<code>BigInt</code>，整数溢出将不再是问题。这是源于最初JS中的所有数字都以<strong>双精度64位浮点格式</strong>表示，在此标准下，无法精确表示的非常大的整数将自动四舍五入。确切的说，JS中的<code>Number</code>类型只能安全地表示某一范围内的证书，任何超出范围的整数值都可能会失去精度。<code>BigInt</code>就可以解决这个问题</p><p><strong>创建BigInt</strong>只需要在整数的末尾追加一个<code>n</code>，或者用<code>BigInt()</code>构造函数传入字符串来生成</p>",10),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"9007199254740995n"),Object(t["g"])(")\nBigInt("),Object(t["h"])("span",{class:"hljs-string"},'"9007199254740995"'),Object(t["g"])(")\n")])],-1),a=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"BigInt创建的数字不能与常规数字进行全等比较"),Object(t["g"])("，因为数据类型时不相同的，但可以用非全等进行比较")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"10n"),Object(t["g"])(" == "),Object(t["h"])("span",{class:"hljs-number"},"10"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"10n"),Object(t["g"])(" === "),Object(t["h"])("span",{class:"hljs-number"},"10"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n")])],-1),b=Object(t["f"])("<h5>3) <strong>NaN</strong></h5><p>NaN是非数值是一个特殊的数值，这个数值表示一个本来要返回数值的操作数未返回数值的情况，以防影响其他代码的执行。</p><ul><li>任何涉及<code>NaN</code>的运算，都会返回<code>NaN</code></li><li><code>NaN</code>不等于任何值，包含<code>NaN</code>本身，<code>NaN == NaN</code>返回<code>false</code></li><li><code>isNaN()</code>可以判断数字是不是<code>NaN</code></li></ul><h4>2. 引用类型</h4><p>JS的引用类型主要包含<code>Function</code>、<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>等</p><ul><li><strong>占用空间不固定</strong>，保存在<strong>堆内存</strong>中。当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常比较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即便是方法结束后，这个对象还可能被另一个引用变量引用，只有当一个对象没有任何引用变量引用时，系统的垃圾回收机制才会在核实的时候进行回收</li><li><strong>保存与复制的是指向对象的一个指针</strong></li><li><strong>使用instanceof检测数据类型</strong></li><li><strong>使用new()方法构造出的对象是引用型</strong></li><li><strong>引用类型上可以添加属性和方法</strong></li></ul><blockquote><p>堆内存是动态分配的内存，大小不定也不会自动释放，存放引用类型，指那些可能由多个值构成的对象，保存在堆内存中，包含引用类型的变量，实际上保存的不是变量本身，而是指向该对象的指针</p></blockquote><h4>3. 包装类型</h4><p>前面我们提到了基本数据类型<strong>不能添加属性和方法</strong>，也就是基本类型不存在属性和方法，但其实我们日常使用中字符串、数字、布尔值其实都能够调用一些属性和方法。可以看出<code>Number</code>、<code>String</code>、<code>Boolean</code>是<strong>包装类型</strong>，也就是<strong>原始类型的包装对象</strong>。</p>",9),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" str = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'asd'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" num = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'123'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" bool = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\n\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" str) "),Object(t["h"])("span",{class:"hljs-comment"},"// object"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" num) "),Object(t["h"])("span",{class:"hljs-comment"},"// object"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" bool) "),Object(t["h"])("span",{class:"hljs-comment"},"// object"),Object(t["g"])("\n\nstr === "),Object(t["h"])("span",{class:"hljs-string"},"'asd'"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\nnum === "),Object(t["h"])("span",{class:"hljs-number"},"123"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\nbool === "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("h3",null,"二. 数据类型判断",-1),O=Object(t["h"])("p",null,[Object(t["g"])("JS数据类型的判断有很多方法，常见的就有"),Object(t["h"])("code",null,"typeof"),Object(t["g"])("和"),Object(t["h"])("code",null,"instanceof"),Object(t["g"])("等")],-1),r=Object(t["h"])("h4",null,"1. typeof",-1),g=Object(t["h"])("p",null,[Object(t["g"])("对于基本数据类型，可以使用"),Object(t["h"])("code",null,"typeof"),Object(t["g"])("来判断数据类型")],-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")           "),Object(t["h"])("span",{class:"hljs-comment"},"// number"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(")          "),Object(t["h"])("span",{class:"hljs-comment"},"// string"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")        "),Object(t["h"])("span",{class:"hljs-comment"},"// boolean"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(")        "),Object(t["h"])("span",{class:"hljs-comment"},"// object"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])(")   "),Object(t["h"])("span",{class:"hljs-comment"},"// undefined"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" {})          "),Object(t["h"])("span",{class:"hljs-comment"},"// object"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" [])          "),Object(t["h"])("span",{class:"hljs-comment"},"// object"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {}))  "),Object(t["h"])("span",{class:"hljs-comment"},"// function"),Object(t["g"])("\n")])],-1),i=Object(t["h"])("h4",null,"2. instanceof",-1),d=Object(t["h"])("p",null,[Object(t["g"])("从上面的例子中，可以看到"),Object(t["h"])("code",null,"typeof"),Object(t["g"])("的判断结果有些差强人意，部分数据类型没有办法用来区分，引用类型都会返回"),Object(t["h"])("code",null,"object"),Object(t["g"])("。于是"),Object(t["h"])("code",null,"instanceof"),Object(t["g"])("应运而生，用来判断一个变量是否是某个对象的实例，所以对于引用类型我们可以使用"),Object(t["h"])("code",null,"instanceof"),Object(t["g"])("来判断。"),Object(t["h"])("strong",null,"instanceof本质上就是用来检测构造函数的prototype属性是否出现在某个实例对象的原型链上")],-1),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])(")             "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])(")            "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])(")         "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log({} "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(")            "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log([] "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(")             "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log( "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"("),Object(t["g"])(") =>")]),Object(t["g"])(" {}) "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),m=Object(t["h"])("p",null,"我们可以看到前三个非常怪，后面三个可以得到正确的结果，但是用数据类型对象创建的实例就是对应的类型",-1),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])(")        "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])(")       "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])(")   "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),f=Object(t["h"])("p",null,[Object(t["g"])("我们可以试着手写一下"),Object(t["h"])("code",null,"instanceof")],-1),w=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"_instanceof"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"left, right"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" leftPrototype = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".getPrototypeOf(left)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" rightPrototype = right.prototype\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!leftPrototype) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (leftPrototype == rightPrototype) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])("\n        leftPrototype = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".getPrototypeOf(leftPrototype)\n    }\n}\n")])],-1),k=Object(t["h"])("h4",null,"3. constructor",-1),v=Object(t["h"])("p",null,[Object(t["g"])("constructor的本质和"),Object(t["h"])("code",null,"instanceof"),Object(t["g"])("差不多，是判断判断对象的构造函数")],-1),x=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(").constructor == "),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])(")             "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(").constructor == "),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])(")            "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(("),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(").constructor == "),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])(")         "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(({}).constructor == "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(")            "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(([]).constructor == "),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(")             "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}," (("),Object(t["g"])(") =>")]),Object(t["g"])(" {})).constructor == "),Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),S=Object(t["h"])("p",null,"可以看到基本上可以准确地检验出最常见的数据类型",-1),P=Object(t["h"])("h4",null,"4. Object.prototype.toString.call()",-1),_=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".prototype.toString\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("))          "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Number]         "),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])("))         "),Object(t["h"])("span",{class:"hljs-comment"},"// [object String]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call("),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])("))       "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Boolean]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call({}))         "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Object]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call([]))         "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Array]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call( "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"("),Object(t["g"])(") =>")]),Object(t["g"])(" {})))"),Object(t["h"])("span",{class:"hljs-comment"},"// [object Function]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call("),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("))       "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Null]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call("),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])("))  "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Undefined]"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Fn"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{}\nFn.prototype = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])("()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" f = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Fn()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call(f) == Fn)    "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a.call(f) == "),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n")])],-1),C=Object(t["f"])("<p>可以看到所有的数据类型都可以准确判断</p><h4>5. isArray</h4><p><strong>isArray</strong>用于判断是不是数组，相比<code>instanceof</code>，<code>Array.isArray()</code>可以检测出<code>iframes</code>的数据类型，但<code>Array.isArray()</code>的兼容支持没有<code>instanceof</code>更宽泛。</p>",3),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" iframe = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createElement("),Object(t["h"])("span",{class:"hljs-string"},'"iframe"'),Object(t["g"])(");\n"),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".body.appendChild(iframe);\nxArray = "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".frames["),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".frames.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("].Array;\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" arr = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" xArray("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("); "),Object(t["h"])("span",{class:"hljs-comment"},"// [1,2,3]"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// Correctly checking for Array"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".isArray(arr); "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".prototype.toString.call(arr); "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// Considered harmful, because doesn't work though iframes"),Object(t["g"])("\narr "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])("; "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n")])],-1),I=Object(t["f"])("<h4>6. 总结</h4><p>最终总结出来：</p><ul><li><strong>typeof</strong>，只能用来检测基本数据类型和函数，无法区分引用数据类型，对于<code>null</code>、<code>数组</code>、<code>对象</code>都会返回<code>Object</code></li><li><strong>instanceof</strong>，可以使用<code>object instanceof constructor</code>用来检测构造函数的原型是否在参数<code>object</code>的原型链上。可以正常检测数组，对象和函数，不能检测对象字面量创建的基本类型，如字符串，数组和布尔值，通过<code>new</code>关键字创建的基本数据类型才能正常检测，也不能检测<code>null</code>和<code>undefined</code></li><li><strong>constructor</strong>，返回对象的构造函数，可以检测基本数据类型和引用数据类型，但改变原型指向后，属性会跟着改变，检测也会变得不严谨，也不能检测<code>null</code>和<code>undefined</code></li><li><strong>Object.prototype.toString.call</strong>，可以检测所有数据类型，包含<code>null</code>和<code>undefined</code>，并不会向<code>constructor</code>那样随着对象原型指向的改变而改变</li></ul>",3);function E(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I])}const A={};A.render=E;s["default"]=A},"138b":function(e,s,c){},"14ae":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>在任何程序语言中，内存的生命周期基本是一致的：</p><ul><li>分配所需要的内存</li><li>使用分配到的内存</li><li>不需要使用时，释放内存</li></ul><p>在<code>JS</code>中，创建变量(对象，字符串)的时候会自动进行内存分配，并且在不使用它们的时候自动释放，这个释放的过程就被称为<strong>垃圾回收</strong>。如果这些不使用的内存，没有被释放，就叫<strong>内存泄漏</strong>。</p><h3>一. 内存泄漏</h3><p>常见的内存泄漏的情况</p><h4>1. 意外声明的全局变量</h4><p>意外声明全局变量是最常见但也最容易修复的内存泄漏问题。下面的例子，解释器会把变量<code>name</code>当做<code>window</code>属性来创建。不会消失，也不会被清理。解决办法就是在变量前加上声明符号<code>var</code> 、<code>let</code>、<code>const</code></p>",7),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"setName"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    name="),Object(t["h"])("span",{class:"hljs-string"},'"Gemma"'),Object(t["g"])("\n}\n")])],-1),a=Object(t["h"])("h4",null,"2. 被遗忘的定时器",-1),j=Object(t["h"])("p",null,[Object(t["g"])("定时器也可能会悄悄导致内存泄漏。下面的例子中，在定时器内引用了外部变量，定时器一直在运行，"),Object(t["h"])("code",null,"name"),Object(t["g"])("一直占用内存，垃圾回收就一直不会清理")],-1),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" name = "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\nsetInterval("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(name)\n},"),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])(")\n")])],-1),h=Object(t["h"])("h4",null,"3. 使用不当的闭包",-1),o=Object(t["h"])("p",null,[Object(t["g"])("下面的闭包只要"),Object(t["h"])("code",null,"outer"),Object(t["g"])("函数存在，就不能清理变量"),Object(t["h"])("code",null,"name"),Object(t["g"])("，因为一直被闭包引用，如果"),Object(t["h"])("code",null,"name"),Object(t["g"])("的内容很大，那就会有很大的问题")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" outer = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" name = "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" name\n    }\n}\n")])],-1),r=Object(t["h"])("h4",null,"4. 未清理的DOM引用",-1),g=Object(t["h"])("p",null,[Object(t["g"])("DOM元素的生命周期正常情况下取决于是否挂载在"),Object(t["h"])("code",null,"DOM"),Object(t["g"])("树上，当元素从"),Object(t["h"])("code",null,"DOM"),Object(t["g"])("上移除的时候就可以被销毁了。但如果"),Object(t["h"])("code",null,"DOM"),Object(t["g"])("元素在JS中持有引用，想要彻底删除这个元素，就需要把两个引用都清除才可以被正常回收")],-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" elements = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"btn"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'btn'"),Object(t["g"])(")\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"doSomething"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    elements.btn.click()\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"removeBtn"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".body.removeChild("),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'btn'"),Object(t["g"])("))\n}\n")])],-1),i=Object(t["h"])("p",null,"正确的回收的方式：",-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("elements.btn = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n")])],-1),u=Object(t["f"])("<h3>二. 垃圾回收机制</h3><p>JS中的垃圾回收是自动的，这个就是垃圾回收机制，垃圾回收程序每隔一段时间就会自动运行，回收不会被再次使用的变量。垃圾回收机制常见的有两种，标记清理和引用计数</p><h4>1. 标记清理</h4><p>是<code>JS</code>最常见的垃圾回收策略。当变量进入上下文，比如函数内部声明一个变量，这个变量就会被加上<code>存在于上下文</code>的标记，而不在上下文的变量，比如函数外部声明的全局变量，逻辑上讲永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能会被用到，当变量离开上下文的时候，也会被加上<code>离开上下文</code>的标记</p><p>垃圾回收程序运行的时候，就会标记内存中存储的所有变量。然后，它将所有在上下文的变量，以及被上下文中的变量引用的变量标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到他们了，随后垃圾回收的时候就会一次性清理。</p><h4>2. 引用计数法</h4><p>另一种没那么常用的垃圾回收策略是引用计数法。其思路是每个值都记录它被引用的次数。声明变量并给她赋一个引用值时，这个值得引用数为1。如果同一个值又被赋给另一个变量，那么引用数+1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减1。当一个值的引用数为0时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下运行的时候就会释放引用数为0的值得内存。</p><p>引用计数有一个比较严重的问题就是循环引用，在下面这个例子中<code>objA</code>和<code>objB</code>相互引用，引用数都是<code>2</code>。在函数结束后，他们的引用计数都不会变成<code>0</code>，因此永远不会被释放</p>",8),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"problem"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objA = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])("()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objB = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])("()\n    objA.someOtherObj = objB\n    objB.someOtherObj = objA\n}\n")])],-1);function y(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m])}const f={};f.render=y;s["default"]=f},"1c18":function(e,s){var c=document.getElementById("c"),t=document.getElementById("c1"),n=document.getElementById("c11");c.addEventListener("click",(function(e){console.log("c被点击")}),!1),t.addEventListener("click",(function(e){console.log("c1被点击")}),!1),n.addEventListener("click",(function(e){console.log("c11被点击")}),!1)},2050:function(e,s,c){"use strict";c.r(s);var t=c("602e"),n=c("c1ef");for(var l in n)["default"].indexOf(l)<0&&function(e){c.d(s,e,(function(){return n[e]}))}(l);n["default"].render=t["a"],s["default"]=n["default"]},"256c":function(e,s,c){"use strict";c("ce75")},2863:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<h3>聚类算法介绍</h3><p>聚类是将数据对象的集合分成相似的对象类的过程。使得同一个簇（或类）中的对象之间具有较高的相似性，而不同簇中的对象具有较高的相异性。按照聚类的尺度，聚类方法可被分为以下三种：基于距离的聚类算法、基于密度的聚类方法、基于互连性的聚类算法。其中基于距离的聚类算法是用各式各样的距离来衡量数据对象之间的相似度。基于密度的聚类算法主要是依据合适的密度函数等。基于互连性的聚类算法通常基于图或超图模型，将高度连通的对象聚为一类。</p><p>本文介绍的是Alex Rodriguez和Alessandro Laio在Science上发表的<a href="http://science.sciencemag.org/content/344/6191/1492" target="_blank">《Clustering by fast search and find of density peaks》</a>所提出的一种新型的基于密度的聚类算法。</p><h3>算法思想</h3><p>该算法的假设类簇的中心由一些局部密度比较低的点围绕, 并且这些点距离其他有高局部密度的点的距离都比较大.首先定义两个值：局部密度ρi以及到高局部密度点的距离δi，这两个值仅仅取决于两点之间的距离dij，且该距离满足三角不等式<br><img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image1.png" alt></p><p>其中dc是一个截断距离, 是一个超参数.所以ρi相当于距离点i的距离小于dc的点的个数.由于该算法只对ρi的相对值敏感, 所以对dc的选择比较鲁棒, δi用于描述点i到其他较高密度点之间的最小距离：<br><img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image2.png" alt></p><p>对于密度最大的点, 设置δi=maxj(dij).只有那些密度是局部或者全局最大的点才会远大于正常的相邻点间距.因此聚类中心被视为是δi值异常最大的点。</p><h3>聚类过程</h3><p>那些有着比较大的局部密度ρi和很大的δi的点被认为是类簇的中心. 局部密度较小但是δi较大的点是异常点.在确定了类簇中心之后, 所有其他点属于距离其最近的类簇中心所代表的类簇.具体的聚类过程可以从图1中看到，A图标识二维空间内的28个点，可以看到1和10两个点的密度最大，因此1和10被定义为聚类中心。右图是以ρi和为横坐标, 以δi为纵坐标, 这种图称作决策图。其中9和10两个点ρi值相似，但δi值却差异很大，因此9被归为点1的类簇，而10被归为另一类簇。所以，只有较高δi值和相对较高ρi值的点才会被视为聚类中心。26, 27, 28三个点的δi也比较大, 但是ρi较小, 所以是异常点. <img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image3.png" alt></p><p>聚类中心确定之后，剩余点被分配给与其具有较高密度的最近邻居相同的类簇。与其他迭代优化的聚类算法不同，类簇分配在单个步骤中执行。在聚类分析中, 通常需要确定每个点划分给某个类簇的可靠性. 在该算法中, 可以首先为每个类簇定义一个边界区域(border region), 亦即划分给该类簇但是距离其他类簇的点的距离小于dc的点. 然后为每个类簇找到其边界区域的局部密度最大的点, 令其局部密度为 . 该类簇中所有局部密度大于 的点被认为是类簇核心的一部分(亦即将该点划分给该类簇的可靠性很大), 其余的点被认为是该类簇的光晕, 亦即可以认为是噪音 <img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image4.png" alt></p><p>图A表示点分布，其中包含非球形点集和双峰点集。B和C分别表示4000和1000个点按照A中模式的分布，其中点根据其被分配的不同类簇着色，黑色的点属于类簇光晕。D和E是对应的决策图，而F表示的是不同点量下不正确聚类点的比率，误差线代表平均值的标准差</p><h3>聚类结果</h3><p>图3是分别利用点集和Olivetti脸部图片集的聚类结果 <img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image5.png" alt></p><h3>算法特点</h3><p>算法具有以下特点：</p><p>A． 该算法是一种基于密度的聚类算法，核心思想是认为类簇的中心由一些局部密度比较低的点围绕, 并且这些点距离其他有高局部密度的点的距离都比较大。</p><p>B． 该算法将非聚类中心点的聚类过程分离成一个单独的进程。使得聚类中心的选择和非聚类点的归类分离开来，增大了聚类精度。</p><p>C． 该算法适用于图片、非球形点集的聚类。</p>',18);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},"2a30":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>ES6引入了<code>async</code>函数，使得异步操作变得更加方便，它就是<code>Generator</code>的语法糖。<code>async</code>更像是对<code>Generator</code>的改进：</p><ul><li><strong>内置执行器</strong>：<code>Generator</code>函数的执行必须靠执行器，所以才有了<code>co</code>模块，但<code>async</code>函数的执行与普通函数一样，只要一行</li><li><strong>更好的语义</strong>：相比<code>Generator</code>的<code>*</code>和<code>yield</code>，<code>async</code>表示函数有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果</li><li><strong>更广的适用性</strong>：<code>async</code>函数的<code>await</code>命令后面，可以是<code>Promise</code>对象和原始类型的值，原始类型的值会自动转换成立即<code>resolved</code>的<code>Promise</code>对象。</li><li><strong>返回值是Promise</strong>：比<code>Generator</code>函数的返回值是<code>Iterator</code>，要更方便，可以用<code>then</code>指定下一步操作</li></ul><h3>1. 基本语法</h3><p><strong>async返回一个<code>Promise</code>对象</strong>，内部<code>return</code>语句返回的值，会成为<code>then</code>方法回调函数的参数，<code>async</code>函数内部抛出的错误，会导致<code>Promise</code>对象变为<code>reject</code>状态，抛出的错误对象会被<code>catch</code>方法回调函数接收到</p>",4),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"async"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"f"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Error"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'出错了'"),Object(t["g"])(")\n}\nf().then(\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"v"),Object(t["g"])(" =>")]),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'resolve'"),Object(t["g"])(", v),\n    e => "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'reject'"),Object(t["g"])(", e)\n)\n"),Object(t["h"])("span",{class:"hljs-comment"},"// reject Error: 出错了"),Object(t["g"])("\n")])],-1),a=Object(t["h"])("p",null,[Object(t["g"])("async函数返回的Promise对象，"),Object(t["h"])("strong",null,"必须等到内部所有await命令后面的Promise对象执行完，才会发生状态变化，除非遇到return语句或者抛出错误"),Object(t["g"])("。也就是说，只有async函数内部的异步操作执行完，才会执行"),Object(t["h"])("code",null,"then"),Object(t["g"])("方法指定的回调函数。")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"async"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"getTitle"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"url"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" res = "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(" fetch(url)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" html = "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(" res.text()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" html.match("),Object(t["h"])("span",{class:"hljs-regexp"},"/<title>([\\s\\S]+)<\\/title>/i"),Object(t["g"])(")["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]\n}\ngetTitle("),Object(t["h"])("span",{class:"hljs-string"},"'https://tc39.github.io/ecma262/'"),Object(t["g"])(").then("),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log)\n")])],-1),b=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"await后面如果不是Promise对象，就直接返回对应的值"),Object(t["g"])("，如果"),Object(t["h"])("code",null,"await"),Object(t["g"])("后面是一个定义有"),Object(t["h"])("code",null,"then"),Object(t["g"])("方法的对象，则就会当做"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("去处理")],-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"async"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"f"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"124"),Object(t["g"])("\n}\nf().then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"v"),Object(t["g"])(" =>")]),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(v)) "),Object(t["h"])("span",{class:"hljs-comment"},"// 123"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"任一await语句后面的Promise对象变成reject状态，那整个async函数都会中断执行")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"async"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"f"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".reject("),Object(t["h"])("span",{class:"hljs-string"},"'出错了'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".resolve("),Object(t["h"])("span",{class:"hljs-string"},"'hello world'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// 不会执行"),Object(t["g"])("\n}\n")])],-1),r=Object(t["h"])("h3",null,"2. 手写async",-1),g=Object(t["h"])("p",null,[Object(t["g"])("还是从手写"),Object(t["h"])("code",null,"async"),Object(t["g"])("来理解"),Object(t["h"])("code",null,"async"),Object(t["g"])("的原理和基本用法。"),Object(t["h"])("code",null,"async"),Object(t["g"])("的实现原理其实就是将"),Object(t["h"])("code",null,"Generator"),Object(t["g"])("和自动执行器包装在一个函数里。")],-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"spawn"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"genF"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" gen = genF()\n        "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"step"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"nextF"),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" next\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                next = nextF()\n            } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" reject(e)\n            }\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (next.done) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" resolve(next.value)\n            }\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".resolve(next.value).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"v"),Object(t["g"])(") ")]),Object(t["g"])("{\n                step("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" gen.next(v)\n                })\n            }, "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n                step("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" gen.throw(e)\n                })\n            })\n        }\n        step("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" gen.next("),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])(")\n        })\n    })\n}\n")])],-1);function i(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p])}const d={};d.render=i;s["default"]=d},"2a42":function(e,s,c){"use strict";c("138b")},"2c22":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>我们都知道函数的参数可以通过<code>arguments</code>来获取，那<code>arguments</code>是数组吗？怎么理解？怎么用呢？</p><h4>1. 类数组对象</h4><p>对于普通的对象来说，所有的<code>property</code>名都为正整数，同时也有相应的<code>length</code>属性，对象也并不是由<code>Array</code>构造函数创建的，它依然呈现出数组的行为，这种对象被称为<code>类数组对象</code>。<strong>arguments就是类数组对象</strong>。</p>",3),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"func"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"a,b"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-built_in"},"arguments"),Object(t["g"])(")\n}\n")])],-1),a=Object(t["f"])('<div style="display:flex;justify-content:flex-start;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-29/1.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>arguments具有以下特点：</p><ul><li><strong>除了<code>length</code>属性和索引元素之外没有任何<code>Array</code>属性</strong>。</li><li><strong>arguments是所有函数（非箭头函数）中都可用的局部变量</strong>，如果传递了两个参数，可以分别用<code>arguments[0]</code>和<code>arguments[1]</code>来引用。</li></ul><h4>2. arguments用法</h4><p>arguments虽然与数组类似，但是没有数组常见的<code>forEach</code>、<code>reduce</code>等方法属性，所以叫他们类数组，要遍历数组的话，有三个方法</p><ul><li>将数组的方法应用到类数组上，可以用<code>call</code>和<code>apply</code>方法</li></ul>',6),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"foo"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".prototype.slice.call("),Object(t["h"])("span",{class:"hljs-built_in"},"arguments"),Object(t["g"])("))\n}\n")])],-1),b=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("使用"),Object(t["h"])("code",null,"Array.from"),Object(t["g"])("方法将类数组转化成数组")])],-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"foo"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".from("),Object(t["h"])("span",{class:"hljs-built_in"},"arguments"),Object(t["g"])("))\n}\n")])],-1),o=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"使用展开运算符将类数组转化成数组")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"foo"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log([...arguments])\n}\n")])],-1);function r(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O])}const g={};g.render=r;s["default"]=g},"2e8a":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>Typescript是Microsoft开发的一个强类型的JavaScript超集，支持ES6语法，支持面向对象变成的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。</p><h4>1. 为什么使用TypeScript？</h4><p>TypeScript是Javascript的超集，增加了静态类型，可以在开发人员编写脚本时检测错误，使得代码质量更好，更健壮。</p><ul><li><strong>增强可读性</strong>：TypeScript作为强类型语言，可以明确数据类型，代码可读性强，类型可以一定程度上充当文档</li><li><strong>开发便利调试性强</strong>：Typescript开发时就能发现编译错误，但JS则需要运行时才能暴露，同时IDE自动填充，自动联想，方便开发</li><li><strong>跨平台</strong>：Typescript能够通用的转译，可以跨平台使用，在服务端和客户端的项目中都能够使用</li></ul><h4>2. Typescript的基础类型有哪些？</h4><p>Typescript和Javascript有几乎相同的数据类型，除了Boolean、Number、String、Array，新增了枚举</p><h5>(1) 枚举<code>enum</code></h5>",7),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("enum Color {\n    Red = "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(",\n    Green = "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(", \n    Blue = "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("\n}\n")])],-1),a=Object(t["h"])("h5",null,[Object(t["g"])("(2) 任意值"),Object(t["h"])("code",null,"any")],-1),j=Object(t["h"])("p",null,[Object(t["g"])("对于一些在编程阶段还不清楚类型的变量而需要指定一个类型，例如动态内容、用户的输入或第三方库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。就可以用"),Object(t["h"])("code",null,"any"),Object(t["g"])("来标记这些变量")],-1),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" notSure:any = "),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(";\nnotSure = "),Object(t["h"])("span",{class:"hljs-string"},"'maybe a string instead'"),Object(t["g"])("\nnotSure = "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])("\n")])],-1),h=Object(t["h"])("h5",null,[Object(t["g"])("(3) 空值"),Object(t["h"])("code",null,"void")],-1),o=Object(t["h"])("p",null,[Object(t["g"])("某种程度，"),Object(t["h"])("code",null,"void"),Object(t["g"])("和"),Object(t["h"])("code",null,"any"),Object(t["g"])("相反，表示没有任何类型，当一个函数没有返回值时，通常会看到返回值类型为"),Object(t["h"])("code",null,"void")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"warnUser"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])("): "),Object(t["h"])("span",{class:"hljs-title"},"void"),Object(t["g"])()]),Object(t["g"])("{\n    alert("),Object(t["h"])("span",{class:"hljs-string"},"'this is my warning message'"),Object(t["g"])(")\n}\n")])],-1),r=Object(t["h"])("h5",null,[Object(t["g"])("(4) 永不存在的值"),Object(t["h"])("code",null,"Never")],-1),g=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"never"),Object(t["g"])("类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型；变量也可能是"),Object(t["h"])("code",null,"never"),Object(t["g"])("类型，当它们被永不为真的类型保护所约束时")],-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"error"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"message: string"),Object(t["g"])("): "),Object(t["h"])("span",{class:"hljs-title"},"never"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Error"),Object(t["g"])("(message);\n}\n")])],-1),i=Object(t["f"])("<h5>(5) 空值的区别</h5><p><strong>Typescript中any、never、unknown、null、undefined和void有什么区别？</strong></p><ul><li>any：动态的变量类型</li><li>never：永不存在的值的类型，例如never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型</li><li>unknown：任何类型的值都可以赋给unknown类型，但是unknown类型的值只能赋给unknown本身和any类型</li><li>null &amp; undefined：默认情况下null和undefined是所有类型的子类型。就是说你可以把null和undefined赋值给number类型的变量。当你指定--strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。</li><li>void：没有任何类型，例如一个函数如果没有返回值，那么返回值定义为void</li></ul><h5>(6) 类型断言</h5><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</p><ul><li>尖括号：</li></ul>",6),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" someValue: any = "),Object(t["h"])("span",{class:"hljs-string"},"'this is a string'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" strLength: number = ("),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"string"),Object(t["g"])(">")]),Object(t["g"])("someValue).length \n")])])],-1),u=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"as：")],-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" someValue: any = "),Object(t["h"])("span",{class:"hljs-string"},"'this is a string'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" strLength: number = (someValue "),Object(t["h"])("span",{class:"hljs-keyword"},"as"),Object(t["g"])(" string).length\n")])],-1),y=Object(t["h"])("h4",null,"3. interface",-1),f=Object(t["h"])("p",null,[Object(t["g"])("接口"),Object(t["h"])("code",null,"interface"),Object(t["g"])("用来描述使用接口的对象定义契约或结构")],-1),w=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("interface Counter {\n    interval?: number; "),Object(t["h"])("span",{class:"hljs-comment"},"// 可选属性"),Object(t["g"])("\n    readonly x: number; "),Object(t["h"])("span",{class:"hljs-comment"},"// 只读属性"),Object(t["g"])("\n    reset(): "),Object(t["h"])("span",{class:"hljs-keyword"},"void"),Object(t["g"])(";\n    (start: number): string;\n}\n\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"getCounter"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])("):"),Object(t["h"])("span",{class:"hljs-title"},"Counter"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" counter = "),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"Counter"),Object(t["g"])(">")]),Object(t["g"])("function(start:number) {}\n    counter.interval = 123;\n    counter.x = 123 // error\n    counter.reset = function() {}\n    return counter\n}\n")])])],-1),k=Object(t["f"])("<p>其中有几个比较特别的属性：</p><ul><li>可选属性：表示属性不全是必须的</li><li>只读属性：只能在对象刚刚创建的时候修改其值，之后再修改只读属性会报错</li></ul><blockquote><p>readonly还是const 最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用const，若做为属性则使用readonly。</p></blockquote><h4>4. class</h4><p>class中包含很多类型的修饰符</p><ul><li>public：Typescript中成员默认为<code>public</code></li><li>private：当成员被标记为<code>private</code>，则不能在声明它的类的外部访问</li></ul>",6),v=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Animal"),Object(t["g"])()]),Object(t["g"])("{\n    private name: string;\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(theName: string) { "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = theName; }\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Animal("),Object(t["h"])("span",{class:"hljs-string"},'"Cat"'),Object(t["g"])(").name;\n")])],-1),x=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("protected：与"),Object(t["h"])("code",null,"private"),Object(t["g"])("类似，但是"),Object(t["h"])("code",null,"protected"),Object(t["g"])("成员在派生类中仍然可以访问")])],-1),S=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Person"),Object(t["g"])()]),Object(t["g"])("{\n    protected name: string;\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(name:string) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Employee"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"extends"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Person"),Object(t["g"])()]),Object(t["g"])("{\n    private department: string;\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(name:string, department:string) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"super"),Object(t["g"])("(name)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".department = department\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" howard = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Employee("),Object(t["h"])("span",{class:"hljs-string"},"'Howard'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'Sales'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(howard.name) "),Object(t["h"])("span",{class:"hljs-comment"},"// 错误"),Object(t["g"])("\n")])],-1),P=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("static：创建类的静态成员，这些属性存在于类本身上面而不是类的实例上，因此就不能使用"),Object(t["h"])("code",null,"this."),Object(t["g"])("来访问，而是直接用"),Object(t["h"])("code",null,"${className}."),Object(t["g"])("进行访问")])],-1),_=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Grid"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" origin = {"),Object(t["h"])("span",{class:"hljs-attr"},"x"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"y"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("};\n    calculateDistanceFromOrigin(point: {"),Object(t["h"])("span",{class:"hljs-attr"},"x"),Object(t["g"])(": number; y: number;}) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" xDist = (point.x - Grid.origin.x);\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" yDist = (point.y - Grid.origin.y);\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".sqrt(xDist * xDist + yDist * yDist) / "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".scale;\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])(" (public scale: number) { }\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" grid1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Grid("),Object(t["h"])("span",{class:"hljs-number"},"1.0"),Object(t["g"])(");  "),Object(t["h"])("span",{class:"hljs-comment"},"// 1x scale"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" grid2 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Grid("),Object(t["h"])("span",{class:"hljs-number"},"5.0"),Object(t["g"])(");  "),Object(t["h"])("span",{class:"hljs-comment"},"// 5x scale"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(grid1.calculateDistanceFromOrigin({"),Object(t["h"])("span",{class:"hljs-attr"},"x"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"10"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"y"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"10"),Object(t["g"])("}));\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(grid2.calculateDistanceFromOrigin({"),Object(t["h"])("span",{class:"hljs-attr"},"x"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"10"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"y"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"10"),Object(t["g"])("}));\n")])],-1),C=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"abstract：抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。")],-1),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("abstract "),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Department"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(public name: string) {}\n    printName(): "),Object(t["h"])("span",{class:"hljs-keyword"},"void"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'Department name: '"),Object(t["g"])(" + "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name);\n    }\n    abstract printMeeting(): "),Object(t["h"])("span",{class:"hljs-keyword"},"void"),Object(t["g"])("; "),Object(t["h"])("span",{class:"hljs-comment"},"// 必须在派生类中实现"),Object(t["g"])("\n}\n\n"),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"AccountingDepartment"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"extends"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Department"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"super"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'Accounting and Auditing'"),Object(t["g"])("); "),Object(t["h"])("span",{class:"hljs-comment"},"// 在派生类的构造函数中必须调用 super()"),Object(t["g"])("\n    }\n    printMeeting(): "),Object(t["h"])("span",{class:"hljs-keyword"},"void"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'The Accounting Department meets each Monday at 10am.'"),Object(t["g"])(");\n    }\n    generateReports(): "),Object(t["h"])("span",{class:"hljs-keyword"},"void"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'Generating accounting reports...'"),Object(t["g"])(");\n    }\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" department: Department; "),Object(t["h"])("span",{class:"hljs-comment"},"// 允许创建一个对抽象类型的引用"),Object(t["g"])("\ndepartment = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Department(); "),Object(t["h"])("span",{class:"hljs-comment"},"// 错误: 不能创建一个抽象类的实例"),Object(t["g"])("\ndepartment = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" AccountingDepartment(); "),Object(t["h"])("span",{class:"hljs-comment"},"// 允许对一个抽象子类进行实例化和赋值"),Object(t["g"])("\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); "),Object(t["h"])("span",{class:"hljs-comment"},"// 错误: 方法在声明的抽象类中不存在"),Object(t["g"])("\n")])],-1),I=Object(t["h"])("h4",null,"5. 泛型",-1),E=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"泛型"),Object(t["g"])("可以适用于多个类型。 不同于使用any，它不会丢失信息，可以理解为表示某种类型的变量")],-1),A=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"identity"),Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-title"},"T"),Object(t["g"])(">("),Object(t["h"])("span",{class:"hljs-params"},"arg: T"),Object(t["g"])("): "),Object(t["h"])("span",{class:"hljs-title"},"T"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" arg\n}\n")])],-1),D=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"泛型类"),Object(t["g"])("看上去与泛型接口差不多。 泛型类使用（<>）括起泛型类型，跟在类名后面。")],-1),M=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"GenericNumber"),Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-title"},"T"),Object(t["g"])("> ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"zeroValue"),Object(t["g"])(": T;\n    add: "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"x: T, y: T"),Object(t["g"])(") =>")]),Object(t["g"])(" T\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" myNum = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" GenericNumber<number>()\n")])],-1),N=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"泛型约束"),Object(t["g"])("：我们想访问arg的length属性，但是编译器并不能证明每种类型都有length属性，所以就报错了.")],-1),F=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"loggingIdentity"),Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-title"},"T"),Object(t["g"])(">("),Object(t["h"])("span",{class:"hljs-params"},"arg: T"),Object(t["g"])("): "),Object(t["h"])("span",{class:"hljs-title"},"T"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(arg.length);  "),Object(t["h"])("span",{class:"hljs-comment"},"// Error: T doesn't have .length"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" arg;\n}\n")])],-1),R=Object(t["h"])("p",null,"为此，我们定义一个接口来描述约束条件。 创建一个包含.length属性的接口，使用这个接口和extends关键字还实现约束",-1),V=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("interface Lengthwise {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"length"),Object(t["g"])(": number;\n}\n\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"loggingIdentity"),Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-title"},"T"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"extends"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Lengthwise"),Object(t["g"])(">("),Object(t["h"])("span",{class:"hljs-params"},"arg: T"),Object(t["g"])("): "),Object(t["h"])("span",{class:"hljs-title"},"T"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(arg.length);  "),Object(t["h"])("span",{class:"hljs-comment"},"// Now we know it has a .length property, so no more error"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" arg;\n}\n")])],-1),B=Object(t["h"])("h4",null,"6. 混入",-1),L=Object(t["h"])("p",null,"可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。",-1),z=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// Disposable Mixin"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Disposable"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"isDisposed"),Object(t["g"])(": boolean;\n    dispose() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".isDisposed = "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(";\n    }\n\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// Activatable Mixin"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Activatable"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"isActive"),Object(t["g"])(": boolean;\n    activate() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".isActive = "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(";\n    }\n    deactivate() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".isActive = "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(";\n    }\n}\n")])],-1),q=Object(t["h"])("p",null,"下面创建一个类，结合了这两个mixins。 下面来看一下具体是怎么操作的：",-1),H=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"SmartObject"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"implements"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Disposable"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-title"},"Activatable"),Object(t["g"])()]),Object(t["g"])("{\n}\n")])],-1),G=Object(t["h"])("h4",null,"7. type和interface的区别",-1),J=Object(t["h"])("p",null,"一个简单的例子来看",-1),U=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("interface User {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": string,\n    "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(": number\n}\ninterface SetUser {\n    (name:string, "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(":number): "),Object(t["h"])("span",{class:"hljs-keyword"},"void"),Object(t["g"])("\n}\n\ntype User = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": string,\n    "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(": number\n}\ntype SetUser = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name:string, age:number"),Object(t["g"])(") =>")]),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"void"),Object(t["g"])("\n")])],-1),$=Object(t["h"])("h5",null,"(1) 都可以扩展",-1),W=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"interface 可以 extends，type 不允许 extends和implement的，type可以通过交叉类型实现 interface 的extends行为。"),Object(t["h"])("li",null,"并且两者并不是相互独立的，也就是说 interface 可以 extends type ， type也可以与 interface类型交叉。"),Object(t["h"])("li",null,"两者效果差不多，但是两者语法不同。")],-1),K=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// interface extends interface"),Object(t["g"])("\ninterface Name {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": string\n}\ninterface User extends Name {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(": number\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// type & type"),Object(t["g"])("\ntype Name = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": string\n}\ntype User = Name & { "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(": number }\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// interface extends type"),Object(t["g"])("\ntype Name = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": string\n}\ninterface User extends Name {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(": number\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// type & interface"),Object(t["g"])("\ninterface Name {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": string\n}\ntype User = Name & { "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(": number }\n")])],-1),X=Object(t["h"])("h5",null,"(2) 声明类型",-1),Y=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("type可以声明基本类型名，联合类型、元组类型，并可以通过"),Object(t["h"])("code",null,"typeof"),Object(t["g"])("获取实例类型进行赋值")])],-1),Q=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" div = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createElement("),Object(t["h"])("span",{class:"hljs-string"},"'div'"),Object(t["g"])(")\ntype B = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" div\n")])],-1),Z=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"interface能够声明合并，type不可以")],-1),ee=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("interface User {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": string\n}\ninterface User {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"age"),Object(t["g"])(": number\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" user:User = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'小明’,\n    age: 18\n}\n")])],-1),se=Object(t["h"])("h4",null,"8. 工具类型",-1),ce=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"Exclude<T, U> 从 T 中排除出可分配给 U的元素。"),Object(t["h"])("li",null,"Omit<T, K> 的作用是忽略T中的某些属性。"),Object(t["h"])("li",null,"Merge<O1, O2> 是将两个对象的属性合并。"),Object(t["h"])("li",null,"Compute<A & B> 是将交叉类型合并"),Object(t["h"])("li",null,"Intersection<T, U>的作用是取T的属性,此属性同样也存在与U。"),Object(t["h"])("li",null,"Overwrite<T, U> 是用U的属性覆盖T的相同属性。")],-1);function te(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E,A,D,M,N,F,R,V,B,L,z,q,H,G,J,U,$,W,K,X,Y,Q,Z,ee,se,ce])}const ne={};ne.render=te;s["default"]=ne},"2efe":function(e,s,c){"use strict";c("b0c0");var t=c("7a23"),n=Object(t["E"])("data-v-075ec1b1");Object(t["t"])("data-v-075ec1b1");var l={key:0},a={class:"abstract"},j={class:"footer"},b={class:"footer-tags"};Object(t["r"])();var h=n((function(e,s,c,n,h,o){return e.post?(Object(t["q"])(),Object(t["d"])("article",l,[Object(t["h"])("h1",{onClick:s[1]||(s[1]=function(s){return e.tapPost(e.post.name)})},Object(t["z"])(e.post.title),1),Object(t["h"])("div",a,Object(t["z"])(e.post.abstract),1),Object(t["h"])("a",{onClick:s[2]||(s[2]=function(s){return e.tapPost(e.post.name)})},"点我阅读更多..."),Object(t["h"])("div",j,[Object(t["h"])("div",b,[(Object(t["q"])(!0),Object(t["d"])(t["a"],null,Object(t["w"])(e.post.tags,(function(s){return Object(t["q"])(),Object(t["d"])("div",{class:"blog-tag",key:s,tag:s,onClick:function(c){return e.tapTag(s)}},Object(t["z"])(s),9,["tag","onClick"])})),128))]),Object(t["h"])("span",null,Object(t["z"])(e.post.date),1)])])):Object(t["e"])("",!0)})),o=c("a7bb"),O=c("6c02"),r=Object(t["i"])({props:["post"],setup:function(){var e=Object(O["d"])(),s=function(s){s&&(Object(o["f"])(),e.push("/post?file=".concat(s)))},c=function(s){s&&(Object(o["f"])(),e.push("/tag?tag=".concat(s)))};return{tapTag:c,tapPost:s}}});c("5765");r.render=h,r.__scopeId="data-v-075ec1b1";s["a"]=r},"32d2":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p><span style="color:blue;">|导语</span> 微信小程序生态日益完善，小程序提供的功能服务越来越多，类目覆盖面越来越广，服务共享成为小程序生态中必不可少的一环。小程序自 1.9.6 基础库版本开始支持插件支持服务功能的封装和共享，在小程序官方文档中，给出了插件的具体定义：</p><blockquote><p>插件是一组对js接口、自定义组件或页面的封装，用于嵌入到小程序中使用。</p></blockquote><p>对于开发者，插件调用方在使用插件时，无法看到插件的代码，插件能够用来封装功能或服务，提供给第三方小程序进行展示或者使用，扩大服务使用场景和受众范围。对于使用者，无需特殊申请类目资质，或搭建全套服务架构，就能够通过插件调用开发者所提供的服务丰富自身能力，例如接入好物推荐，在线客服，名片分享，接入WIFI等插件服务。那么开发者又该如何着手插件的开发，开发中又有什么地方需要特别关注呢？</p><h3>一. 插件的开发</h3><h4>1. 插件的开发</h4><p>开发者开发插件前需要在已经注册号的小程序管理后台开通插件功能，填写插件基本信息、插件开发信息后，在开发者工具“开发类型”中选择“插件”即可创建插件项目<a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6" target="_blank">[插件开通及创建项目指引]</a>，新建后的插件项目将包含三个目录，以好物圈提供的“好物推荐”插件为例，创建的插件项目包含的目录及主要内容如下图所示：</p><p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image1.png" alt="好物推荐插件 (2)"></p><p>可以看到插件项目包含<code>doc</code>、<code>miniProgram</code>、<code>plugin</code>三个目录：</p><ul><li><p><code>doc</code>目录：插件开发文档</p><ul><li>插件文档必须放置在插件项目根目录中的 <code>doc</code> 目录下，入口文件是 <code>doc/README.md</code></li><li>插件开发文档需要详细列明插件使用者需知的内容，对插件申请条件、插件提供的自定义组件、页面、接口等进行必要的描述和解释，方便第三方小程序正确使用插件；</li><li>插件引用到的图片资源不能是网络图片，且必须放到doc目录下，同时为保证插件安全，文档中的链接只能链接到微信开发者社区、微信公众平台、GitHub。</li></ul></li><li><p><code>miniProgram</code>目录：示例小程序，方便调试插件、预览和审核</p><ul><li>示例小程序中需要引用插件，并在页面中引用插件中的组件来调用插件提供的能力服务；</li><li>除非<code>miniprogramRoot</code>指定目录为miniProgram，否则miniProgram中的文件内容不会上传</li></ul></li><li><p><code>plugin</code>目录：插件代码目录</p><ul><li>插件中组件和页面的编写方式与自定义组件相同，包含<code>json</code>、<code>js</code>、<code>wxss</code>、<code>wxml</code>四个文件组成；</li><li>插件中可以定义任意数量的自定义组件，这些组件在插件内可以相互引用，但提供给第三方小程序使用的组件必须在配置文件中给出；</li><li>插件也可以export一些js接口，但提供给第三方小程序使用的接口也必须在配置文件中给出；</li><li><strong>插件开发者需要提供插件调用失败、插件调用参数错误、插件调用参数疏漏等特殊情况的错误码和错误信息，以便插件使用者正确使用插件</strong>。</li><li>插件包会计入小程序总包的大小，所以插件开发者需要尽量控制插件的大小，避免不必要的逻辑和样式</li></ul></li><li><p><code>project.config.json</code>文件：</p><ul><li><code>miniprogramRoot</code>中指定的目录内容将会在插件上传时作为插件使用Demo一起上传，这个Demo会覆盖到插件的所有使用场景，便于插件的审核</li><li><code>compileType</code>字段表示项目编译类型，只有当<code>compileType == &#39;plugin&#39;</code> 时才能正常使用插件项目，<code>miniProgram</code>中引用的<code>plugin.version</code>才可以等于<code>dev</code></li></ul></li></ul><p>针对具体功能的开发实现，插件有其局限性，具体内容将在<span style="color:blue;">三. 插件的限制</span>中详细介绍。此外，插件的开发也有其需要特殊注意的地方，特别是在基础库版本、页面跳转、网络请求三个方面：</p><p><strong>1）基础库版本</strong></p><p>目前基础调试库版本已经更新至2.8.0，微信开发者工具针对2.2.2以下的版本会报错提示“🔥请将调试基础库上调到2.2.2以上”，因此插件的开发需要选择基础库 &gt; 2.2.2。</p><p><strong>2）页面跳转</strong></p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image2.png" style="height:450px;text-align:center;"><p>在插件的开发中常常会涉及到三种情况下的跳转，插件内跳转、插件间跳转和插件与小程序间跳转，都可以使用<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html"><code>navigator</code></a>组件和<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html"><code>wx.navigateTo</code></a>API来实现，但<strong>只有页面栈顶是插件页面的时候才可以调用<code>wx.navigateTo</code>来实现，且页面栈内不得高于10层</strong></p>',15),l=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("p",null,"插件内跳转："),Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("p",null,"基础库版本 < 2.1.0，插件内不支持使用页面")]),Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["g"])("基础库版本 2.1.0 ~ 2.2.2，插件内页面跳转需要设置目标页面的url，例如 "),Object(t["h"])("code",null,"plugin-private://PLUGIN_APPID/PATH_TO/PAGE")]),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("wx.navigateTo({\n    "),Object(t["h"])("span",{class:"hljs-attr"},"url"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`plugin-private://"),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".data.pluginAppid}")]),Object(t["g"])("/pages/about/about`")]),Object(t["g"])(",\n})\n")])])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,"基础库版本 > 2.2.2，插件内页面跳转可以使用相对路径作为目标页面的url"),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("wx.navigateTo({\n    "),Object(t["h"])("span",{class:"hljs-attr"},"url"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"`../about/about`"),Object(t["g"])(",\n})\n")])])])])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,"插件间跳转"),Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("p",null,"插件不能直接引用其他插件，也不能直接跳转至其他插件，但当小程序同时引用了插件A和插件B，插件A、B可以互相跳转与引用，使用方法如下："),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-json"},[Object(t["h"])("span",{class:"hljs-comment"},"// 小程序app.json引用两个插件"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-string"},'"plugins"'),Object(t["g"])(":  {\n  "),Object(t["h"])("span",{class:"hljs-attr"},'"APlugin"'),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-attr"},'"version"'),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"dev"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},'"provider"'),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"wx046..."'),Object(t["g"])("\n  },\n  "),Object(t["h"])("span",{class:"hljs-attr"},'"BPlugin"'),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-attr"},'"version"'),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"1.1.0"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},'"provider"'),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"wx047..."'),Object(t["g"])(" \n  }\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 插件A页面index要跳转到插件B pages/test/test，首先要在插件A index.json中定义"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-string"},'"usingComponents"'),Object(t["g"])(": {\n  "),Object(t["h"])("span",{class:"hljs-attr"},'"test"'),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"plugin-private://BPlugin_APPID/pages/test/test"'),Object(t["g"])("\n}\n")])]),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["g"])("// 插件A页面index中定义\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"navigator"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"url"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"plugin-private://BPlugin_APPID/pages/test/test"'),Object(t["g"])(" >")]),Object(t["g"])("跳转"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"navigator"),Object(t["g"])(">")]),Object(t["g"])("\n")])])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["h"])("code",null,"navigator"),Object(t["g"])("组件和"),Object(t["h"])("code",null,"usingComponents"),Object(t["g"])("定义中必须严格指定插件页面的路径，否则将会报错"),Object(t["h"])("code",null,'Component is not found in path "plugin-private://BPlugin_APPID/pages/test/test"')])])])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,"插件与小程序间跳转："),Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("小程序跳转至插件：小程序页面的页面栈顶不是插件页面，不满足插件页面跳转的必要条件，因此无法调用"),Object(t["h"])("code",null,"wx.navigateTo"),Object(t["g"])("跳转至插件页面，可以使用"),Object(t["h"])("code",null,"navigator"),Object(t["g"])("组件实现跳转")]),Object(t["h"])("li",null,[Object(t["g"])("插件跳转至小程序：鉴于插件API的限制，不能调用"),Object(t["h"])("code",null,"wx.navigateToMiniProgram"),Object(t["g"])("实现插件跳转至小程序，可以使用"),Object(t["h"])("code",null,"navigator"),Object(t["g"])("组件或"),Object(t["h"])("code",null,"wx.navigateTo"),Object(t["g"])("实现跳转，若使用"),Object(t["h"])("code",null,"wx.navigateTo"),Object(t["g"])(" API时同样需要满足"),Object(t["h"])("strong",null,"页面栈顶是插件页面"),Object(t["g"])("的条件。")])])])],-1),a=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"3） 网络请求")],-1),j=Object(t["h"])("p",null,[Object(t["g"])("插件在使用"),Object(t["h"])("a",{href:"https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html"},[Object(t["h"])("code",null,"wx.request")]),Object(t["g"])("API发送网络请求时，将会额外携带一个签名"),Object(t["h"])("code",null,"HostSign"),Object(t["g"])("，用于验证请求来源于小程序插件，这个签名位于请求头中，形如：")],-1),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-json"},[Object(t["g"])("X-WECHAT-HOSTSIGN: {\n  "),Object(t["h"])("span",{class:"hljs-attr"},'"noncestr"'),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-string"},'"NONCESTR"'),Object(t["g"])(", \n  "),Object(t["h"])("span",{class:"hljs-attr"},'"timestamp"'),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-string"},'"TIMESTAMP"'),Object(t["g"])(", \n  "),Object(t["h"])("span",{class:"hljs-attr"},'"signature"'),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-string"},'"SIGNATURE"'),Object(t["g"])("\n}\n")])],-1),h=Object(t["h"])("p",null,[Object(t["g"])("其中，"),Object(t["h"])("code",null,"NONCESTR"),Object(t["g"])("是一个随机字符串，"),Object(t["h"])("code",null,"TIMESTAMP"),Object(t["g"])("是生成这个随机字符串和"),Object(t["h"])("code",null,"SIGNATURE"),Object(t["g"])("的UNIX时间戳，他们是生成"),Object(t["h"])("code",null,"SIGNATURE"),Object(t["g"])("的参数，签名算法为：")],-1),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("SIGNATURE = sha1([APPID, NONCESTR, TIMESTAMP, TOKEN].sort().join("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])("))\n")])],-1),O=Object(t["f"])('<p>其中，主要参数：</p><ul><li><p><code>APPID</code>是所在小程序的AppId，可以从请求头的referrer中获得：</p><p>网络请求的referrer格式固定为<code>https://servicewechat.com/{appid}/{version}/page-frame.html</code>，其中{appid}为小程序的appid，{version}为小程序的版本号，版本号为0表示为开发版、体验版以及审核版本，版本号为<code>devtools</code>表示为开发者工具，其余为正式版本。</p></li><li><p><code>TOKEN</code>是插件TOKEN，可以在小程序插件 --&gt; 基本设置中找到。</p></li><li><p>自基础库版本 2.0.7 开始，小程序运行期间，网络状况正常时，<code>NONCESTR</code>和<code>TIMESTAMP</code>每10分钟变更一次，如有必要，可以通过判断<code>TIMESTAMP</code>判断当前的签名是否有效。</p></li></ul><p>插件开发者可以在服务器上按照以下步骤校验签名：</p><ul><li><code>sort</code>对<code>APPID</code>、<code>NONCESTR</code>、<code>TIMESTAMP</code>、<code>TOKEN</code>四个值表示成字符串形式，按照字典序排序</li><li><code>join</code>将排好序的四个字符串直接连接在一起</li><li>对连接结果使用<code>sha1</code>算法，结果即为<code>SIGNATURE</code></li></ul><p>插件开发者为保证插件的安全性，可以按照以下步骤校验调用方：</p><ul><li>服务器依据使用者小程序AppId判别是否具备插件调用权限，如不具备则拒绝调用</li><li>服务器依据签名判别请求签名是否有效，无效则拒绝返回错误码</li></ul><h4>2. 插件的发布</h4><p>通过微信开发者工具预览验证后即可准备发布，可以按照以下步骤上传和发布插件：</p><ul><li>**选择上传配置：**在微信开发者工具中配置&quot;上传代码时自动压缩混淆&quot;、“上传代码时进行代码保护”等项目，以压缩插件代码，及保护插件代码安全（TODO）</li><li>**上传代码：**在微信开发者工具中点击“上传”，填写版本号（即为使用者可以指定的插件版本号），即可上传插件代码</li><li>**上传开发文档：**在“编辑器”中打开开发文档，编辑完成后，可以使用编辑器底部的上传入口上传插件文档，上传后的文档不会立刻发布，需要使用账号密码登录插件管理后台，在 小程序插件 &gt; 基本设置 中预览、发布插件文档，文档发布后，可多次更新修改。</li><li>**提交审核：**上传后即可提交审核，提交审核时需要填写准确的插件服务类目、标签及功能描述，同时服务类目需要满足<a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#开放范围及服务类目" target="_blank">[官方开放的类目范围]</a>，审核周期一般为7个工作日，审核结果将会通过模板消息、站内信通知管理员。</li><li>**发布新版本：**审核通过后即可发布，发布时需要填写准确的版本更新信息，和支持的最低版本库</li></ul><p>需要注意的是插件没有体验版，可以发布多个线上版本，由使用者决定具体使用的版本号。上传后的插件由小程序框架对每个插件进行数据安全保护，保证他们之间不能窃取其他任何一方的数据，同时插件的逻辑代码也无法被使用方看法，这些都依赖于插件的安全隔离机制（TODO，安全隔离机制具体是啥，是否存在代码加密？）</p><h4>3. 插件的更新</h4><p>按照上一节插件的发布中的步骤，即可发布更新后的插件代码，需要特别注意的是，在发布时，需要关注选项“快速更新”，勾选快速更新后，系统会为插件使用者管理员统一下发模板消息，模板消息中包含快速更新的链接，支持插件版本的快速更新，该次快速更新免审核。</p><p>此外，在插件的更新中需要特别注意的是，为了保证插件更新的稳定性，插件开发者需要保持版本迭代过程中插件所调用数据接口的稳定性。</p><h3>二. 插件的使用</h3><h4>1. 插件的申请</h4><p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image3.png" alt="图片 2"></p><p><strong>任何注册的小程序</strong>都可以在小程序后台申请插件，申请后需要等待插件开发者小程序管理员通过后，方可使用插件，如果调用没有通过申请的插件，则使用者小程序白屏，并报错：<span style="color:red;">插件申请成功，待审核确认</span>，如果调用未申请的插件，则使用者小程序白屏，并会报错：<span style="color:red;">插件未授权</span>。</p><p>同时，插件使用者需要关注插件开发文档中的插件申请条件，若不满足申请条件，插件开发者一般不会通过插件申请。</p><p>一个小程序最多添加5个小程序插件。</p><h4>2. 插件的使用</h4><p><strong>1）插件基本使用方法</strong></p><p>以“好物推荐”插件为例，使用插件可以按照以下几个步骤：</p><ul><li><p>在小程序<code>app.json</code>文件中引用插件：</p></li><li><p>在引用插件组件的页面中引用插件组件：</p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image5.png" style="width:600px;border:1px solid #ededed;"></li><li><p>在引用插件组件的页面中写入插件组件：</p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image6.png" style="width:600px;border:1px solid #ededed;"></li><li><p>在引用插件组件的页面中定义插件所需参数，即可使用插件</p></li><li><p>为保证小程序正常运行，插件使用者需要针对插件调用失败等特殊情况做兜底逻辑</p></li></ul><p>如果插件只在一个分包内用到，可以将插件仅放在这个分包内，例如： <img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image7.png" style="width:600px;border:1px solid #ededed;"></p><p>但分包内使用插件有如下限制：</p><ul><li>在分包内使用的插件仅能在分包内使用；</li><li>同一个插件不能被多个分包同时引用；</li><li>不能从分包外的页面直接跳入分包内的插件页面，需要先跳入分包内的非插件页面，再跳入同一分包内的插件页面</li></ul><p><strong>2）依赖版本</strong></p><ul><li>引用的插件版本不被支持，即引用的插件版本号 &lt;最低可用版本号，或 &gt;最新版本号，使用者小程序白屏，并报错“插件版本不存在”</li><li>公共库版本 &lt; 2.2.2，无法正常使用插件，并调试工具报错“将版本更新至🔥请将调试基础库上调到2.2.2以上”</li><li>（TODO：真机测试公共库版本）</li></ul><p><strong>3）其他</strong></p><ul><li>插件使用方计算代码包大小时会合并计入引用的插件大小，因此如果插件只有一个分包使用，可以尽量将插件放在分包下</li><li>插件开发者可以获得因为引用插件而传入的数据，为保护数据安全，要关注插件开发文档中的参数要求，避免传入不必要的数据</li></ul><h4>3. 插件的更新</h4><p>若小程序开发者发布小程序时勾选了“快速更新”选项，则插件使用者小程序管理员会在微信收到模板消息，并附有“快速更新”的链接，可以实现一键更新小程序中引用的插件版本，同时该次更新不必审核。</p><h3>三. 插件的限制</h3><h4>1. 调用API的限制</h4><p>插件可以调用的 API 与小程序不同，主要有两个区别：</p><ul><li>插件的请求域名列表与小程序相互独立；</li><li>一些 API 不允许插件调用（这些函数不存在于 <code>wx</code> 对象下）。</li></ul><p>允许插件调用的API及其对应版本要求列表可参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/api-limit.html" target="_blank">[官方说明]</a>，若在插件中调用了不支持的API，监听fail回调，可获得错误信息为<code>getUserInfo:fail 系统错误，错误码：-12015,system error</code>。有些接口，例如<code>wx.login</code>、<code>wx.getUserInfo</code>、虽然在插件中不能使用，但可以通过插件功能页来达到目的，例如用户信息功能页、支付功能以及收货地址功能：</p><ul><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/user-info.html" target="_blank">[用户信息功能页]</a>：相当于调用<code>wx.login</code>和<code>wx.getUserInfo</code>，自基础库2.3.1开始，用户在功能页授权后，插件就可以直接调用<code>wx.login</code>和<code>wx.getUserInfo</code>无需再次进入功能页获取信息，自基础库版本2.6.3起，可以使用<code>wx.getSetting</code>查询用户是否授权过。用户信息功能页相关开发可按照如下步骤：</p><ul><li><p>在插件页面中引用<code>functional-page-navigator</code></p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image8.png" style="width:600px;border:1px solid #ededed;"></li><li><p>在插件页面中声明用户信息获取成功的回调</p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image9.png" style="width:600px;border:1px solid #ededed;"></li><li><p>即可使用用户信息 <img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image10.png" style="width:600px;border:1px solid #ededed;"></p></li></ul></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/request-payment.html" target="_blank">[支付功能页]</a>：相当于调用<code>wx.requestPayment</code>的功能，支付功能页的使用与用户信息功能页类似，<code>function-page-navigator</code>参数<code>name=requestPayment</code>。<strong>需要注意的是插件使用支付功能，需要在管理后台 小程序插件 -&gt; 基本设置 -&gt; 支付能力”设置项中。另外，无论是否通过申请，主体为个人小程序在使用插件时，都无法正常使用插件里的支付功能。</strong></p></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/choose-address.html" target="_blank">[收货地址功能页]</a>：相当于调用<code>wx.chooseAddress</code>的功能，支付功能页的使用与用户信息功能页类似，<code>function-page-navigator</code>参数<code>name=chooseAddress</code>。</p><p>​ <img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image11.png" style="width:600px;border:1px solid #ededed;"></p></li></ul><h4>2. 使用组件的限制</h4><p>在插件开发中，以下组件不能在插件页面中使用：</p><ul><li>开放能力（open-type）为以下之一的button： <ul><li>contact（打开客服会话）</li><li>getPhoneNumber（获取用户手机号）</li><li>getUserInfo（获取用户信息）</li></ul></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html" target="_blank">[open-data]</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html" target="_blank">[web-view]</a></li></ul><p>以下组件的使用对基础库版本有要求：</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html" target="_blank">[navigator]</a><a href></a> 需要基础库版本 [2.1.0]</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html" target="_blank">[live-player]</a> 和 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-pusher.html" target="_blank">[live-pusher]</a> 需要基础库版本 [2.3.0]</li></ul>',43);function r(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O])}const g={};g.render=r;s["default"]=g},"353e":function(e,s,c){},3548:function(e,s,c){},"3af7":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>上两篇解释了如何从项目文件夹内读取markdown文件，渲染文章页面，并生成目录树，锚定页面。本篇主要解释的是如何在文章内添加评论，将整个博客项目部署到github，通过github.io进行访问。</p><p>博客源码github: <a href="https://github.com/zhangmingemma/zhangmingemma.github.io" target="_blank">博客仓库地址</a></p><h2>1. 文章评论</h2><p>我这边不太想用服务器那一套，不想自己做存储，所以使用的是凹凸实验室开发的<code>gitalk</code>评论体系，它的原理其实是在github仓库内根据<code>id</code>新增issue，发表的评论便是新增的issue回复。指引中关于使用方法，其实说明的已经非常清楚了，这里就不做赘述了~~~</p><p>gitalk源码与指引: <a href="https://github.com/gitalk/gitalk" target="_blank">gitalk源码与指引</a> gitalk示例Demo: <a href="https://gitalk.github.io/" target="_blank">gitalk示例Demo</a></p><h2>2. 部署github</h2>',6),l=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["g"])("在"),Object(t["h"])("code",null,"vue.config.js"),Object(t["g"])("配置根目录和"),Object(t["h"])("code",null,"index.html"),Object(t["g"])("的文件路径：")]),Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("设置"),Object(t["h"])("code",null,"publicPath"),Object(t["g"])("，是因为默认"),Object(t["h"])("code",null,"build"),Object(t["g"])("后的文件内容全部防止在"),Object(t["h"])("code",null,"dist"),Object(t["g"])("文件夹内，包含编译后的"),Object(t["h"])("code",null,"js"),Object(t["g"])("文件、"),Object(t["h"])("code",null,"css"),Object(t["g"])("文件、静态文件、"),Object(t["h"])("code",null,"public"),Object(t["g"])("文件夹下的内容等，因此我们需要将线上环境的根目录指向"),Object(t["h"])("code",null,"/dist"),Object(t["g"])("，这样"),Object(t["h"])("code",null,"index.html"),Object(t["g"])("中引用的"),Object(t["h"])("code",null,"js"),Object(t["g"])("和"),Object(t["h"])("code",null,"css"),Object(t["g"])("的路径才是正确的。")]),Object(t["h"])("li",null,[Object(t["g"])("设置"),Object(t["h"])("code",null,"indexPath"),Object(t["g"])("，是因为"),Object(t["h"])("code",null,"build"),Object(t["g"])("后的"),Object(t["h"])("code",null,"index.html"),Object(t["g"])("默认也是防止在"),Object(t["h"])("code",null,"dist"),Object(t["g"])("文件夹内的，所以部署后访问自己的页面，需要是"),Object(t["h"])("code",null,"zhangmingemma.github.io/dist"),Object(t["g"])("，太丑了，所以我们这边配置后将"),Object(t["h"])("code",null,"index.html"),Object(t["g"])("放在最外层，可以直接访问"),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"parallel"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"publicPath"),Object(t["g"])(": process.env.NODE_ENV === "),Object(t["h"])("span",{class:"hljs-string"},'"production"'),Object(t["g"])(" ? "),Object(t["h"])("span",{class:"hljs-string"},'"/dist"'),Object(t["g"])(" : "),Object(t["h"])("span",{class:"hljs-string"},'"/"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"indexPath"),Object(t["g"])(": path.resolve(__dirname, "),Object(t["h"])("span",{class:"hljs-string"},"'index.html'"),Object(t["g"])(")\n}\n")])])])])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["h"])("code",null,"vue-router"),Object(t["g"])("使用hash模式，而非history模式，原因是history模式的路由跳转，会向服务器重新发起页面请求，而GitHub Pages并没有提供服务器，所以我们需要使用hash模式")]),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" router = createRouter({\n    "),Object(t["h"])("span",{class:"hljs-attr"},"history"),Object(t["g"])(": createWebHashHistory(),\n    routes\n})\n")])])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["g"])("新建代码仓库"),Object(t["h"])("code",null,"username.github.io"),Object(t["g"])("，将build后包含dist文件夹的代码"),Object(t["h"])("code",null,"push"),Object(t["g"])("到仓库的"),Object(t["h"])("code",null,"gh-pages"),Object(t["g"])("分支，之后就可以访问"),Object(t["h"])("code",null,"https://username.github.io"),Object(t["g"])("，看到自己的博客了。")])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["g"])("这里"),Object(t["h"])("code",null,"markdown"),Object(t["g"])("中我有引用一些存储在"),Object(t["h"])("code",null,"public/images"),Object(t["g"])("目录下的本地图片，在部署之后，markdown没有被webpack解析到内容，所以图片的路径并没有得到转换，访问的是域名根目录，我这里的处理方式是转换为线上地址，本地开发的时候配置代理来访问。如果大家有更好的处理方式可以评论告诉我。我的具体做法是")]),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-markdown"},"// 原来图片的引用路径\n![](../images/2021-07-03/1.png)\n\n// 修改后图片的引用路径\n![](https://username.github.io/dist/images/2021-07-03/1.png)\n")]),Object(t["h"])("p",null,"本地开发时配置的代理是："),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"username.github.io/dist/images http://127.0.0.1:8080/images \n")])])],-1);function a(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l])}const j={};j.render=a;s["default"]=j},"3c31":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,[Object(t["g"])("JS中的"),Object(t["h"])("code",null,"this"),Object(t["g"])("指向非常复杂，我们这一篇就简单讲解JS中的"),Object(t["h"])("code",null,"this"),Object(t["g"])("指向规则")],-1),l=Object(t["h"])("h3",null,"一. 默认绑定",-1),a=Object(t["h"])("p",null,[Object(t["g"])("独立调用函数时，"),Object(t["h"])("code",null,"this"),Object(t["g"])("都指向"),Object(t["h"])("code",null,"window"),Object(t["g"])("，跟函数定义的位置没有关系")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"foo"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n}\nfoo() "),Object(t["h"])("span",{class:"hljs-comment"},"// window"),Object(t["g"])("\n")])],-1),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" obj = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"CLF"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"foo"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" bar = obj.foo\nbar() "),Object(t["h"])("span",{class:"hljs-comment"},"// window"),Object(t["g"])("\n")])],-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Func"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = "),Object(t["h"])("span",{class:"hljs-number"},"123"),Object(t["g"])("\n}\nFunc.prototype.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ff = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Func()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" aFunc = ff.say\naFunc() "),Object(t["h"])("span",{class:"hljs-comment"},"// window"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("h3",null,"二. 隐式绑定",-1),O=Object(t["h"])("p",null,[Object(t["g"])("通过某个对象发起的函数调用"),Object(t["h"])("code",null,"obj.fn")],-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" obj = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"CLF"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"foo"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n    }\n}\nobj.foo() "),Object(t["h"])("span",{class:"hljs-comment"},"// obj"),Object(t["g"])("\n")])],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" obj1 = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"obj1"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"foo"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" obj2 = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"obj2"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"bar"),Object(t["g"])(": obj1.foo\n}\nobj2.bar() "),Object(t["h"])("span",{class:"hljs-comment"},"// obj2"),Object(t["g"])("\n")])],-1),p=Object(t["f"])("<h3>三. 显式绑定</h3><p><strong>bind</strong>的绑定优先级高于<code>apply</code>和<code>call</code>。通过<code>bind</code>、<code>call</code>和<code>apply</code>绑定执行上下文称为显式绑定</p>",2),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"foo"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" obj = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"obj"'),Object(t["g"])("\n}\nfoo.call(obj) "),Object(t["h"])("span",{class:"hljs-comment"},"// obj"),Object(t["g"])("\nfoo.apply(obj) "),Object(t["h"])("span",{class:"hljs-comment"},"// obj"),Object(t["g"])("\nfoo.apply("),Object(t["h"])("span",{class:"hljs-string"},'"aaa"'),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// aaa"),Object(t["g"])("\n")])],-1);function d(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i])}const u={};u.render=d;s["default"]=u},"3c65":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"虚拟DOM"),Object(t["g"])("是"),Object(t["h"])("strong",null,"Vue2"),Object(t["g"])("中很关键的点，为什么一定要加入虚拟DOM？以及Vue采用数据劫持的手段可以精准拿到变化的数据，为什么还要用虚拟DOM？这篇文章就是试图了解并解决Vue中虚拟DOM的实现及原理。")],-1),l=Object(t["h"])("h3",null,"一. 虚拟DOM是什么",-1),a=Object(t["h"])("p",null,[Object(t["g"])("虚拟DOM是一棵以JS对象作为基础的树，每一个节点称为"),Object(t["h"])("code",null,"VNode"),Object(t["g"])("，用对象属性来描述节点，实际上它是一层对真实DOM的抽象，最终可以通过渲染操作使这棵树映射到真实环境上。")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"id1"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("item 1"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("item 2"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),b=Object(t["h"])("p",null,"这个真实的DOM节点，用虚拟DOM来描述就是",-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"tag"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'ul'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"attributes"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'id1'"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"children"),Object(t["g"])(": [\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 这里是li"),Object(t["g"])("\n    ]\n}\n")])],-1),o=Object(t["h"])("p",null,"VNode属性的含义包含：",-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("tag: 标签名\n"),Object(t["h"])("span",{class:"hljs-attr"},"data"),Object(t["g"])(": 关联数据\n"),Object(t["h"])("span",{class:"hljs-attr"},"children"),Object(t["g"])(": 子节点\n"),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": 文本，文本节点或注释节点会有该属性\n"),Object(t["h"])("span",{class:"hljs-attr"},"elm"),Object(t["g"])(": 对应的真实的DOM\n"),Object(t["h"])("span",{class:"hljs-attr"},"ns"),Object(t["g"])(": namespace\n"),Object(t["h"])("span",{class:"hljs-attr"},"context"),Object(t["g"])(": Component，编译、渲染的作用域\n"),Object(t["h"])("span",{class:"hljs-attr"},"key"),Object(t["g"])(": key属性，作为节点标识，有利于patch的优化\ncomponentOptions?: 组件配置项\ncomponentInstance?: 组件实例\n"),Object(t["h"])("span",{class:"hljs-attr"},"parent"),Object(t["g"])(": 组件的占位节点\n"),Object(t["h"])("span",{class:"hljs-attr"},"raw"),Object(t["g"])(": 服务端专用，原始HTML\n"),Object(t["h"])("span",{class:"hljs-attr"},"isStatic"),Object(t["g"])(": 静态节点，未绑定动态数据，在数据更新时不需要对比节点\n"),Object(t["h"])("span",{class:"hljs-attr"},"isRootInsert"),Object(t["g"])(": 是否作为根节点插入，被<transition>包裹的节点，该属性的值为"),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-attr"},"isComment"),Object(t["g"])(": 注释节点\n"),Object(t["h"])("span",{class:"hljs-attr"},"isCloned"),Object(t["g"])(": 克隆节点\n"),Object(t["h"])("span",{class:"hljs-attr"},"isOnce"),Object(t["g"])(": v-once node\nasyncFactory?: "),Object(t["h"])("span",{class:"hljs-keyword"},"async"),Object(t["g"])(" component factory "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-title"},"asyncMeta"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-title"},"Object"),Object(t["g"])(" | "),Object(t["h"])("span",{class:"hljs-title"},"void"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-title"},"isAsyncPlaceholder"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-title"},"boolean"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-title"},"ssrContext"),Object(t["g"])("?: 服务端渲染上下文\n"),Object(t["h"])("span",{class:"hljs-title"},"fnContext"),Object(t["g"])(": 函数式组件上下文\n"),Object(t["h"])("span",{class:"hljs-title"},"fnOptions"),Object(t["g"])("?: 函数式组件配置项\n"),Object(t["h"])("span",{class:"hljs-title"},"devtoolsMeta"),Object(t["g"])("?: "),Object(t["h"])("span",{class:"hljs-title"},"used"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"to"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"store"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"functional"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"render"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"context"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"for"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"devtools"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-title"},"fnScopeId"),Object(t["g"])("?: 函数式组件作用域"),Object(t["h"])("span",{class:"hljs-title"},"ID"),Object(t["g"])("\n")])])],-1),r=Object(t["f"])('<h3>二. 虚拟DOM的作用</h3><p><strong>Vue1.0还没有引入虚拟DOM技术</strong>，当时的<strong>响应更新粒度极小</strong>，也就是每个数据与使用到自己的DOM节点都绑定了依赖关系，因此内存开销比较大，当项目比较大时会遇到性能瓶颈。在检查中检测具体到节点的状态变化，采用更细粒度来绑定更新视图。</p><p>**那Vue2.0为什么引入虚拟DOM呢？**<strong>Vue2.0采用中等粒度方案监听</strong>，只能监听到组件的变化，而组件内部就使用虚拟DOM进行状态对比。每次渲染视图时都是先创建<code>VNode</code>，然后使用它创建真实DOM插入到页面中，所以可以将上一次渲染视图时所创建的<code>VNode</code>缓存起来，之后每当需要重新渲染视图时，将新创建的<code>VNode</code>和上一次缓存的<code>VNode</code>进行对比，找出更新前后的DOM差异，再基于DOM差异去修改真实的<code>DOM</code>。</p><p>尤雨溪在<a href="https://zhuanlan.zhihu.com/p/23752826" target="__blank">[Vue 的理念问题]</a>中的回答谈到，<strong>虚拟DOM的优势</strong>是：</p><ul><li><strong>组件的高度抽象化</strong>：Vue2.0引入<code>VDOM</code>的主要原因是<code>VDOM</code>是把渲染过程抽象化了，从而使组件的抽象能力得到提升，并且可以适配DOM以外的渲染目标。</li><li><strong>可以更好实现SSR，同构渲染</strong>：Vue1.0都是直接操作DOM，比如SSR时，node上没有DOM也做不了DOM操作，只走DOM操作之前的模板替换阶段的话，根本渲染不出什么有用的东西来。有VDOM的话，SSR就很好实现了。也可以渲染到DOM之外的平台，<code>Weex</code>等框架应用的就是这一特性。</li><li><strong>性能提升</strong>：这个方面其实只有在HTML tag剧烈变化的时候才会体现出VDOM的好处，在大量、频繁的数据更新下，能够对视图进行合理、高效的更新</li></ul><h5>1. <strong>SSR</strong></h5><p><strong>SSR</strong>是指服务端渲染，是指由服务侧完成页面的HTML结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态和事件，称为完全可交互页面的过程。</p><p><strong>与客户端的单页应用 (SPA) 相比，SSR 的优势主要在于：</strong></p><ul><li><strong>更快的首屏加载</strong>：这一点在慢网速或者运行缓慢的设备上尤为重要。服务端渲染的 HTML 无需等到所有的 JavaScript 都下载并执行完成之后才显示，所以你的用户将会更快地看到完整渲染的页面。除此之外，数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。这通常可以带来更高的核心 Web 指标评分、更好的用户体验，而对于那些“首屏加载速度与转化率直接相关”的应用来说，这点可能至关重要。</li><li><strong>统一的心智模型</strong>：你可以使用相同的语言以及相同的声明式、面向组件的心智模型来开发整个应用，而不需要在后端模板系统和前端框架之间来回切换。</li><li><strong>更好的SEO</strong>：搜索引擎爬虫可以直接看到完全渲染的页面</li></ul><p><strong>使用SSR时还有一些权衡之处需要考量：</strong></p><ul><li><strong>开发中的限制</strong>：浏览器端特定的代码只能在某些生命周期钩子中使用；一些外部库可能需要特殊处理才能在服务端渲染的应用中运行。</li><li><strong>更多的与构建配置和部署相关的要求</strong>：服务端渲染的应用需要一个能让 Node.js 服务器运行的环境，不像完全静态的 SPA 那样可以部署在任意的静态文件服务器上。</li><li><strong>更高的服务端负载</strong>：在 Node.js 中渲染一个完整的应用要比仅仅托管静态文件更加占用 CPU 资源，因此如果你预期有高流量，请为相应的服务器负载做好准备，并采用合理的缓存策略。</li></ul><h5>2. <strong>同构渲染</strong></h5><p>同构渲染简单来说就是一份代码，服务端先通过<strong>SSR</strong>生成html以及初始化数据，客户端拿到代码和初始化数据后，通过对html的dom进行patch和事件绑定对dom进行客户端激活<strong>CSH</strong>，这个整体的过程叫同构渲染。</p><p><strong>同构渲染能解决首屏加载和seo的问题吗？</strong> 首先，文件交由服务端渲染完，展示的速度肯定是提升的。同样也可以解决SEO的问题。比较前后端还是属于不同环境，同构考验开发人员对大局观的考虑，约束了特定环境的一些开发灵活性，同时也影响代码解耦。ssr抛开这两点好处，甚至没有找到任何优点。所以这是当前前后端同构不温不火的重要原因</p>',14);function g(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r])}const p={};p.render=g;s["default"]=p},"3f9c":function(e,s,c){"use strict";c("6237")},"44f1":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<h3>BFC</h3><p>BFC(Blocking Formatting Contexts)，翻译过来是“块级格式化上下文”，在了解BFC之前，让我们先来看看FC(Formatting Contexts)，<a href="https://www.w3.org/TR/CSS22/visuren.html#block-formatting">W3C的官方解释</a>是：</p><blockquote><p>文档中的每个元素都是FC的一部分，FC包BFC、IFC等多种类型。块级元素在BFC中排布，行内元素在IFC中排布。</p></blockquote><p>简单来说，FC就是格式化上下文，可以理解为布局环境，不同类型的格式化上下文定义了不同的内容元素排布方式，如果不了解块级元素、行内元素，可以去看看<a href="https://zhangmingemma.github.io/#/post?file=2022-10-12-Box" target="_blank">《CSS基础系列之块级元素、行内元素》</a>。BFC是一个完全独立的空间，空间里的子元素不会影响到外面的布局。BFC的创建方式：</p><blockquote><ol><li>浮动定位</li><li>绝对定位，position的值设为<code>absolute</code>、<code>fixed</code></li><li><code>display</code>的值设为<code>inline-block</code>、<code>table-cells</code>、<code>table-captions</code>、<code>flex</code></li><li><code>overflow</code>不为<code>visible</code>，值为<code>scroll</code>、<code>auto</code>、<code>hidden</code></li><li><code>&lt;html&gt;</code></li></ol></blockquote><p>W3C也定义了BFC的规则：</p><blockquote><ol><li>BFC内的子元素从容器顶部自上而下顺次纵向排布，BFC内每个子元素的左边贴近容器的左边（从右至左排布的容器子元素右边贴近容器的右边）</li></ol></blockquote>',7),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"background: lightgrey; overflow: auto;"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),a=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/5.png"},null,-1),j=Object(t["h"])("blockquote",null,[Object(t["h"])("ol",{start:"2"},[Object(t["h"])("li",null,"BFC内上下邻近的两个子元素之间的间距取决于margin的值，并且同一BFC上下元素margin会重叠")])],-1),b=Object(t["h"])("p",null,"下面的例子中本身定义的两个div的间距为20px，但实际展示为10px",-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"background: lightgrey;overflow:auto"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow; margin: 0 0 10px 10px;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; margin: 10px 0 0 10px;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),o=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/6.png"},null,-1),O=Object(t["h"])("blockquote",null,[Object(t["h"])("ol",{start:"4"},[Object(t["h"])("li",null,"BFC高度计算时，浮动元素也参与计算，下面的例子中，容器包含浮动元素和普通div，高度为两个元素的高度和")])],-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"background: lightgrey; overflow: auto;"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; float: left;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),g=Object(t["f"])('<img src="https://zhangmingemma.github.io/dist/images/2022-10-11/7.png" style="width:400px;"><h4>BFC的应用场景</h4><p>鉴于BFC内的子元素的布局不会影响到外面，同样外面也不会影响到BFC内部的元素，因此，我们可以通过BFC来解决一些实际问题：</p><h5>1. 清除浮动，解决高度塌陷</h5><p>在下面的例子中，<code>div</code>容器中包含了一个<code>float</code>元素，但<code>float</code>元素的高度并没有撑开<code>div</code>容器的高度，导致<code>div</code>容器的<code>border</code>从<code>float</code>元素下面穿过。</p>',5),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"background: grey; border: 5px solid black"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"float:left; width: 200px; height: 150px; background: purple;"'),Object(t["g"])(">")]),Object(t["g"])("\n    I am a floated box\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"p"),Object(t["g"])(">")]),Object(t["g"])("I am the content inside the container"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"p"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),i=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/1.png"},null,-1),d=Object(t["h"])("p",null,[Object(t["g"])("此时就可以用BFC将float元素包裹起来，或者让"),Object(t["h"])("code",null,"div"),Object(t["g"])("容器自身变成一个BFC容器，就可以清除浮动，解决高度塌陷的问题")],-1),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"background: lightgrey; border: 5px solid black; overflow: auto;"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"float:left; width: 200px; height: 150px; background: yellow;"'),Object(t["g"])(">")]),Object(t["g"])("I am a floated box"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"p"),Object(t["g"])(">")]),Object(t["g"])("I am the content inside the container"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"p"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),m=Object(t["f"])('<img src="https://zhangmingemma.github.io/dist/images/2022-10-11/2.png"><h5>2. margin边距重叠</h5><p>在下面的例子中，<code>container</code>容器中包含了两个上下排布的<code>div</code>，按照定义，外边距定义为<code>10px</code>，我们期望两个<code>div</code>之间的边距为<code>20px</code>，但实际上会发生<code>margin</code>重叠，两个<code>div</code>之间的边距只有<code>10px</code>。并且两个<code>div</code>的上下边距也都是失效的，贴近容器边，而不是定义的上下边距均为<code>10px</code></p>',3),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"background: lightgrey;"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow; margin: 10px;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; margin: 10px;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),f=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/3.png"},null,-1),w=Object(t["h"])("p",null,"可以用BFC将子节点包起来，形成BFC之后，就可以避免其他节点的影响，解决margin边距重叠的问题",-1),k=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"background: lightgrey;"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"display: flex;"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow; margin: 10px;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"display: flex;"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; margin: 10px;"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),v=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/4.png"},null,-1),x=Object(t["h"])("h3",null,"IFC",-1),S=Object(t["h"])("p",null,"开头提到FC包含多种类型，IFC也是其中的一种，IFC(Inline Formatting Contexts)，翻译为行内格式化上下文，在W3C中的定义是：",-1),P=Object(t["h"])("blockquote",null,[Object(t["h"])("p",null,"当块级容器内仅包含行内元素就会创建IFC")],-1),_=Object(t["h"])("p",null,"IFC的布局规则定义是：",-1),C=Object(t["h"])("blockquote",null,[Object(t["h"])("ol",null,[Object(t["h"])("li",null,"在IFC中，子元素自容器顶部水平顺次排布，垂直方向上可以按照顶部对齐、底部对齐、水平线对齐等各种方式对齐")])],-1),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["g"])(".container {\n  background:lightgrey; \n  width:500px; \n  height:200px; \n  vertical-align:middle; \n  line-height:200px;\n}\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("I am a span"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"b"),Object(t["g"])(">")]),Object(t["g"])("I am b element"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"b"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),I=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/8.png",style:{width:"400px"}},null,-1),E=Object(t["h"])("blockquote",null,[Object(t["h"])("ol",{start:"2"},[Object(t["h"])("li",null,[Object(t["g"])("在IFC中，包含一行内所有子元素的矩形区域成为"),Object(t["h"])("code",null,"line box"),Object(t["g"])("，即行框，行框的宽度取决于子元素的宽度和浮动，框的高度由所有子元素的高度撑开，最终高度可由所有元素最顶边到最底边的距离计算")])])],-1),A=Object(t["h"])("p",null,"下面的例子中最终行框的高度为最大的b的高度50px",-1),D=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["g"])(".container {\n  background:lightgrey; \n}\nspan {\n  line-height: 20px;\n  background: lightblue;\n}\nb {\n  line-height: 50px;\n  background: yellow;\n}\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("I am a span"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"b"),Object(t["g"])(">")]),Object(t["g"])("I am b element"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"b"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),M=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/10.png",style:{width:"400px"}},null,-1),N=Object(t["h"])("blockquote",null,[Object(t["h"])("ol",{start:"3"},[Object(t["h"])("li",null,[Object(t["g"])("行框能够包含所有子元素，如果子元素的高度小于行框的高度，则其垂直方向的排布取决于"),Object(t["h"])("code",null,"vertical-align"),Object(t["g"])("，如果子元素的宽度小于行框的宽度，则其水平方向的排布取决于"),Object(t["h"])("code",null,"text-align")]),Object(t["h"])("li",null,"如果行框在水平方向上放不下所有行内元素，则会换行，如果包含不可换行的元素，则会溢出")])],-1),F=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["g"])(".container {\n  background:lightgrey; \n  width: 400px;\n  height: 100px;\n}\n.container2 {\n  background:lightgrey; \n  width: 400px;\n  height: 100px;\n  margin-top: 50px;\n  white-space: nowrap;\n}\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("An inline formatting context is established by a block container box that contains no block-level boxes. In an inline formatting context, boxes are laid out horizontally, one after the other. "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container2"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("An inline formatting context is established by a block container"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),R=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/11.png",style:{width:"400px"}},null,-1),V=Object(t["h"])("blockquote",null,[Object(t["h"])("ol",{start:"5"},[Object(t["h"])("li",null,"在IFC中，如果混入块级元素，则水平方向无法容纳所有子元素，则会进行换行，分布在多个垂直排布的行框内，但不会重叠"),Object(t["h"])("li",null,"在IFC中，子元素只会计算水平margin，而垂直方向上的margin不会被计算")])],-1),B=Object(t["h"])("p",null,"下面的例子中，b元素设置了四周边距为30px，但实际上只有左右边距生效了，上下边距并未生效",-1),L=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["g"])(".container {\n  background:lightgrey; \n  width:500px; \n  height:200px; \n  margin-top: 100px;\n}\nb {\n  margin: 30px;\n}\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("I am a span"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"b"),Object(t["g"])(">")]),Object(t["g"])("I am b element"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"b"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),z=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/9.png",style:{width:"400px"}},null,-1),q=Object(t["h"])("h4",null,"IFC的应用场景",-1),H=Object(t["h"])("p",null,[Object(t["g"])("IFC针对行内元素，鉴于其高度由子元素完全撑开，并且内部元素的排列依赖"),Object(t["h"])("code",null,"text-align"),Object(t["g"])("/"),Object(t["h"])("code",null,"vertical-align"),Object(t["g"])("，因此，我们可以用IFC来实现：")],-1),G=Object(t["h"])("h5",null,"1. 元素的水平垂直居中",-1),J=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width:300px;height:200px;background: lightgray;"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width:50px; height:50px; background:palegreen;"'),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),U=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/12.png",style:{width:"200px"}},null,-1),$=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/13.png",style:{width:"200px"}},null,-1),W=Object(t["h"])("p",null,[Object(t["g"])("上面的示例中，绿色的块在灰色的块中沿左上边布局，想要让它居中，我们只需要将绿色块变成行内元素，灰色块就是IFC了，利用"),Object(t["h"])("code",null,"text-align"),Object(t["g"])("/"),Object(t["h"])("code",null,"vertical-align"),Object(t["g"])("即可")],-1),K=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width:300px; height:200px; background: lightgray; line-height:200px; vertical-align:middle; text-align:center;"'),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"width:50px; height:50px; background:palegreen;display:inline-block;"'),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1);function X(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E,A,D,M,N,F,R,V,B,L,z,q,H,G,J,U,$,W,K])}const Y={};Y.render=X;s["default"]=Y},"45b2":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>Webpack是一种前端资源构建工具，一个静态模块打包器，在webpack看来，前端的所有资源文件(<code>js</code>/<code>json</code>/<code>css</code>/<code>img</code>/<code>less</code>...)都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源。</p><h4>1. webpack五个核心概念</h4><ul><li><strong>Entry</strong>：指示<code>webpack</code>以哪个文件为入口起点开始打包，分析构建内部依赖图</li><li><strong>Output</strong>：指示<code>webpack</code>打包后的资源<code>bundles</code>输出到哪里，以及如何命名</li><li><strong>Loader</strong>：<code>webpack</code>只能理解<code>Javascript</code>和<code>Json</code>文件，这是<code>webpack</code>开箱可用的自带能力，<code>loader</code>让<code>webpack</code>能够去处理其他类型的文件，并将它们转换为有效模块，以供应用程序使用，以及被添加到依赖图中</li><li><strong>Plugins</strong>：可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。</li><li><strong>Mode</strong>：指定<code>webpack</code>使用相应模式的配置 <ul><li><strong>development</strong>：能让代码本地调试的开发环境</li><li><strong>production</strong>：能让代码优化上线运行的生产环境，生产环境比开发环境多一个压缩<code>js</code>代码</li></ul></li></ul><h4>2. webpack配置文件</h4>",4),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" { resolve } = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'path'"),Object(t["g"])(")\n\n"),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"entry"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'./src/index.js'"),Object(t["g"])(", \n    "),Object(t["h"])("span",{class:"hljs-attr"},"output"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"filename"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'build.js'"),Object(t["g"])(",\n        "),Object(t["h"])("span",{class:"hljs-attr"},"path"),Object(t["g"])(": resolve(__dirname, "),Object(t["h"])("span",{class:"hljs-string"},"'build'"),Object(t["g"])(")\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"module"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"rules"),Object(t["g"])(": [\n            {\n                "),Object(t["h"])("span",{class:"hljs-attr"},"test"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-regexp"},"/\\.css$/"),Object(t["g"])(",\n                "),Object(t["h"])("span",{class:"hljs-attr"},"use"),Object(t["g"])(": [\n                    "),Object(t["h"])("span",{class:"hljs-string"},"'style-loader'"),Object(t["g"])(",\n                    "),Object(t["h"])("span",{class:"hljs-string"},"'css-loader'"),Object(t["g"])("\n                ]\n            },\n            {\n                "),Object(t["h"])("span",{class:"hljs-attr"},"test"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-regexp"},"/\\.less$/"),Object(t["g"])(",\n                "),Object(t["h"])("span",{class:"hljs-attr"},"use"),Object(t["g"])(": [\n                    "),Object(t["h"])("span",{class:"hljs-string"},"'style-loader'"),Object(t["g"])(",\n                    "),Object(t["h"])("span",{class:"hljs-string"},"'css-loader'"),Object(t["g"])(",\n                    "),Object(t["h"])("span",{class:"hljs-string"},"'less-loader'"),Object(t["g"])("\n                ]\n            }\n        ]\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"plugins"),Object(t["g"])(": [],\n    "),Object(t["h"])("span",{class:"hljs-attr"},"module"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'development'"),Object(t["g"])("\n}\n")])],-1),a=Object(t["h"])("p",null,[Object(t["g"])("需要特别注意的是"),Object(t["h"])("code",null,"loader"),Object(t["g"])("的执行顺序，"),Object(t["h"])("code",null,"loader"),Object(t["g"])("的执行是从右到左，从下到上的，例如解析"),Object(t["h"])("code",null,"less"),Object(t["g"])("文件，要先"),Object(t["h"])("code",null,"less-loader"),Object(t["g"])("、"),Object(t["h"])("code",null,"css-loader"),Object(t["g"])("到"),Object(t["h"])("code",null,"style-loader")],-1);function j(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a])}const b={};b.render=j;s["default"]=b},"4ddc":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"文本预处理是要文本处理成计算机能识别的格式，是文本分类、文本可视化、文本分析等研究的重要步骤。具体流程包括文本分词、去除停用词、词干抽取(词形还原)、文本向量表征、特征选择等步骤，以消除脏数据对挖掘分析结果的影响。",-1),l=Object(t["h"])("p",null,"本文仅针对英文文本，中文文本暂时还没有研究过。介绍的全部都是基于Python2.7，利用NLTK库进行文本分类的过程。",-1),a=Object(t["h"])("h3",null,"文本分词",-1),j=Object(t["h"])("p",null,"文本分词即将文本拆解成词语单元，英文文本以英文单词空格连接成句，分词过程较为简单。以下介绍几种方法。",-1),b=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"正则表达式分词")],-1),h=Object(t["h"])("p",null,"以空格进行分词",-1),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> import re\n>>> text = 'I was just a kid, and loved it very much! What a fantastic song!'\n>>> print re.split(r' ',text)\n\n['I', 'was', 'just', 'a', 'kid,', 'and', 'loved', 'it', 'very', 'much!', 'What', 'a', 'fantastic', 'song!']\n")],-1),O=Object(t["h"])("p",null,"re匹配符号进行分词",-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> print re.split(r'\\W+', text)\n\n['I', 'was', 'just', 'a', 'kid', 'and', 'loved', 'it', 'very', 'much', 'What', 'a', 'fantastic', 'song', '']\n")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> print re.findall(r'\\w+|\\S\\w*', text)\n\n['I', 'was', 'just', 'a', 'kid', ',', 'and', 'loved', 'it', 'very', 'much', '!', 'What', 'a', 'fantastic', 'song', '!']\n")],-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> print re.findall(r\"\\w+(?:[-']\\w+)*|'|[-.(]+|\\S\\w*\", text)\n\n['I', 'was', 'just', 'a', 'kid', ',', 'and', 'loved', 'it', 'very', 'much', '!', 'What', 'a', 'fantastic', 'song', '!']\n")],-1),i=Object(t["h"])("p",null,"NLTK正则表达式分词器",-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> import re\n>>> import nltk\n>>> text = 'I was just a kid, and loved it very much! What a fantastic song!'\n>>> pattern = r\"\"\"(?x)                   # set flag to allow verbose regexps \n\t              (?:[A-Z]\\.)+           # abbreviations, e.g. U.S.A. \n\t              |\\d+(?:\\.\\d+)?%?       # numbers, incl. currency and percentages \n\t              |\\w+(?:[-']\\w+)*       # words w/ optional internal hyphens/apostrophe \n\t              |\\.\\.\\.                # ellipsis \n\t              |(?:[.,;\"'?():-_`])    # special characters with meanings \n\t            \"\"\" \n>>> print nltk.regexp_tokenize(text, pattern)\n\n['I', 'was', 'just', 'a', 'kid', ',', 'and', 'loved', 'it', 'very', 'much', 'What', 'a', 'fantastic', 'song']\n")],-1),u=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"最大匹配算法（MaxMatch）分词")],-1),m=Object(t["h"])("p",null,"MaxMatch算法在中文自然语言处理中常常用来进行分词（或许从名字上你已经能想到它是基于贪婪策略设计的一种算法），算法从右侧开始逐渐减少字符串长度，以此求得可能匹配到nltk字库中词语的最大长度的字符串。这种方法其实更常用于中文文本分词，但是不排除某些英文文本并不以空格作为分隔符，特此介绍一下",-1),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> import nltk\n>>> from nltk.corpus import words  \n>>> wordlist = set(words.words())   \n>>> def max_match(text):  \n    pos2 = len(text)  \n    result = ''  \n    while len(text) > 0:         \n        word = text[0:pos2]\n        if word in wordlist:  \n            result = result + text[0:pos2] + ' '  \n            text = text[pos2:]  \n            pos2 = len(text)  \n        else:  \n            pos2 = pos2-1                 \n    return result[0:-1]  \n>>> string = 'theyarebirds'  \n>>> print(max_match(string))\n\nthey are bird s\n")],-1),f=Object(t["h"])("h3",null,"停用词去除",-1),w=Object(t["h"])("p",null,"简单易懂，匹配词库中的停用词，去除！以消除冠词、连词等一些无意义无作用的词增加数据占用空间，并避免其为挖掘计算带来的干扰。",-1),k=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"NLTK停用词库")],-1),v=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> import nltk\n>>> from nltk.corpus import stopwords\n>>> stopworddic = set(stopwords.words('english'))  \n>>> text = ['I', 'was', 'just', 'a', 'kid',  'and', 'loved', 'it', 'very', 'much', 'What', 'a', 'fantastic', 'song']\n>>> text = [i for i in text if i not in stopworddic ]\n>>> print text\n　　\n['I', 'kid', 'loved', 'much', 'What', 'fantastic', 'song']\n")],-1),x=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"自定义词库")],-1),S=Object(t["h"])("p",null,"方法同上，自定义停用词，或者下载网络上的停用词库进行停用词去除",-1),P=Object(t["h"])("h3",null,"词干抽取",-1),_=Object(t["h"])("p",null,"将文本列表中的词语抽取其词干，以统一特征表征形式，特征降维以减少计算量。NLTK中提供了三种最常用的词干提取器接口，即 Porter stemmer, Lancaster Stemmer 和 Snowball Stemmer。抽取词的词干或词根形式（不一定能够表达完整语义）",-1),C=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> from nltk.stem.porter import PorterStemmer  \n>>> porter_stemmer = PorterStemmer()  \n\n>>> from nltk.stem.lancaster import LancasterStemmer  \n>>> lancaster_stemmer = LancasterStemmer()  \n\n>>> from nltk.stem import SnowballStemmer  \n>>> snowball_stemmer = SnowballStemmer(“english”)  \n\n>>> porter_stemmer.stem(‘maximum’)  \nu’maximum’  \n>>> lancaster_stemmer.stem(‘maximum’)  \n‘maxim’  \n>>> snowball_stemmer.stem(‘maximum’)  \nu’maximum’  \n\n>>> porter_stemmer.stem(‘presumably’)  \nu’presum’  \n>>> snowball_stemmer.stem(‘presumably’)  \nu’presum’  \n>>> lancaster_stemmer.stem(‘presumably’)  \n‘presum’  \n\n>>> porter_stemmer.stem(‘multiply’)  \nu’multipli’ \n>>> snowball_stemmer.stem(‘multiply’)  \nu’multipli’  \n>>> lancaster_stemmer.stem(‘multiply’)  \n‘multiply’ \n\n>>> porter_stemmer.stem(‘provision’)  \nu’provis’  \n>>> snowball_stemmer.stem(‘provision’)  \nu’provis’  \n>>> lancaster_stemmer.stem(‘provision’)  \nu’provid’  \n\n>>> porter_stemmer.stem(‘owed’)  \nu’owe’  \n>>> snowball_stemmer.stem(‘owed’)  \nu’owe’  \n>>> lancaster_stemmer.stem(‘owed’)  \n‘ow’   \n")],-1),T=Object(t["h"])("p",null,"各有优劣，看具体文本情况。对于分类、聚类这样对于特征词语的具体形态没有要求的情况下，进行词干抽取虽然抽取后的词干可能无实际意义但是却会大大减少计算时间，提高效率。",-1),I=Object(t["h"])("h3",null,"词形还原",-1),E=Object(t["h"])("p",null,"词形还原Lemmatization是把一个任何形式的语言词汇还原为一般形式（能表达完整语义）。相对而言，词干提取是简单的轻量级的词形归并方式，最后获得的结果为词干，并不一定具有实际意义。词形还原处理相对复杂，获得结果为词的原形，能够承载一定意义，与词干提取相比，更具有研究和应用价值。",-1),A=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},">>> from nltk.stem import WordNetLemmatizer  \n>>> wordnet_lemmatizer = WordNetLemmatizer()  \n>>> word = wordnet_lemmatizer.lemmatize('birds')  \n\nbird\n")],-1),D=Object(t["h"])("p",null,"nltk的lemmatization算法很鸡肋，基本可以理解为只有复数还原为单数形式，当然feet这样的非常态复数形式也可以实现，但是你要想形容词变名词，就不太怎么好使了，比如我在实验中geology，geography，geographic，geographical这几个词就无法还原成统一体。",-1),M=Object(t["h"])("h3",null,"文本向量表征以及TF-IDF权重表示",-1),N=Object(t["h"])("p",null,[Object(t["g"])("这一部分是基于Python的"),Object(t["h"])("a",{href:"http://radimrehurek.com/gensim/"},"Gensim"),Object(t["g"])("库将文本特征抽取为词袋，并将词袋表征为id,以特征id以及文档频率表征成文本向量。"),Object(t["h"])("a",{href:"http://baike.baidu.com/link?url=o8wTt7PnzFPnNWbP-sZ3Sn0kzpGVojCsbYQC3bx-86k5KQfVJo55Sxapb4l2ybnuozKf4KY2tSka5GLdrBooSa"},"TF-IDF"),Object(t["g"])("权重是很可靠的权重表征方式，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。TF-IDF加权的各种形式常被搜索引擎应用，作为文件与用户查询之间相关程度的度量或评级。")],-1),F=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},'#coding:utf-8\nfrom gensim import corpora, models, similarities\n\ndocuments = ["Shipment of gold damaged in a fire","Delivery of silver arrived in a silver truck","Shipment of gold arrived in a truck"]\n\n#分词#\ntexts = [[word for word in document.lower().split()] for document in documents]\nprint texts\n\n#抽取词袋，将token映射为id\ndictionary = corpora.Dictionary(texts)\nprint dictionary.token2id\n\n#由文档向量以及频率构成文档向量\ncorpus = [dictionary.doc2bow(text) for text in texts]\nprint corpus\n\n#计算tfidf权重,注意在gensim的tfidf算法中到文档频率的求解过程中对数之后+1了\ntfidf = models.TfidfModel(corpus)\ncorpus_tfidf = tfidf[corpus]\nfor doc in corpus_tfidf:\n\tprint doc\nprint tfidf.dfs\nprint tfidf.idfs\n')],-1),R=Object(t["h"])("p",null,"除此之外，最近导师推给我的一篇文章Word2vec也是文本向量表征的一种方式，考虑了上下文的语义联系，可以深入研究。",-1),V=Object(t["h"])("h3",null,"特征选择",-1),B=Object(t["h"])("p",null,"根据研究的需求进行特征的选择已达到特征降维，减小噪音的影响。常见的是根据词频（TF）、倒文档频率（IDF）、TFIDF权重等设定阈值进行筛选，无非是在TF/IDF/TFIDF权重计算结果的基础上设定阈值进行筛检。除此之外互信息、信息增益、X平方统计也是常见的方法。除此之外，如果你的研究是在给定类别名称的前提下进行语义文本分类，那么判断特征词与分类之间的语义相似度，从而进行筛选也是一种可行的方法。这里介绍的便是基于WordNet进行语义相似度的介绍。",-1),L=Object(t["h"])("p",null,"WordNet计算语义相似度常见的包括两种主要方法： path_similarity(sense1,sense2) # 词在词典层次结构中的最短路径 wup_similarity(sense1, sense2) # Wu-Palmer 提出的最短路径",-1),z=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"#coding:utf-8\nimport nltk\nfrom nltk.corpus import wordnet as wn\nfrom heapq import *  \nfrom itertools import product\n\nword1 = 'hen'\nword2 = 'chicken'\n\nsense1 = wn.synsets(word1)\nsense2 = wn.synsets(word2)\n\nsim_wup = max(word1.wup_similarity(word2) for (word1, word2) in product(sense1, sense2))\nprint sim_wup\n\nsim_path = max(word1.path_similarity(word2) for (word1, word2) in product(sense1, sense2))\nprint sim_path\n")],-1),q=Object(t["h"])("p",null,"运行结果",-1),H=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"0.962962962963\n0.5\n")],-1);function G(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E,A,D,M,N,F,R,V,B,L,z,q,H])}const J={};J.render=G;s["default"]=J},"4f6e":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>我们常用的标识字体大小的单位有<code>px</code>、<code>em</code>和<code>rem</code></p><h4>1. px</h4><p>px，像素，是相对于显示器屏幕分辨率而言，一旦设置了就没有办法因为适应页面大小而改变。可以适用于大多数对响应式没有太大需求的场景</p><h4>2. em</h4><p>em，相对长度单位，相对于当前对象内文本的字体尺寸，如当前对行内文本字体尺寸未被认为设置，相对于浏览器的默认字体尺寸（一般为16px）。比如我们在一个元素内设置<code>font-size: 16px; padding: 1em;</code>。那这个元素的<code>padding: 16px</code></p><ul><li>浏览器默认16px</li><li>有设置<code>em</code>的元素，如果自身不设置<code>font-size</code>，可以继承父元素的<code>font-size</code></li><li>设置<code>em</code>的元素，<code>padding</code>和<code>margin</code>也是要通过<code>em</code>来计算的</li></ul><h4>3. rem</h4><p>rem是<code>CSS3</code>新增的一个相对单位，和<code>em</code>的区别在于使用<code>rem</code>为元素设定字体大小的时候，仍然是相对大小，但相对的是<code>HTML跟元素</code>。可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。<code>flexible.js</code>是封装好的<code>rem</code>实现响应式布局的库，其实现响应式布局的基本原理是</p>",8),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"window, document"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" docEl = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".documentElement "),Object(t["h"])("span",{class:"hljs-comment"},"// root元素"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" dpr = "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".devicePixelRatio || "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// 获取设备的dpr，即当前设置下物理像素和虚拟像素的比值"),Object(t["g"])("\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 设置默认字体大小，默认字体大小继承自body，调整body标签的fontSize, fontSize = (12 * dpr) px"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"setBodyFontSize"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".body) {\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".body.style.fontSize = ("),Object(t["h"])("span",{class:"hljs-number"},"12"),Object(t["g"])(" * dpr) + "),Object(t["h"])("span",{class:"hljs-string"},"'px'"),Object(t["g"])("\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'DOMContentLoaded'"),Object(t["g"])(", setBodyFontSize)\n        }\n    }\n\n    setBodyFontSize()\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// set 1rem = viewWidth / 10"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 设置root元素的fontSize = (clientWidth / 10)px"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"setRemUnit"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" rem = docEl.clientWidth / "),Object(t["h"])("span",{class:"hljs-number"},"10"),Object(t["g"])("\n        docEl.style.fontSize = rem + "),Object(t["h"])("span",{class:"hljs-string"},"'px'"),Object(t["g"])("\n    }\n\n    setRemUnit()\n\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'resize'"),Object(t["g"])(", setRemUnit)\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'pageShow'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (e.persisted) setRemUnit()\n    })\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 解决1px在高清屏多像素问题，支持0.5像素"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dpr >= "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" fakeBody = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createElement("),Object(t["h"])("span",{class:"hljs-string"},"'body'"),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" testEl = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createElement("),Object(t["h"])("span",{class:"hljs-string"},"'div'"),Object(t["g"])(")\n        testEl.style.border = "),Object(t["h"])("span",{class:"hljs-string"},"'.5px solid transparent'"),Object(t["g"])("\n        fakeBody.appendChild(testEl)\n        docEl.appendChild(fakeBody)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (testEl.offsetHeight == "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") {\n            docEl.classList.add("),Object(t["h"])("span",{class:"hljs-string"},"'hairLines'"),Object(t["g"])(")\n        }\n        docEl.removeChild(fakeBody)\n    }\n\n}("),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])("))\n")])],-1),a=Object(t["h"])("h4",null,"4. 响应式布局",-1),j=Object(t["h"])("p",null,"响应式布局的方式包含：",-1),b=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"media媒体查询"),Object(t["h"])("li",null,"vw/vh"),Object(t["h"])("li",null,"百分比"),Object(t["h"])("li",null,"rem和em")],-1);function h(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b])}const o={};o.render=h;s["default"]=o},"51b5":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"异步，简单来说就是一个任务不是连续完成的，可以理解成该任务被人分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回头执行第二段。接下来，我们就逐步介绍异步编程的几种方式。",-1),l=Object(t["h"])("h3",null,"1. 回调函数",-1),a=Object(t["h"])("p",null,"把任务的第二段单独放在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数，例如读取文件进行处理时，第三个参数就是一个回调函数，读取文件之后才会执行回调函数",-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("fs.readFile("),Object(t["h"])("span",{class:"hljs-string"},"'/etc/passwd'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'utf-8'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"err, data"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (err) "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(" err\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(data)\n})\n")])],-1),b=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"优点"),Object(t["g"])("是简单、容易实现、容易理解。"),Object(t["h"])("strong",null,"缺点"),Object(t["g"])("是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱，流程难以追踪，特别是容易出现多个回调函数嵌套的情况，而且每个任务只能指定一个回调函数，此外，也不可以使用"),Object(t["h"])("code",null,"try catch"),Object(t["g"])("捕获错误，不能直接"),Object(t["h"])("code",null,"return")],-1),h=Object(t["h"])("h3",null,"2. 事件监听",-1),o=Object(t["h"])("p",null,"设置事件触发和监听，在事件触发之后执行某段逻辑，只有在事件执行之后才会执行，而与代码的编写顺序无关。",-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'div'"),Object(t["g"])(").addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'我被点击了‘)\n}, false)\n")])],-1),r=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"优点"),Object(t["g"])("是比较容易理解，可以绑定多个事件，每个事件都可以指定多个回调函数，而且可以“去耦合”，有利于实现模块化。"),Object(t["h"])("strong",null,"缺点"),Object(t["g"])("是整个程序都要变成事件驱动，运行流程会变得不清晰，阅读代码的时候，很难看出主流程")],-1),g=Object(t["h"])("h3",null,"3. 发布/订阅",-1),p=Object(t["h"])("p",null,[Object(t["g"])("发布-订阅者模式，我们在之前的"),Object(t["h"])("a",{href:"https://zhangmingemma.github.io/#/post?file=2022-10-27-Observer%20Watcher",target:"_blank"},"《JS深入系列之发布-订阅者模式》"),Object(t["g"])("中有介绍，但是"),Object(t["h"])("strong",null,"优点"),Object(t["g"])("是可以在事件中心中看到每个信号的订阅者和观察者，从而监控程序的运行。但事件中心的缺点在这里也同样存在。")],-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("Bus.$on("),Object(t["h"])("span",{class:"hljs-string"},"'eventName'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".eventHandler)\nBus.$emit("),Object(t["h"])("span",{class:"hljs-string"},"'eventName'"),Object(t["g"])(", value)\n")])],-1),d=Object(t["h"])("h3",null,"4. Promise",-1),u=Object(t["h"])("p",null,[Object(t["g"])("Promise的用法，我们在之前的"),Object(t["h"])("a",{href:"https://zhangmingemma.github.io/#/post?file=2022-10-20-Promise",target:"_blank"},"《JS深入系列之手写Promise》"),Object(t["g"])("文章中有讲到")],-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("ajax(url).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(res)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" ajax(url1)\n}).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(res)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" ajax(url2)\n}).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(res)\n})\n")])],-1),y=Object(t["f"])('<p><strong>优点</strong>是Promise能够实现异步变成，也能够捕获错误，也很好的解决了回调地狱的问题，但是<strong>缺点</strong>是无法取消Promise，错误需要通过回调函数来捕获</p><h3>5. Generator</h3><p>Generator函数是一个状态机，封装了多个内部状态，也是一个遍历器对象生成函数，其中<code>yield</code>可以暂停，<code>next</code>方法可以启动，每次返回的是<code>yield</code>后的表达结果。具体我们在之前的<a href="https://zhangmingemma.github.io/#/post?file=2022-10-21-Generator" target="_blank">《JS深入系列之手写Promise》</a>文章中有讲到。</p>',3),f=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(" *"),Object(t["h"])("span",{class:"hljs-title"},"fetch"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(" ajax(url, () => {})\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(" ajax(url1, () => {})\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(" ajax(url2, () => {})\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" it = fetch()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" res1 = it.next()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" res2 = it.next()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" res3 = it.next()\n")])],-1),w=Object(t["f"])("<p><strong>co模块</strong>就是典型的用<code>Generator</code>和<code>Promise</code>封装的用于异步操作的方法，<strong>co模块</strong>的源码是：</p><ul><li>会先检查<code>gen</code>是否为函数，是的话就执行，得到一个内部指针对象，如果不是的话就返回，将<code>Promise</code>对象的状态改为<code>resolved</code></li><li>将<code>Generator</code>函数的内部指针对象的<code>next</code>方法封装成<code>onFulfilled</code>，方便捕捉抛出的错误</li></ul>",2),k=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"co"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"gen"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ctx = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" gen == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n            gen = gen.call(ctx)\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!gen) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" resolve(gen)\n        }\n\n        onFulfilled()\n        "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"onFulfilled"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" ret\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                ret = gen.next(res)\n            } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" reject(e)\n            }\n            next(ret)\n        }\n\n        "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"next"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"ret"),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (ret.done) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" resolve(ret.value)\n            }\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 确保每一步的返回值，都是Promise对象"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" value = toPromise.call(ctx, ret.value)\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 使用then方法，为返回值加上回调函数，然后通过onFulfilled再次调用next函数"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (value && isPromise(value)) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" value.then(onFulfilled, onRejected)\n            }\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 在参数不符合条件的前提下，抛出错误"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"TypeError"),Object(t["g"])("())\n        }\n    })\n}\n")])],-1),v=Object(t["f"])("<h3>6. async + await</h3><p>我们使用<code>async</code>和<code>await</code>可以做到使用<code>Generator</code>和<code>co</code>函数所做的工作：</p><ul><li>是基于<code>Promise</code>实现的，不能用于普通的回调函数</li><li>与<code>Promise</code>一样是非阻塞的</li><li>使得异步代码看起来像是同步的</li></ul>",3),x=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"async"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"readResult"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"params"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(" read(params, "),Object(t["h"])("span",{class:"hljs-string"},"'utf8'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p2 = "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(" read(p1, "),Object(t["h"])("span",{class:"hljs-string"},"'utf8'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p3 = "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(" read(p2, "),Object(t["h"])("span",{class:"hljs-string"},"'utf8'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" p3\n}\n")])],-1),S=Object(t["h"])("p",null,[Object(t["g"])("这个方案可以说是异步编程的终极解决方案了，相比于"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("，它的优势是：")],-1),P=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("处理"),Object(t["h"])("code",null,"then"),Object(t["g"])("的调用链，能够更清晰地写出代码")]),Object(t["h"])("li",null,"也能够优雅地解决回调地狱的问题")],-1);function _(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P])}const C={};C.render=_;s["default"]=C},5765:function(e,s,c){"use strict";c("b601")},5789:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("h3",null,"原型与原型链",-1),l=Object(t["h"])("p",null,"我们先来看一个例子",-1),a=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Person"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{}\nPerson.prototype.name = "),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" person = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Person()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.name)                            "),Object(t["h"])("span",{class:"hljs-comment"},"// Kevin"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.__proto__ == Person.prototype)   "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.__proto__.constructor == Person) "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),j=Object(t["f"])('<p>从这个例子中，我们可以看到函数具备一个<code>prototype</code>的属性，实际上，每个函数都有一个<code>prototype</code>的属性，且只有函数才会有<code>prototype</code>的属性。函数的<code>prototype</code>指向的是一个对象，这个对象就是调用函数创建的实例对象的原型<code>obj.__proto__</code>。对于<code>__proto__</code>来讲是，每个JS对象（<code>null</code>除外）都有一个与之关联的对象，这个对象就是原型，也就是<code>__proto__</code>属性指向的，每个对象都会从原型“继承”属性，实力原型<code>constructor</code>指向构造函数</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-23/1.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>当读取实例的属性时，在实例中找不到，就会去实例的原型中去寻找，如果还查不到就会去原型的原型，逐层向上，直至顶层。原型对象本质上也是一个对象，最原始是通过<code>Object</code>构造函数创建的，所以顶层的原型就是<code>Object.prototype</code>，而<code>Object.prototype.__proto__</code>的值就是<code>null</code>了，也就是<code>Object.prototype</code>是没有原型的，下面就是具体的关系图，蓝色的线就是原型链</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-23/2.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h3>继承</h3><p>继承就是一种拥有其他方法的一些属性和能力，来达到属性和方法的</p><h4>1. 原型链继承</h4><p>核心原理是将父类实例作为子类的原型，优点是可以实现方法的复用，由于方法定义在父类的原型上，复用了父类构造函数的方法。</p>',8),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Parent"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name"),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".arr = ["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]\n}\nParent.prototype.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])(")\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Child"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"like"),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".like = like\n}\nChild.prototype = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Parent()\nChild.prototype.constructor = Child\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy2 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.say(), boy2.say(), boy1.say() == boy2.say()) "),Object(t["h"])("span",{class:"hljs-comment"},"// hello hello true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.name, boy2.name, boy1.name == boy2.name) "),Object(t["h"])("span",{class:"hljs-comment"},"// undefined undefined true"),Object(t["g"])("\nboy1.arr.push("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(") \n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.arr, boy2.arr) "),Object(t["h"])("span",{class:"hljs-comment"},"// [1,2] [1,2]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.constructor) "),Object(t["h"])("span",{class:"hljs-comment"},"// function"),Object(t["g"])("\n")])],-1),h=Object(t["h"])("p",null,"这种继承方式的缺点是：",-1),o=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"创建子类实例的时候，不能传父类的参数"),Object(t["h"])("li",null,"子类实例共享了父类构造函数的引用属性"),Object(t["h"])("li",null,"无法实现多继承")],-1),O=Object(t["h"])("h4",null,"2. 借用构造函数",-1),r=Object(t["h"])("p",null,"核心思想是借用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类",-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Parent"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name"),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".arr = ["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]\n}\nParent.prototype.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])("\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Child"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, like"),Object(t["g"])(") ")]),Object(t["g"])("{\n  Parent.call("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(", name)\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".like = like\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child("),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy2 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child("),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.say(), boy2.say(), boy1.say() == boy2.say()) "),Object(t["h"])("span",{class:"hljs-comment"},"// say is not a function"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.name, boy2.name, boy1.name == boy2.name) "),Object(t["h"])("span",{class:"hljs-comment"},"// Kevin Gemma false"),Object(t["g"])("\nboy1.arr.push("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.arr, boy2.arr) "),Object(t["h"])("span",{class:"hljs-comment"},"// [1,2] [1]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.constructor) "),Object(t["h"])("span",{class:"hljs-comment"},"// function"),Object(t["g"])("\n")])],-1),p=Object(t["f"])("<p>这种继承方式的优点是：</p><ul><li>实例之间可以独立</li><li>创建子类实例的时候，可以向父类构造函数传参</li><li>子类实例不共享父类构造函数的引用属性，如arr</li><li>可实现多继承</li></ul><p>缺点是：</p><ul><li>父类的方法不能复用</li><li>子类实例，继承不了父类原型上的属性</li></ul><h4>3. 组合继承</h4><p>核心是通过调用父类的构造函数，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现原型属性的继承和方法的复用</p>",6),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Parent"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name"),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".arr = ["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]\n}\nParent.prototype.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])("\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Child"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, like"),Object(t["g"])(") ")]),Object(t["g"])("{\n  Parent.call("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(", name)\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".like = like\n}\nChild.prototype = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Parent()\nChild.prototype.constructor = Child\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child("),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy2 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child("),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.say(), boy2.say(), boy1.say() == boy2.say()) "),Object(t["h"])("span",{class:"hljs-comment"},"// hello hello true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.name, boy2.name, boy1.name == boy2.name) "),Object(t["h"])("span",{class:"hljs-comment"},"// Kevin Gemma false"),Object(t["g"])("\nboy1.arr.push("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.arr, boy2.arr) "),Object(t["h"])("span",{class:"hljs-comment"},"// [1,2] [1]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.constructor) "),Object(t["h"])("span",{class:"hljs-comment"},"// function Child"),Object(t["g"])("\n")])],-1),d=Object(t["f"])("<p>这种继承方式的优点是：</p><ul><li>保留构造函数的优点：创建子类实例，可以向父类构造函数传参</li><li>保留原型链的优点：可继承父类原型对象的方法，也可以实现方法复用</li><li>不共享父类的引用属性，比如arr属性</li></ul><p>这种继承方法的缺点是：</p><ul><li>由于2次调用了父类的构造方法，会存在一份多余的父类实例属性</li></ul><h4>4. 组合继承优化</h4><p>能够完美的实现：</p><ul><li>只调用一次父类的构造函数</li><li>可以保留构造函数的优点：创建子类实例，可以向父类构造函数传参</li><li>可以保留原型链的有点：可以继承父类原型对象的方法，也可以实现方法复用</li><li>但不会共享父类上的引用属性，能够实现不同实例的属性隔离</li></ul>",7),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Parent"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name"),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".arr = ["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]\n}\nParent.prototype.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])("\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Child"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, like"),Object(t["g"])(") ")]),Object(t["g"])("{\n  Parent.call("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(", name)\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".like = like\n}\nChild.prototype = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".create(Parent.prototype)\nChild.prototype.constructor = Child\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child("),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" boy2 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Child("),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.say(), boy2.say(), boy1.say() == boy2.say()) "),Object(t["h"])("span",{class:"hljs-comment"},"// hello hello true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.name, boy2.name, boy1.name == boy2.name) "),Object(t["h"])("span",{class:"hljs-comment"},"// Kevin Gemma false"),Object(t["g"])("\nboy1.arr.push("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.arr, boy2.arr) "),Object(t["h"])("span",{class:"hljs-comment"},"// [1,2] [1]"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(boy1.constructor) "),Object(t["h"])("span",{class:"hljs-comment"},"// function Child"),Object(t["g"])("\n")])],-1);function m(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u])}const y={};y.render=m;s["default"]=y},"597d":function(e,s,c){"use strict";var t=c("1da1"),n=c("5530"),l=c("d4ec"),a=c("bee2"),j=(c("96cf"),c("fb6a"),c("4de4"),c("4e82"),c("498a"),c("d3b7"),c("ddb0"),c("3ca3"),c("d81d"),c("7db0"),c("b0c0"),c("a1e9")),b=c("5c40"),h=c("b81d"),o=c("a7bb"),O=function(){function e(){Object(l["a"])(this,e),this.TotalPost=[]}return Object(a["a"])(e,[{key:"listCompiler",value:function(){var e=this,s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},c=s.tags,t=void 0===c?[]:c,l=s.banPagination,a=void 0!==l&&l,h=Object(j["k"])(0),O=Object(j["j"])({postList:[]}),r=function(){var s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},c=s.tags,t=void 0===c?[]:c,n=s.startIndex,l=void 0===n?0:n,a=s.endIndex,j=void 0===a?0:a,b=e.filterPost({list:e.TotalPost.slice(),tags:t});h.value=b.length,O.postList=e.filterPost({list:b,startIndex:l,endIndex:j})},g=this.getAllPostContent(),p=g.res;return Object(b["P"])((function(){if(p.value){var s=p.value.slice().filter((function(e){return e.date&&e.title}));e.TotalPost=e.sortPost(s),r(a?{tags:t}:{tags:t,endIndex:o["b"].PageSie})}})),Object(n["a"])({total:h,reloadList:r},Object(j["r"])(O))}},{key:"filterPost",value:function(e){var s=e.list,c=e.tags,t=void 0===c?[]:c,n=e.startIndex,l=void 0===n?0:n,a=e.endIndex,j=void 0===a?0:a,b=j||s.length,h=s.slice();return t&&t.length&&(h=s.filter((function(e){return(null===e||void 0===e?void 0:e.tags)&&Object(o["d"])(e.tags,t).length}))),h.slice(l,b)}},{key:"sortPost",value:function(e){var s=e.slice();return s.sort((function(e,s){var c,t,n=((null===(c=e.date)||void 0===c?void 0:c.replaceAll("-",""))||"").trim(),l=((null===(t=s.date)||void 0===t?void 0:t.replaceAll("-",""))||"").trim();return parseInt(l)-parseInt(n)})),s}},{key:"getAllPostPath",value:function(){var e=c("83f3");return e.keys()}},{key:"getAllPostContent",value:function(){var e=this;if(this.TotalPost.length){var s=Object(j["k"])([]);return s.value=this.TotalPost,{res:s}}var c=this.getAllPostPath();return Object(o["e"])(Promise.all(c.map(function(){var s=Object(t["a"])(regeneratorRuntime.mark((function s(c){var t,n;return regeneratorRuntime.wrap((function(s){while(1)switch(s.prev=s.next){case 0:return t=h["a"].getPostName(c),s.next=3,h["a"].getPostInfo(t);case 3:return n=s.sent,e.TotalPost.find((function(e){return e.name==t}))||e.TotalPost.push(n),s.abrupt("return",n);case 6:case"end":return s.stop()}}),s)})));return function(e){return s.apply(this,arguments)}}())))}},{key:"getAllPostTag",value:function(){var e=[];return this.TotalPost.map((function(s){var c;null===s||void 0===s||null===(c=s.tags)||void 0===c||c.map((function(s){e.indexOf(s)<0&&e.push(s)}))})),e}}]),e}();s["a"]=new O},"5f51":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>Vue会根据Vue模板生成<code>VDOM</code>结构，然后用原生的DOM方法依次创建VDOM结构中的每一个节点，然后将它们挂载成一棵DOM子树，并插入页面，就可以得到真正的HTML。这个过程中同时也要在这个生成真实DOM的过程中，Vue还注入了响应式系统，可以根据数据变化自动更新视图，以及根据视图自动更新数据。响应式系统的核心理念就是<code>Object.defineProperty</code>+<code>发布-订阅者</code>模式。</p><h3>一. Vue实例初始化</h3><p>Vue实例初始化的过程中主要包含以下几点：</p><ul><li>初始化<code>$options</code>，这一步就是把组件配置<code>options</code>直接保存为实例的<code>$options</code>属性，以供后面的各种初始化使用</li><li>调用<code>initProxy</code>方法初始化<code>proxy</code>代理。如果浏览器支持proxy，Vue会为当前实例生成一个代理对象，以它作为render函数的调用者，以提高性能，如果不支持，则该代理就是当前实例自身。</li><li>调用<code>initLifecycle</code>初始化组件生命周期。这里主要是初始化一些与生命周期相关的实例属性，如<code>$children</code>、<code>_watcher</code>、<code>_isMounted</code>等</li><li>调用<code>initEvents</code>初始化组件化事件属性，主要是定义<code>_events</code>属性，该属性后面将用于存储与当前组件相关的事件监听，挂载阶段才会为其赋值</li><li>调用<code>initRender</code>初始化与渲染相关的实例属性和方法。包括初始化<code>_vnode</code>、<code>$slots</code>、<code>-c</code>、<code>$attrs</code>和<code>$listeners</code>等 <ul><li><code>_vnode</code>将在挂载阶段保存当前组件对应的虚拟节点</li><li><code>$slots</code>用于保存插槽内容</li><li><code>_c</code>用于渲染真实DOM的方法，在浏览器环境下，它主要基于<code>document.createElement</code>实现</li><li><code>$attrs</code>和<code>$listeners</code>用于保存来自父组件的属性和监听函数注入</li></ul></li><li>beforeCreate生命周期钩子函数被调用</li><li>调用<code>initInjections</code>初始化注入</li><li>调用<code>initState</code>初始化组件状态，这里分别调用了<code>initProps</code>、<code>initMethods</code>、<code>initData</code>、<code>initComputed</code>和<code>initWatch</code>来初始化配置的<code>props</code>、<code>methods</code>、<code>data</code>、<code>computed</code>和<code>watch</code>。这一步骤中会构建响应系统，为<code>data</code>生成一个<code>Observer</code>观察者对象，这样就能够对变量的变化进行观测。</li><li>调用<code>initProvide</code>初始化<code>provide</code></li><li>初始化完毕，调用<code>created</code>钩子函数</li></ul><h3>二. Observer</h3><p>在<code>initData</code>这一部分就会实现响应式，主要做两件事情，一是将data上面的数据代理到<code>vm</code>上，二是将通过执行<code>observer</code>将所有data绑定<code>defineProperty</code>，定义的每个属性进行<code>getter/setter</code>操作。</p>",6),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Observer"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(": any;\n    dep: Dep;\n    vmCount: number;\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(value: any) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".value = value\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".dep = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Dep()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".vmCount = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// observe的时候会先检测是否已经有__ob__对象存放Observer实例，防止重复绑定"),Object(t["g"])("\n        def(value, "),Object(t["h"])("span",{class:"hljs-string"},"'__ob__'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".isArray(value)) {\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果是数组，先重写数组的变异方法如push/shift/pop/unshift/splice，达到监听数组数据变化响应的效果。"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" argument = hasProto ? protoAugment : copyAugment\n            augment(value, arrayMethods, arrayKeys)\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果是数组则需要遍历数组的每一个成员进行observe"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".observeArray(value)\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".walk(value)\n        },\n        walk(obj: "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(") {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" keys = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".keys(obj)\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<keys.length; i++) {\n                defineReactive(obj, keys[i], obj[keys[i]])\n            }\n        }\n    }\n}\n")])],-1),a=Object(t["h"])("p",null,[Object(t["g"])("其中"),Object(t["h"])("code",null,"defineReactive"),Object(t["g"])("就是核心的"),Object(t["h"])("code",null,"Object.defineProperty"),Object(t["g"])("部分")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"defineReactive"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-params"},"\n    obj: Object,\n    key: string,\n    val: any,\n    customSetter?: Function\n"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" dep = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Dep() "),Object(t["h"])("span",{class:"hljs-comment"},"// 依赖收集"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" property = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".getOwnPropertyDescriptor(obj, key)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (property && property.configurable === "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])("\n    }\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果之前该对象已经预设了getter以及setter函数则将其取出来，新定义的getter/setter中会将其执行，保证不会覆盖之前已经定义的getter/setter"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" getter = property && property.get\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" setter = property && property.set\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" childOb = observer(val)\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".defineProperty(obj, key, {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"enumerable"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(",\n        "),Object(t["h"])("span",{class:"hljs-attr"},"configurable"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(",\n        "),Object(t["h"])("span",{class:"hljs-attr"},"get"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"reactiveGetter"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果原有对象拥有getter方法则执行"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" value = getter ? getter.call(obj) : val\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (Dep.target) {\n                dep.depend()\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (childOb) {\n                    "),Object(t["h"])("span",{class:"hljs-comment"},"// 子对象进行依赖收集，其实就是将同一个watcher观察者实例放进了两个depend中，一个是正在本身闭包中的depend，另一个是子元素的depend"),Object(t["g"])("\n                    childOb.dep.depend()\n                }\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".isArray(value)) {\n                    "),Object(t["h"])("span",{class:"hljs-comment"},"// 是数组则需要对每一个成员都进行依赖收集，如果数组的成员还是数组，则递归"),Object(t["g"])("\n                    dependArray(value)\n                }\n            }\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" value\n        },\n        "),Object(t["h"])("span",{class:"hljs-attr"},"set"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"reactiveSetter"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"newVal"),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 通过getter方法获取当前值，与新值进行比较，不一致执行"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" value = getter ? getter.call(obj) : val\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (newVal == value || (newVal !== newVal && value !== value)) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" \n            }\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (setter) {\n                "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果原本对象拥有setter方法则执行setter"),Object(t["g"])("\n                setter.call(obj, newVal)\n            } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                val = newVal\n            }\n            childOb = observer(newVal)\n            dep.notify()\n        }\n    })\n  \n}\n")])],-1),b=Object(t["f"])('<p>其中<code>getter</code>方法：</p><ul><li>先为每个data声明一个<code>Dep</code>实例对象，被用于<code>getter</code>时执行<code>dep.depend()</code>进行收集相关的依赖</li><li>根据<code>Dep.target</code>来判断是否收集依赖，还是普通取值</li></ul><p>其中<code>setter</code>方法：</p><ul><li>获取新的值并进行<code>observer</code>，保证数据响应式</li><li>通过<code>dep</code>对象通知所有观察者去更新数据，从而达到响应式效果</li></ul><img style="width:600px;" class="center" src="https://zhangmingemma.github.io/dist/images/2022-11-13/1.png"><h3>三. Watcher</h3><p>Watcher是一个观察者对象。依赖收集以后Watcher对象会被保存在Dep的subs中，数据变动的时候Dep会通知Watcher实例，然后由Watcher实例回调cb进行视图的更新。</p>',7),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Watcher"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])(" (\n        vm: Component,\n        expOrFn: string | Function,\n        cb: Function,\n        options?: Object\n    ) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".vm = vm\n        vm._watchers.push("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n        run() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".active) {\n                "),Object(t["h"])("span",{class:"hljs-comment"},"// get操作在获取在获取value本身会执行getter从而调用update更新视图"),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" value = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".get()\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (\n                    value != "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".value ||\n                    isObject(value) ||\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".deep\n                ) {\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" oldValue = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".value\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".value = value\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".user) {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".cb.call("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".vm, value, oldValue)\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                            handleError(e, "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".vm, "),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])('`callback for watcher "'),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".expression}")]),Object(t["g"])('"`')]),Object(t["g"])(")\n                        }\n                    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".cb.call("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".vm, value, oldValue)\n                    }\n                }\n            }\n        }\n    }\n}\n")])],-1),o=Object(t["h"])("h3",null,"四. Dep",-1),O=Object(t["h"])("p",null,"被Observer的data在触发 getter 时，Dep 就会收集依赖的 Watcher ，其实 Dep 就像刚才说的是一个书店，可以接受多个订阅者的订阅，当有新书时即在data变动时，就会通过 Dep 给 Watcher 发通知进行更新。",-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Dep"),Object(t["g"])()]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" target: ?Watcher;\n  id: number;\n  subs: "),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])("<Watcher>;\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])(" () {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".id = uid++\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".subs = []\n  }\n  "),Object(t["h"])("span",{class:"hljs-comment"},"/*添加一个观察者对象*/"),Object(t["g"])("\n  addSub (sub: Watcher) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".subs.push(sub)\n  }\n  "),Object(t["h"])("span",{class:"hljs-comment"},"/*移除一个观察者对象*/"),Object(t["g"])("\n  removeSub (sub: Watcher) {\n    remove("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".subs, sub)\n  }\n  "),Object(t["h"])("span",{class:"hljs-comment"},"/*依赖收集，当存在Dep.target的时候添加观察者对象*/"),Object(t["g"])("\n  depend () {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (Dep.target) {\n      Dep.target.addDep("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(")\n    }\n  }\n  "),Object(t["h"])("span",{class:"hljs-comment"},"/*通知所有订阅者*/"),Object(t["g"])("\n  notify () {\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// stabilize the subscriber list first"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" subs = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".subs.slice()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n")])],-1),g=Object(t["f"])('<h3>总结</h3><p>Vue 中初始化渲染时，视图上绑定的数据就会实例化一个 <code>Watcher</code>，依赖收集就是是通过属性的 <code>getter</code> 函数完成的，文章一开始讲到的 <code>Observer</code> 、<code>Watcher</code> 、<code>Dep</code> 都与依赖收集相关。其中 <code>Observer</code> 与 <code>Dep</code>是一对一的关系， <code>Dep</code> 与 <code>Watcher</code> 是多对多的关系，<code>Dep</code> 则是 <code>Observer</code> 和 <code>Watcher</code> 之间的纽带。依赖收集完成后，当属性变化会执行被 <code>Observer</code> 对象的 <code>dep.notify()</code> 方法，这个方法会遍历订阅者（<code>Watcher</code>）列表向其发送消息，<code>Watcher</code> 会执行 <code>run</code> 方法去更新视图，我们再来看一张图总结一下：</p><img style="width:600px;" class="center" src="https://zhangmingemma.github.io/dist/images/2022-11-13/2.png"><ul><li>在 Vue 中模板编译过程中的指令或者数据绑定都会实例化一个 <code>Watcher</code> 实例，实例化过程中会触发 <code>get()</code> 将自身指向 <code>Dep.target</code>;</li><li><code>data</code>在 <code>Observer</code> 时执行 <code>getter</code> 会触发 <code>dep.depend()</code> 进行依赖收集;依赖收集的结果： 1. <code>data</code>在 <code>Observer</code> 时闭包的<code>dep</code>实例的<code>subs</code>添加观察它的 <code>Watcher</code> 实例；2. <code>Watcher</code> 的<code>deps</code>中添加观察对象 <code>Observer</code>时的闭包<code>dep</code>；</li><li>当<code>data</code>中被 <code>Observer</code> 的某个对象值变化后，触发<code>subs</code>中观察它的<code>watcher</code>执行 <code>update()</code> 方法，最后实际上是调用<code>watcher</code>的回调函数<code>cb</code>，进而更新视图</li></ul><h3>五. 数组和对象的监听</h3><p>Vue官方文档中<a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B">列表渲染</a>中描述了Vue在数据监听中的特殊之处</p><h4>1. Vue不能检测对象属性的添加或删除</h4><blockquote><p>由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：</p><p>对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用</p><ul><li>Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。例如：Vue.set(vm.userProfile, &#39;age&#39;, 27)</li><li>使用 Object.assign 方法，直接赋值的原理监听。例如：this.watchObj = Object.assign({}, this.watchObj, {name: &#39;xiaoyue&#39;,age: 15});</li></ul></blockquote><p>原因是由于Vue在初始化实例时就对属性执行了setter/getter转化过程，所以属性必须开始就在对象上，这样才能让Vue转化监听，后期添加的属性无法进行变化监测。</p><h4>2. 数组变化监听的特殊之处</h4><p>我们知道Vue能够监听<strong>整个对数组进行赋值更新</strong>，<strong>对数组使用变异方法进行更新</strong>，并可以响应到视图跟新中，Vue的官方文档中有这样的一段描述：</p><blockquote><p>Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法有push()、pop()、shift()、unshift()、splice()、sort()、reverse()</p><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ol><li>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li></ol></blockquote><p>举个例子：</p>',13),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"var vm = new Vue({\n  el: '#demo',\n  data: {\n      nameArray:['Foo' ,'Bar']\n  },\n  computed: {\n    fullName: function () {\n      return this.nameArray[0] + ' ' + this.nameArray[1]\n    }\n  },\n  methods: {\n    change () {\n        this.nameArray[0] = '123'; //fullName不会发生改变\n        this.nameArray = ['123','Bar']; //fullName发生改变\n        this.nameArray.splice(0, 1, '123'); //fullName发生改变\n        this.$set(this.nameArray, 0, '123'); //fullName发生改变\n    }\n  }\n})\n")],-1),i=Object(t["h"])("p",null,[Object(t["g"])("其实很简单的可以理解为什么Vue无法监听数组中新增的属性，因为在Vue实例创建的时候，数组中的每个元素就被添加到了Observer的列表中，监测器变化，支持视图响应，新增的属性无法添加到Observer的列表中，因此没有办法响应到视图，对此Vue设置了变异方法对新增元素的push,unshift,splice三种方法做了特异处理，这一部分的源码在"),Object(t["h"])("a",{href:"https://github.com/vuejs/vue/blob/dev/src/core/observer/array.js"},"vue/observer/array.js"),Object(t["g"])("：")],-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"['push','pop','shift','unshift','splice','sort','reverse'].forEach(function (method) {\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) { //针对添加新元素的变异方法做了特殊的处理，使得Vue能够监听到通过变异方法添加的元素的变化\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted) //对新增的数据元素进行Observer\n    ob.dep.notify()\n    return result\n  })\n})\n")],-1),u=Object(t["f"])('<p><strong>但是Object.defineProperty是可以通过索引属性来设置属性的访问器属性的，为什么监听不到呢？？</strong></p><p>其实并不是说JS不能支持响应式数组，并没有这种限制，而是一般的开发者使用数组与使用对象的方法有区别，数组在JS中常被用作栈、队列、集合等数据结构的实现方式，会存储批量的数据以待遍历，并且编译器对数组和对象的优化也有所不同，所以数组的处理需要异化来提高性能。</p><p><strong>首先，针对索引这一点</strong>Vue 中是通过对 每个键设置 getter/setter 来实现响应式的，开发者使用数组，目的往往是遍历，此时调用 getter 开销太大了，所以 Vue 不在数组每个键上设置，而是在数组上定义<code>__ob__</code> ，并且替换了 push 等等能够影响原数组的原型方法.</p><p><strong>其次，针对length这一点</strong>我们观察Vue的源码，它针对数组做了特殊的变化监测策略：用 Object.keys() 或者 Object.getOwnPropertyNames() 就能获得所有键的名字，前者是所有自有可枚举的，后者是所有自有的，不需要用 length。</p><p>从源码可以看到，Vue跳过了对数组每个键设置响应的过程，而是直接对值进行递归设置响应式,这一部分的源码在<a href="https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js">vue/observer/index.js</a>：</p>',5),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"export class Observer {\n  ...\n  constructor (value: any) {\n    ...\n    if (Array.isArray(value)) {\n      const augment = hasProto\n        ? protoAugment\n        : copyAugment\n      augment(value, arrayMethods, arrayKeys)\n      this.observeArray(value)\n    } else {\n      this.walk(value) //监听对象元素的变化\n    }\n  }\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])//对值进行递归响应式\n    }\n  }\n}\n")],-1),y=Object(t["h"])("h3",null,"六. watch监听不到oldVal",-1),f=Object(t["h"])("p",null,"vue2和vue3中对复杂数据进行深度监听时，无法获取旧值，旧值会与新值相同",-1),w=Object(t["h"])("img",{style:{width:"600px"},class:"center",src:"https://zhangmingemma.github.io/dist/images/2022-11-13/3.png"},null,-1),k=Object(t["h"])("img",{style:{width:"600px"},class:"center",src:"https://zhangmingemma.github.io/dist/images/2022-11-13/4.png"},null,-1),v=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"原因"),Object(t["g"])("是："),Object(t["h"])("strong",null,"在变更（不是替换）对象或数组时，旧值与新值相同，因为它们的引用指向同一个对象/数组，vue不会保留变更之前的副本")],-1),x=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"解决办法"),Object(t["g"])("是："),Object(t["h"])("strong",null,"利用computed计算属性拷贝一个对象，监听该对象即可"),Object(t["h"])("img",{style:{width:"600px"},class:"center",src:"https://zhangmingemma.github.io/dist/images/2022-11-13/5.png"})],-1);function S(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x])}const P={};P.render=S;s["default"]=P},"602e":function(e,s,c){"use strict";c.d(s,"a",(function(){return h}));var t=c("7a23"),n=Object(t["f"])("<h2>一. 网络安全问题</h2><p>JS常见的网络安全问题：</p><ul><li><p><strong>XSS攻击</strong>：XSS 攻击全称跨站脚本攻击，是利用html可以执行的特性，想尽办法将脚本注入页面中的攻击手段。XSS攻击有两种，一种是通过修改浏览器URL导致脚本被注入到页面，另一种是通过输入框将脚本代码注入数据库。前面一种会被chrome浏览器自动防御攻击（但最好还是手动也防御一下），后面一种则需要我们手动防御，推荐使用<code>xss</code>库的白名单过滤防御方法</p></li><li><p><strong>CSRF攻击</strong>：源于Web的隐式身份验证机制！Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。例如网站有一个关注接口，那登陆网站的用户只要进入我的页面，我就可以拿到登陆的Cookie，如果我在我的页面调用了这条接口，就可以实现自动关注。CSRF攻击的问题一般是由服务端解决：</p><ul><li>Get请求不用于数据的修改</li><li>Cookie设为HTTP Only</li><li>接口设置跨域</li><li>请求时附带验证信息</li><li>校验Referer和Origin</li></ul></li><li><p><strong>点击劫持</strong>：将Iframe嵌入页面，并设置为透明。当用户点击某个位置时，实际上也点击了透明的Iframe。这种需要在HTTP响应头添加<code>X-Frame-Options</code>用来表明页面内是否允许Iframe嵌套，以及嵌套的域名范围</p></li></ul><h2>二. 浏览器服务端交互缓存</h2><p><strong>Cookie</strong> HTTP是无状态的，不记录连接的双方，如果每次忘记上一次的操作，会消耗成本。Cookie是浏览器访问服务器后，服务器返回的一段数据<code>Set-Cookie</code>，以后每次请求浏览器都要带上这段数据<code>Cookie</code>。最常见的应用场景就是永久登录，用户登录后给一个用户的特殊标识，每次请求都带上，服务器就方便识别用户。再比如一些个性化的设置、浏览器的行为跟踪、以及其他会话状态管理数据。Cookie的内容包含：</p><ul><li>Name &amp; Value: Name标识Cookie的名称，服务器通过这个值来获取Cookie的值Value</li><li>Domain &amp; Path: 标识可以访问此Cookie的域名，Path代表可以访问此Cookie的路径</li><li>Expires &amp; Max-Age: 标识Cookie的失效时间，不设置的话默认是Session，意思是跟随会话一起失效</li><li>Size: 代表Name+Value的字符长度，不同浏览器对Cookie的支持个数和尺寸都不同，大约都是4k左右</li><li>Http-Only: 若该属性为true，则只在请求头中带有此Cookie，不可以使用JS的<code>document.cookie</code>来获取cookie</li><li>Secure: 只能使用https来传递这个字段</li></ul><p><strong>Cookie的使用</strong></p><p>Cookie在JS中只能通过<code>document.cookie</code>来取值或者直接赋值，我们封装一个cookie的使用工具</p>",8),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"CookieHandler"),Object(t["g"])()]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-comment"},"// set Cookie"),Object(t["g"])("\n  setCookie(name, value, time, path, domain) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" exp = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])("()\n    exp.setTime(exp.getTime() + time * "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".cookie = "),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`"),Object(t["h"])("span",{class:"hljs-subst"},"${name}"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-subst"},"${value}"),Object(t["g"])(";expires="),Object(t["h"])("span",{class:"hljs-subst"},"${exp.toGMTString()}"),Object(t["g"])(";path="),Object(t["h"])("span",{class:"hljs-subst"},"${path}"),Object(t["g"])(";domain="),Object(t["h"])("span",{class:"hljs-subst"},"${domain}"),Object(t["g"])("`")]),Object(t["g"])("\n  },\n  getCookie(name) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" reg = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"RegExp"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},'"(^| )"'),Object(t["g"])(" + name + "),Object(t["h"])("span",{class:"hljs-string"},'"=([^;]*)(;|$)"'),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" arr = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".cookie.match(reg)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (arr) {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" arr["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("] \n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n    }\n  },\n  delCookie(name) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" exp = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])("()\n    exp.setTime(exp.getTime() - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" cval = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".getCookie(name)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (cval != "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(") {\n      "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".cookie = "),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`"),Object(t["h"])("span",{class:"hljs-subst"},"${name}"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-subst"},"${cval}"),Object(t["g"])(";expires="),Object(t["h"])("span",{class:"hljs-subst"},"${exp.toGMTString()}"),Object(t["g"])("`")]),Object(t["g"])("\n    }\n  }\n}\n")])],-1),a=Object(t["f"])("<p><strong>Session</strong> Cookie在浏览器中是用户可见的，并且存储大小也有限制，还可以随意的修改，很不安全。Session应运而生，是浏览器在第一次请求服务器的时候，服务器就为这一次会话创建了一个Session对象，保存在服务端，Session的ID以Cookie的形式传递给客户端。这样以后的请求，服务端就可以通过Cookie中的ID拿到Session对象，解析出其中包含的关键信息，更加安全</p><blockquote><p><strong>Cookie与Session的区别</strong></p><ul><li>安全性：Session比Cookie安全</li><li>存储值类型：Session可存任意类型的数据，Cookie只能存储字符串</li><li>存储大小：Cookie最长大约4k，Session可由服务器定义，但远大于Cookie</li><li>有效期：Cookie可设置长时间保持，Session失效时间较短，通常客户端关闭或Session超时都会失效</li></ul></blockquote><p><strong>Token</strong> 令牌也叫访问资源凭证，一般可以由用户唯一标识、时间戳、签名通过压缩后生成的一定长度的十六进制字符串，和Cookie差不多的验证流程，客户端第一次请求服务器的时候，服务器返回给客户端，由客户端自行存储，之后每次请求的时候带上，可以放在Cookie或者LocalStorage。状态：Token无状态，可扩展性好，通常用来保存用户的身份凭证，Session有状态，可以记录会话信息</p><h2>三. 浏览器缓存</h2><p>浏览器缓存，也就是不与服务端交互，纯浏览器本身的缓存，包含LocalStorage和SessionStorage，二者的区别是：</p><ul><li>生命周期：LocalStorage生命周期是永久的，除非主动删除否则永远不会消失；SessionStorage仅在当前会话有效，在浏览器窗口关闭后缓存就消失了</li><li>服务端：都仅在客户端保存，不参与与服务端的通信</li><li>大小：都差不多是5MB</li></ul><h2>四. 跨域问题</h2><p>浏览器出于安全考虑，限制非同源资源的访问，同源就是指协议+域名+端口都相同。那如果浏览器访问非同源资源，则会导致跨域问题。解决跨域问题有下面几种方法：</p><h3>1. <strong>CORS</strong></h3><p>跨域头需要浏览器和后端同时支持，即后端在<code>Http Header</code>设置<code>Access-Control-Allow-Origin</code>，值为具体域名，或者<code>*</code>，<code>*</code>代表所有域名都可以向服务端发起请求。跨域头的有点是非常灵活简单，也是目前解决跨域问题最主要的方式。在浏览器向服务端发起请求的时候，会在请求头里携带<code>origin</code>字段标识自己的来源，由服务器判断是否许可，如果许可会设置响应头<code>Access-Control-Allow-Origin</code>，浏览器会检查这个字段，从而让请求正常获得结果，否则，就会抛出错误。</p><p><strong>CORS与Cookie</strong> 这里需要额外注意的是，<code>CORS</code>默认不发送<code>Cookie</code>和<code>HTTP</code>认证信息，所以要把<code>Cookie</code>发送到服务器，需要在<code>ajax</code>请求中开发<code>withCredenticals</code>，设置值为<code>true</code>，并由服务端指定<code>Access-Control-Allow-Credentials</code>字段，并且此时不应该将<code>Access-Control-Allow-Origin</code>设为<code>*</code>，只能设为与网页请求同源的域名。</p><p><strong>CORS可以分为简单请求和复杂请求两类：</strong></p><p><strong>(1) 简单请求</strong></p><p>要求<code>HTTP</code>请求方法在<code>HEAD</code>、<code>GET</code>和<code>POST</code>三者之间，并且<code>HTTP</code>头部信息不超出<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Type</code>三种，其中<code>Content-Type</code>的字段值只能为<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code>三种。</p><p>简单请求和普通的<code>XHR</code>没有什么区别，就是浏览器会在请求头携带<code>Origin</code>，响应头中包含:</p><ul><li><code>Access-Control-Allow-Origin</code></li><li><code>Access-Control-Allow-Credentials</code></li><li><code>Cache-control</code></li><li><code>Last-Modified</code></li><li><code>Expires</code></li><li><code>Content-Type</code></li><li><code>Content-Language</code></li></ul><p><strong>(2) 复杂请求</strong></p><p>不满足简单请求的条件，即为复杂请求，复杂请求表面上和简单请求差不多，但实际上浏览器发送了不止一个请求。最先发送的是<code>预请求</code>，预请求以<code>OPTIONS</code>形式发送，当中同样包含域，还包含<code>CORS</code>特有的内容：</p><ul><li>Access-Control-Request-Method：是实际请求的种类，可以是<code>GET``POST``PUT</code>之类的</li><li>Access-Control-Request-Headers：是以逗号分割的列表，当中是复杂请求所使用的头部</li></ul><p>很显然，<strong>预请求就是一个鉴权的请求</strong>，预请求返回之后，服务端对下面的两项进行回复，让浏览器知道是否能够成功完成，复杂请求的部分响应头包含：</p><ul><li>Access-Control-Allow-Origin：必须包含一个域</li><li>Access-Control-Allow-Methods：以逗号分割，回复支持的请求方法类型</li><li>Access-Control-Allow-Headers：以逗号分割，回复支持的头部</li><li>Access-Control-Request-Headers：同Access-Control-Allow-Headers</li><li>Access-Control-Allow-Credentials</li><li>Access-Control-Max-Age：缓存事件，下次可以不用预检</li></ul><p>浏览器收到后确认一切可以正常，则实际请求可以开始发送。</p><h3>2. <strong>jsonp</strong></h3><p>利用<code>&lt;script&gt;</code>标签没有跨域限制这一点，实现过程是：声明回调函数，将函数名作为参数传递给请求数据的服务器；服务器将数据作为回调函数形参，返回给客户端。jsonp的优点是比较灵活简单，也能够实现跨域的需求，但缺点是只能实现GET方法，也不太安全，需要服务端配合，接口不能在其他应用场景复用</p>",24),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"//封装jsonp"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"jsonp"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"{url, params, callback}"),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve,  reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" script = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createElement("),Object(t["h"])("span",{class:"hljs-string"},"'script'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])("[callback] = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"data"),Object(t["g"])(") ")]),Object(t["g"])("{\n      resolve(data)\n      "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".body.removeChild(script)\n    }\n    params = {...params, callback}\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" arrs = []\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" key "),Object(t["h"])("span",{class:"hljs-keyword"},"of"),Object(t["g"])(" params) {\n      arrs.push("),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`"),Object(t["h"])("span",{class:"hljs-subst"},"${key}"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-subst"},"${params[key]}"),Object(t["g"])("`")]),Object(t["g"])(")\n    }\n    script.src = "),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`"),Object(t["h"])("span",{class:"hljs-subst"},"${url}"),Object(t["g"])("?"),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${arrs.join("),Object(t["h"])("span",{class:"hljs-string"},"'&'"),Object(t["g"])(")}")]),Object(t["g"])("`")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".body.appendChild(script)\n  })\n}\njsonp({\n  "),Object(t["h"])("span",{class:"hljs-attr"},"url"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"`https://xxx.com/say`"),Object(t["g"])(",\n  "),Object(t["h"])("span",{class:"hljs-attr"},"params"),Object(t["g"])(": { "),Object(t["h"])("span",{class:"hljs-attr"},"a"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])(" },\n  "),Object(t["h"])("span",{class:"hljs-attr"},"callback"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'show'"),Object(t["g"])("\n}).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"data"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".error(data)\n})\n")])],-1),b=Object(t["f"])("<h3>3. <strong>代理</strong></h3><p>利用的是服务器发起请求不存在跨域限制，因此需要先请求同源服务器，由同源服务器代为发起请求。vue工程运行设置的Proxy Table就是这样的原理</p><h2>五. 同站</h2><p>我们前面提到<code>同源</code>意思就是协议+主机名（域名）+端口都相同，<code>同站</code>是指顶级域名+二级域名的组合相同。以一个网址<code>https://www.example.com:443</code>为例，<code>https</code>为协议，<code>www.example.com</code>为主机名，<code>443</code>为端口，全部相同即为同源。<code>.com</code>为顶级域名(TLD)，<code>.example</code>为二级域名(TLD+1)，二者都相同，被称为<code>同站</code>。对于<code>https://www.example.com.cn</code>这样的域名来说，<code>TLD+1</code>就是<code>.com.cn</code>并不能代表这个站点，因此衍生出<code>eTLD</code>的概念，为有效顶级域名，也可理解为带有后缀的顶级域名，因此对于<code>https://www.example.com.cn</code>这样的域名，同站意思是<code>example.com.cn</code>。</p><p><strong>same-site</strong>是<code>Cookie</code>的一个属性，是为了防止CSRF跨站请求伪造攻击的，<code>same-site</code>有三个取值：</p><ul><li><strong>strict</strong>：严格校验，严格校验站点是否为同站</li><li><strong>lax</strong>：较宽松校验，是默认值，在跨站点的情况下，从第三方网站打开链接，<code>get</code>方式提交表单都会携带cookie，但如果在第三方站点中使用了<code>post</code>方法，或者通过<code>img</code>，<code>iframe</code>等标签加载的url，会禁止cookie的发送</li><li><strong>none</strong>：不校验第三方站点是否为同源或同一站点，任何情况下都会发送<code>cookie</code></li></ul>",6);function h(e,s,c,h,o,O){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b])}},6237:function(e,s,c){},"62b5":function(e,s,c){"use strict";var t=c("d4ec"),n=c("bee2"),l=(c("159b"),c("ac1f"),c("466d"),c("5319"),c("99af"),c("d81d"),function(){function e(){Object(t["a"])(this,e),this.CatalogMaxLevels=3,this.CatalogList=[],this.CatalogOffset=null}return Object(n["a"])(e,[{key:"getCatalogOffset",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.CatalogOffset||e){var s=document.getElementById("js-catalog");this.CatalogOffset={left:(null===s||void 0===s?void 0:s.offsetLeft)||0,top:(null===s||void 0===s?void 0:s.offsetTop)||0,width:(null===s||void 0===s?void 0:s.offsetWidth)||0}}return this.CatalogOffset}},{key:"getCatalogHtml",value:function(){var e=this,s=this.getAllH(),c=[],t="";if(this.CatalogList=s,!s||!s.length)return t;s.forEach((function(s,n){var l=e.getHText(s),a=e.getHLabel(s),j=c.indexOf(a);if(j<0)c.length<e.CatalogMaxLevels&&(c.unshift(a),t+=e.addStartUl(),t+=e.addLi(l,n));else if(0===j)t+=e.addLi(l,n);else{while(j--)c.shift(),t+=e.addEndUl();t+=e.addLi(l,n)}}));while(c.length)c.shift(),t+=this.addEndUl();return t}},{key:"anchor",value:function(e){if("A"===(null===e||void 0===e?void 0:e.target.nodeName)){var s,c,t=null===(s=e.target.attributes)||void 0===s||null===(c=s.href)||void 0===c?void 0:c.value,n=t.substring(1,t.length),l=document.getElementById(n);l&&l.scrollIntoView({behavior:"smooth"})}}},{key:"getAllH",value:function(){var e=document.getElementById("js-markdown-body"),s=e.innerHTML.match(/<[hH][1-6](\s.*?)>.*?<\/[hH][1-6]>/g);return s}},{key:"getHLabel",value:function(e){var s,c=null===(s=e.match(/<\w+?(\s.*?)>/))||void 0===s?void 0:s[0];return c.replace(/id=\"(.*?)\"/,"").replaceAll(/\s/g,"")}},{key:"getHText",value:function(e){return e.replace(/<[^>]+>/g,"")}},{key:"addStartUl",value:function(){return'<ul class="catalog-list">'}},{key:"addEndUl",value:function(){return"</ul>\n"}},{key:"addLi",value:function(e,s){return'<li class="item"><a href="#heading-'.concat(s,'" title="').concat(e,'">').concat(e,"</a></li>\n")}},{key:"setHId",value:function(){var e=this;this.CatalogList&&this.CatalogList.map((function(s,c){for(var t=e.getHText(s),n=e.getHLabel(s),l=n.replace("<","").replace(">",""),a=document.getElementsByTagName(l),j=0;j<a.length;j++){var b=a[j];if((null===b||void 0===b?void 0:b.innerHTML)===t){var h="heading-".concat(c);b.setAttribute("id",h)}}}))}}]),e}());s["a"]=new l},"67a4":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("img",{style:{width:"700px"},class:"center",src:"https://zhangmingemma.github.io/dist/images/2022-11-13/vue1.png"},null,-1),l=Object(t["h"])("p",null,[Object(t["g"])("Vue会根据Vue模板生成"),Object(t["h"])("code",null,"VDOM"),Object(t["g"])("结构，然后用原生的DOM方法依次创建VDOM结构中的每一个节点，然后将它们挂载成一棵DOM子树，并插入页面，就可以得到真正的HTML。，它被传递给组件的"),Object(t["h"])("code",null,"_update"),Object(t["g"])("方法执行渲染。这里所说的渲染包括首次绘制和更新，"),Object(t["h"])("code",null,"_update"),Object(t["g"])("内部会根据旧的vnode是否存在来判断是首绘还是更新。"),Object(t["h"])("code",null,"_update"),Object(t["g"])("的实现大致如下：")],-1),a=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("Vue.prototype._update = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-params"},"vnode, hydrating"),Object(t["g"])(")")]),Object(t["g"])("{ \n    "),Object(t["h"])("span",{class:"hljs-comment"},"// ... "),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!prevVnode) { "),Object(t["h"])("span",{class:"hljs-comment"},"// initial render "),Object(t["g"])("\n        vm.$el = vm.__patch__(vm.$el,vnode,hydrating,"),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" { "),Object(t["h"])("span",{class:"hljs-comment"},"// updates "),Object(t["g"])("\n        vm.$el = vm.__patch__(prevVnode, vnode) \n    } \n    "),Object(t["h"])("span",{class:"hljs-comment"},"// ... "),Object(t["g"])("\n}\n")])],-1),j=Object(t["f"])('<p>当旧的vnode不存在，说明这是首次绘制，<code>__patch__</code>将依据虚拟DOM生成真实DOM并绘制到页面。如果旧的vnode是存在的，说明当前组件已经被绘制到页面上了，这时候<code>__patch__</code>将负责比对两个vnode，然后判断如何最高效地更新真实DOM，最后去更新视图。更新视图就是通过<code>insertBefore</code>、<code>createElement</code>、<code>appendChild</code>等方法，按照新的VNode的结构，来更新真实DOM的。</p><p>因此Vue视图渲染可以概括为两部分，首先是<strong>diff</strong>过程，比较新旧<code>VNode</code>的区别，找出变更点；其次是<strong>patch</strong>过程，根据虚拟DOM映射到真实DOM上。</p><h3>1. diff</h3><p>Vue的diff算法仅在统计的VNode间做<code>diff</code>，递归地进行同级<code>VNode</code>的<code>diff</code>，最终实现整个DOM树的更新。</p><img style="width:400px;" class="center" src="https://zhangmingemma.github.io/dist/images/2022-11-13/vue-diff1.png">',5),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("updateChildren (parentElm, oldCh, newCh) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" oldStartIdx = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", newStartIdx = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" oldEndIdx = oldCh.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" oldStartVnode = oldCh["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" oldEndVnode = oldCh[oldEndIdx]\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" newEndIdx = newCh.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" newStartVnode = newCh["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" newEndVnode = newCh[newEndIdx]\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" oldKeyToIdx\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" idxInOld\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" elmToMove\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" before\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])(" (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (oldStartVnode == "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(") {   \n            oldStartVnode = oldCh[++oldStartIdx] \n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (oldEndVnode == "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(") {\n            oldEndVnode = oldCh[--oldEndIdx]\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (newStartVnode == "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(") {\n            newStartVnode = newCh[++newStartIdx]\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (newEndVnode == "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(") {\n            newEndVnode = newCh[--newEndIdx]\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (sameVnode(oldStartVnode, newStartVnode)) {\n            patchVnode(oldStartVnode, newStartVnode)\n            oldStartVnode = oldCh[++oldStartIdx]\n            newStartVnode = newCh[++newStartIdx]\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (sameVnode(oldEndVnode, newEndVnode)) {\n            patchVnode(oldEndVnode, newEndVnode)\n            oldEndVnode = oldCh[--oldEndIdx]\n            newEndVnode = newCh[--newEndIdx]\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (sameVnode(oldStartVnode, newEndVnode)) {\n            patchVnode(oldStartVnode, newEndVnode)\n            api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n            oldStartVnode = oldCh[++oldStartIdx]\n            newEndVnode = newCh[--newEndIdx]\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (sameVnode(oldEndVnode, newStartVnode)) {\n            patchVnode(oldEndVnode, newStartVnode)\n            api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n            oldEndVnode = oldCh[--oldEndIdx]\n            newStartVnode = newCh[++newStartIdx]\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 使用key时的比较"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (oldKeyToIdx === "),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])(") {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) "),Object(t["h"])("span",{class:"hljs-comment"},"// 有key生成index表"),Object(t["g"])("\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.key]\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!idxInOld) {\n                api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                newStartVnode = newCh[++newStartIdx]\n            }\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                elmToMove = oldCh[idxInOld]\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (elmToMove.sel !== newStartVnode.sel) {\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                    patchVnode(elmToMove, newStartVnode)\n                    oldCh[idxInOld] = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n                    api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                }\n                newStartVnode = newCh[++newStartIdx]\n            }\n        }\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (oldStartIdx > oldEndIdx) {\n        before = newCh[newEndIdx + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("] == "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" ? "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" : newCh[newEndIdx + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("].el\n        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n    }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (newStartIdx > newEndIdx) {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n    }\n}\n")])],-1),h=Object(t["f"])('<p>从上面的<strong>diff算法源代码</strong>中可以看到，<strong>diff</strong>过程比较复杂，概括可以理解为：首先设置新旧虚拟DOM节点的孩子树<code>newCh</code>、<code>oldCh</code>的起始<code>StartIdx</code>、结尾索引<code>EndIdx</code>。它们的2个变量相互比较，一共有4种比较方式。举例说明，下面是一个对比前后的DOM树，具体过程是：</p><p><img style="width:200px;display:inline-block;" src="https://zhangmingemma.\ngithub.io/dist/images/2022-11-13/vue-diff2.png"><img style="width:400px;display:inline-block;" src="https://zhangmingemma.github.io/dist/images/2022-11-13/vue-diff3.png"></p><p>(1) 当新旧起始节点为<code>null</code>时，则将起始索引<code>++</code>,并更新起始节点；同样的，当新旧结尾节点为<code>null</code>时，则将结尾索引<code>--</code>，并更新结尾节点 (2) 当新旧起始节点相同时，则<code>patchVnode</code>进行patch，同时将新旧起始索引<code>++</code>；同样的，当新旧结尾节点相同时（即key和sel都相同），则<code>patchVnode</code>进行patch，同时将新旧结尾索引<code>--</code>，对于真实DOM而言，就是节点保留原地</p><img style="width:400px;" class="center" src="https://zhangmingemma.github.io/dist/images/2022-11-13/vue-diff4.png"><p>(3) 当旧起始节点和新结尾节点相同时，<code>patchVnode</code>进行patch，将oldStartNode.elm移动到旧结尾节点oldEndNode.elm之后，旧起始索引<code>++</code>新结尾索引<code>--</code>；同理，当新起始节点和旧结尾节点相同时，<code>patchVnode</code>进行patch，将旧结尾节点oldEndNode.elm移动到旧起始节点oldStartNode.elm之后，旧结尾索引<code>--</code>新起始索引<code>++</code>;<br></p><img style="width:400px;" class="center" src="https://zhangmingemma.github.io/dist/images/2022-11-13/vue-diff6.png"><img style="width:400px;" class="center" src="https://zhangmingemma.github.io/dist/images/2022-11-13/vue-diff7.png"><p>(4) 以上情况都不是的时候，使用key进行比较，从用旧虚拟节点树key生成的对象oldKeyToIdx中查找匹配的节点，所以为节点设置key可以更高效的利用dom。</p><ul><li>若新起始节点的key不在oldKeyToIdx中，在旧起始节点位置上插入新起始节点，同时新起始索引<code>++</code></li><li>若新起始节点的key在oldKeyToIdx中，且key相同的两个虚拟节点sel相同，则<code>patchVnode</code>进行patch，把key相同的旧虚拟节点的elm移动到oldStartVnode.elm之前，新起始索引<code>++</code></li><li>若新起始节点的key在oldKeyToIdx中，且key相同的两个虚拟节点sel不同，则在把新起始节点的elm插入到oldStartVnode.elm之前，新起始索引<code>++</code></li></ul><p>(5) 在比较的过程中，变量会往中间靠，一旦StartIdx&gt;EndIdx表明oldCh和newCh至少有一个已经遍历完了，就会结束比较。结束时存在两种具体的情况：</p><ul><li><p><code>oldStartIdx &gt; oldEndIdx</code>，可以认为oldCh先遍历完。当然也有可能newCh此时也正好完成了遍历，统一都归为此类。此时newStartIdx和newEndIdx之间的vnode是新增的，调用addVnodes，把这些虚拟node.elm全部插进before的后边.</p></li><li><p><code>newStartIdx &gt; newEndIdx</code>，可以认为newCh先遍历完。此时oldStartIdx和oldEndIdx之间的vnode在新的子节点里已经不存在了，调用removeVnodes将这些虚拟node.elm从dom里删除。</p></li></ul><img style="width:400px;" class="center" src="https://zhangmingemma.github.io/dist/images/2022-11-13/vue-diff8.png"><h3>2. patch</h3><p><strong>patch</strong>就是将变化映射到真实DOM，对真实DOM进行操作</p>',14),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"patchVnode"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-params"},"oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// ...... "),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" elm = vnode.elm = oldVnode.elm\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" oldCh = oldVnode.children\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ch = vnode.children\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果vnode没有文本节点"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isUndef(vnode.text)) {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果oldVnode的children属性存在且vnode的children属性也存在  "),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isDef(oldCh) && isDef(ch)) {\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// updateChildren，对子节点进行diff  "),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isDef(ch)) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (process.env.NODE_ENV !== "),Object(t["h"])("span",{class:"hljs-string"},"'production'"),Object(t["g"])(") {\n                checkDuplicateKeys(ch)\n            }\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果oldVnode的text存在，那么首先清空text的内容,然后将vnode的children添加进去  "),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isDef(oldVnode.text)) nodeOps.setTextContent(elm, "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(")\n            addVnodes(elm, "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(", ch, "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", ch.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(", insertedVnodeQueue)\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isDef(oldCh)) {\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 删除elm下的oldchildren"),Object(t["g"])("\n            removeVnodes(elm, oldCh, "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", oldCh.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isDef(oldVnode.text)) {\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// oldVnode有子节点，而vnode没有，那么就清空这个节点  "),Object(t["g"])("\n            nodeOps.setTextContent(elm, "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(")\n        }\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (oldVnode.text !== vnode.text) {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果oldVnode和vnode文本属性不同，那么直接更新真是dom节点的文本元素"),Object(t["g"])("\n        nodeOps.setTextContent(elm, vnode.text)\n    }\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// ......"),Object(t["g"])("\n}\n")])],-1),O=Object(t["h"])("p",null,"参考文献：",-1),r=Object(t["h"])("ol",null,[Object(t["h"])("li",null,[Object(t["h"])("a",{href:"https://blog.csdn.net/m6i37jk/article/details/78140159",target:"__blank"},"深入Vue2.x的虚拟DOM diff原理")]),Object(t["h"])("li",null,[Object(t["h"])("a",{href:"https://segmentfault.com/a/1190000008782928",target:"__blank"},"解析vue2.0的diff算法")]),Object(t["h"])("li",null,[Object(t["h"])("a",{href:"https://segmentfault.com/a/1190000008291645",target:"__blank"},"Vue原理解析之Virtual Dom")]),Object(t["h"])("li",null,[Object(t["h"])("a",{href:"https://mp.weixin.qq.com/s?__biz=MzUxNjQ1NjMwNw==&mid=2247484449&idx=1&sn=7f346b97a177218cc09fc50562ed121c&chksm=f9a66e3dced1e72b8a88fd0d78b5a5b8bd2e0ec95552e675d44923d368bba2ec438c520cd7be&cur_album_id=1619085427984957440&scene=189#rd",target:"__blank"},"Diff - 源码版 之 Diff 流程")])],-1);function g(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r])}const p={};p.render=g;s["default"]=p},"699a":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>上篇主要解释了如何从项目文件夹内读取文章，并解析文章的标题、时间、摘要等基本内容，渲染为文章列表，单项可以携带文章文件名跳转到文章内页。本篇主要解释在文章内页如何将Markdown渲染为Html，并抽取文章目录，实现文章锚点，本文主要用到的库是<a href="https://github.com/markedjs/marked">marked</a>，marked能够通过正则表达式将markdown文件解析为<code>html</code>文本。</p><p>博客源码github: <a href="https://github.com/zhangmingemma/zhangmingemma.github.io" target="_blank">博客仓库地址</a>，目录抽取的代码写在<code>CatalogHanlder.ts</code>中</p><h3>1. 文章html渲染</h3><p>首先获取单篇文章文本，处理思路有很多种，因为上篇我们已经解释了如何拿到文章文本，这里不做赘述：</p><ul><li>在<code>main.ts</code>中执行文章列表获取的方法，获得文章列表，存储全局数据，在文章内页通过文件名拿到当前文章的文本内容；</li><li>根据文章文件名，通过<code>axios</code>单独获取</li></ul><p>其次是将文本渲染为html：</p>',6),l=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["g"])("使用"),Object(t["h"])("code",null,"marked"),Object(t["g"])("将markdown文本转换生成"),Object(t["h"])("code",null,"html"),Object(t["g"])("，在页面中通过"),Object(t["h"])("code",null,"v-html"),Object(t["g"])("标签引入即可。")])]),Object(t["h"])("li",null,[Object(t["h"])("p",null,[Object(t["g"])("再添加样式库让文章内容美观呈现，markdown格式化使用的样式库是"),Object(t["h"])("code",null,"github-markdown-css"),Object(t["g"])("，代码高亮使用的样式库是"),Object(t["h"])("code",null,"highlight.js"),Object(t["g"])("。如果代码仍旧不能高亮，需要在"),Object(t["h"])("code",null,"main.ts"),Object(t["g"])("中"),Object(t["h"])("code",null,"import 'highlight.js/styles/github.css'"),Object(t["g"])("，原因是Vue中"),Object(t["h"])("code",null,"v-html"),Object(t["g"])("中的"),Object(t["h"])("code",null,"html"),Object(t["g"])("文本只能应用全局样式")]),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'github-markdown-css'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" hljs "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'highlight.js'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" { useRoute } "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'vue-router'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" marked = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'marked'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" { defineComponent, Ref, watchEffect } "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'@vue/runtime-core'"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// marked需要设置一下高亮引用样式库，否则代码不会高亮"),Object(t["g"])("\nmarked.setOptions({\n    "),Object(t["h"])("span",{class:"hljs-attr"},"renderer"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" marked.Renderer(),\n    "),Object(t["h"])("span",{class:"hljs-attr"},"gfm"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-comment"},"//默认为true。 允许 Git Hub标准的markdown."),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"tables"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-comment"},"//默认为true。 允许支持表格语法。该选项要求 gfm 为true。"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"breaks"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-comment"},"//默认为false。 允许回车换行。该选项要求 gfm 为true。"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"pedantic"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-comment"},"//默认为false。 尽可能地兼容 markdown.pl的晦涩部分。不纠正原始模型任何的不良行为和错误。"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"smartLists"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"smartypants"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-comment"},"//使用更为时髦的标点，比如在引用语法中加入破折号。"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"highlight"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-params"},"code:any"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" hljs.highlightAuto(code).value;\n    },\n});\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(" defineComponent({\n    setup() {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 从路由参数中获取markdown文件名"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" route = useRoute()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" fileName = route.query.fileName\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" postHtml:Ref<string> = ref("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" { res } = getPostInfo(fileName) "),Object(t["h"])("span",{class:"hljs-comment"},"// 获取单个文章文本"),Object(t["g"])("\n        \n        watchEffect("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (res.value) {\n                postHtml = marked(res.value)\n            }\n        })\n\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            postHtml\n        }\n    }\n})\n")])]),Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-comment"},"\x3c!-- 样式库定义为类名为markdown-body，所以这里markdown容器的类名必须有markdown-body --\x3e"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"markdown-body"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-html"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"postHtml"'),Object(t["g"])("/>")]),Object(t["g"])("\n")])])])],-1),a=Object(t["f"])('<h3>2. 文章目录抽取</h3><p>文章目录抽取的实现过程大致可以划分为三个步骤，第一步就是获取标题节点，得到标题树；第二步是根据标题树的标题等级、文本组成目录html；第三步就是展示目录实现锚点定位</p><h4>1) 获取标题节点</h4><p>获取标题节点的方式有两种</p><ul><li>第一种是基于<code>marked-ast</code>从AST语法树中抽取<code>heading</code>标签</li><li>第二种是从已渲染的文章<code>html</code>中根据正则规则抽取<code>h</code>标签，比较感兴趣的话可以移步这篇文章，讲解的还是很清楚的：<a href="https://juejin.cn/post/6844904007069089805" target="_blank">《实现一个掘金Style的markdown目录》</a>。</li></ul><p>这里我们主要讲解第一种从AST语法树中抽取标题节点。上篇<a href="https://zhangmingemma.github.io/#/post?file=2021-07-03-Blog%201">Vue3.0搭建博客 (一)：文章html渲染, 抽取目录</a>我们讲过如何使用<code>marked-ast</code>解析markdown文本为AST语法树，通过语法树可以拿到标题<code>type=heading</code>，level代表标题层级~~~</p>',6),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" getPostCatalog = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"markdownText:string"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ast:object[] = markedAST.parse(markdownText.trim())\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" headingArr = ast.filter("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"astItem"),Object(t["g"])(" =>")]),Object(t["g"])(" astItem.type==="),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" headingArr\n}\n")])],-1),b=Object(t["h"])("p",null,"例如下面的标题列表",-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(t["h"])("span",{class:"hljs-section"},"## 标题1 "),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"### 标题1.1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"#### 标题1.1.1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"## 标题2"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"### 标题2.1"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("p",null,"会抽析出结果",-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("[{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"level"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'标题1'"),Object(t["g"])("]\n},{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"level"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'标题1.1'"),Object(t["g"])("]\n},{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"level"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'标题1.1.1'"),Object(t["g"])("]\n},{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"level"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'标题2'"),Object(t["g"])("]\n},{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"level"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'标题2.1'"),Object(t["g"])("]\n}]\n")])],-1),r=Object(t["h"])("h4",null,"2) 组合目录html",-1),g=Object(t["h"])("p",null,"拿到标题节点树之后，就可以组合目录html了",-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("getCatalogHtml(markdownText:string) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" CatalogMaxLevels:number = "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// 我这里设置最多显示三层目录"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" headingArr:IAst[] = getPostCatalog(markdownText)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" levelStack:string[] = [] \n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" htmlResult:string = "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(!headingArr || !headingArr.length) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" htmlResult\n    }\n    headingArr.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item:IAst, index:number"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" itemText:string = item?.text?.["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" itemLabel:string = "),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`h"),Object(t["h"])("span",{class:"hljs-subst"},"${item?.level}"),Object(t["g"])("`")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" levelIndex:number = levelStack.indexOf(itemLabel)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (levelIndex < "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(" ) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (levelStack.length < CatalogMaxLevels) {\n                levelStack.unshift(itemLabel)\n                htmlResult += "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".addStartUl()\n                htmlResult += "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".addLi(itemText, index)\n            }\n        } \n        "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (levelIndex === "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(") {\n            htmlResult += "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".addLi(itemText, index)\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])("(levelIndex--) {\n                levelStack.shift()\n                htmlResult += "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".addEndUl()\n            }\n            htmlResult += "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".addLi(itemText, index)\n        }\n    })\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])("(levelStack.length) {\n        levelStack.shift()\n        htmlResult += "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".addEndUl()\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" htmlResult\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" addStartUl = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},'`<ul class="catalog-list">`'),Object(t["g"])("\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" addEndUl = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"`</ul>\\n`"),Object(t["g"])("\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" addLi = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"text:string, index:number"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])('`<li class="item"><a href="#heading-'),Object(t["h"])("span",{class:"hljs-subst"},"${index}"),Object(t["g"])('" title="'),Object(t["h"])("span",{class:"hljs-subst"},"${text}"),Object(t["g"])('">'),Object(t["h"])("span",{class:"hljs-subst"},"${text}"),Object(t["g"])("</a></li>\\n`")]),Object(t["g"])("\n}\n")])],-1),i=Object(t["h"])("p",null,"执行之后",-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(t["h"])("span",{class:"hljs-section"},"## 标题1 "),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"### 标题1.1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"#### 标题1.1.1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"## 标题2"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-section"},"### 标题2.1"),Object(t["g"])("\n")])],-1),u=Object(t["h"])("p",null,"上面的markdown文件，解析后获得的目录html会变成",-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"href"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"#heading-0"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"title"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"标题1"'),Object(t["g"])(">")]),Object(t["g"])("标题1"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"href"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"#heading-1"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"title"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"标题1.1"'),Object(t["g"])(">")]),Object(t["g"])("标题1.1"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(t["g"])(">")]),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"href"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"#heading-2"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"title"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"标题1.1.1"'),Object(t["g"])(">")]),Object(t["g"])("标题1.1.1"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"href"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"#heading-3"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"title"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"标题2"'),Object(t["g"])(">")]),Object(t["g"])("标题2"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"href"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"#heading-4"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"title"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"标题2.1"'),Object(t["g"])(">")]),Object(t["g"])("标题2.1"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"ul"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),y=Object(t["h"])("p",null,"在页面中展示html，设置样式即可得到掘金样式的目录啦~我这里做了一个额外的处理，页面滚动的时候设置了目录吸顶。除此之外，博客的浏览场景大概率是PC Web，因此浏览器可视范围的尺寸改变，会影响到目录展示的位置，也需要监听窗口尺寸的改变，来修正目录吸顶时的展示位置。",-1),f=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(" defineComponent({\n    setup() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" route = useRoute()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" router = useRouter()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" fileName:any = route.query.file "),Object(t["h"])("span",{class:"hljs-comment"},"//从路由参数中拿到文章的文件名"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" markdownText:string =  getSinglePost(fileName) "),Object(t["h"])("span",{class:"hljs-comment"},"// 获取单个文章的markdown文本"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" isCatalogFixed = ref<boolean>("),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" catalogHtml = ref<string>("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(")\n        catalogHtml.value = getCatalogHtml()\n\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" state = reactive({\n            "),Object(t["h"])("span",{class:"hljs-attr"},"CatalogOffset"),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" | {\n                "),Object(t["h"])("span",{class:"hljs-attr"},"left"),Object(t["g"])(":number, \n                "),Object(t["h"])("span",{class:"hljs-attr"},"top"),Object(t["g"])(":number, \n                "),Object(t["h"])("span",{class:"hljs-attr"},"width"),Object(t["g"])(":number\n            } = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        })\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".onresize = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" catalogEle:HTMLElement|"),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'js-catalog'"),Object(t["g"])(")\n            state.catalogOffset = {\n                "),Object(t["h"])("span",{class:"hljs-attr"},"left"),Object(t["g"])(": catalogEle?.offsetLeft || "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(",\n                "),Object(t["h"])("span",{class:"hljs-attr"},"top"),Object(t["g"])(": catalogEle?.offsetTop || "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(",\n                "),Object(t["h"])("span",{class:"hljs-attr"},"width"),Object(t["g"])(": catalogEle?.offsetWidth || "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n            }\n        }\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'scroll'"),Object(t["g"])(", ()=> {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" pageY:number = "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".pageYOffset\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" catalogEle:HTMLElement|"),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'js-catalog'"),Object(t["g"])(")\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" targetY:number = catalogEle?.offsetTop\n            isCatalogFixed.value = pageY > targetY\n        }, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            catalogHtml\n        }\n    }\n})\n")])],-1),w=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-comment"},"\x3c!--吸顶时占位--\x3e"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"post-catalog"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},"\"`${isCatalogFixed? 'js-catalog':''}`\""),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-if"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"isCatalogFixed && catalogHtml"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"`width:${catalogOffset.width}px`"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"post-catalog"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},"\"`${isCatalogFixed? '':'js-catalog'}`\""),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"{fixed: isCatalogFixed}"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},"\"`${isCatalogFixed ? 'left:'+catalogOffset.left+'px':''}`\""),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-if"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-title"'),Object(t["g"])(">")]),Object(t["g"])("目录"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-body"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-html"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@click.prevent"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"anchor($event)"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),k=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-scss"},[Object(t["h"])("span",{class:"hljs-selector-class"},".post-catalog"),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"max-width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$aside-width"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"box-sizing"),Object(t["g"])(": border-box;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"flex-shrink"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"padding-left"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"4.5rem"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"padding-top"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"2rem"),Object(t["g"])(";\n    &"),Object(t["h"])("span",{class:"hljs-selector-class"},".fixed"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"position"),Object(t["g"])(": fixed;\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"z-index"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(";\n        -webkit-"),Object(t["h"])("span",{class:"hljs-attribute"},"font"),Object(t["g"])("-smoothing: subpixel-antialiased;\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"top"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"left"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"969px"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"padding-top"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"2rem"),Object(t["g"])(";\n    }\n    "),Object(t["h"])("span",{class:"hljs-selector-class"},".catalog-title"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"font-size"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$font-size-h1-excerpt"),Object(t["g"])(";\n    }\n    "),Object(t["h"])("span",{class:"hljs-selector-class"},".catalog-body"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"margin"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1rem"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-comment"},"// catalog-list为v-html模板中的样式，因此需要定义为全局样式"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"position"),Object(t["g"])(": relative;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"padding"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"margin"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n    @include before-line();\n    "),Object(t["h"])("span",{class:"hljs-selector-class"},".item"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"margin"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"padding"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"font-size"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$font-size-h1-excerpt"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"line-height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$line-height"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"list-style"),Object(t["g"])(": none;\n        "),Object(t["h"])("span",{class:"hljs-selector-tag"},"a"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"text-decoration"),Object(t["g"])(": none;\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"color"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$font-dark-grey"),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"font-weight"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$font-weight-bold"),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"margin"),Object(t["g"])(": ."),Object(t["h"])("span",{class:"hljs-number"},"4rem"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"padding"),Object(t["g"])(": ."),Object(t["h"])("span",{class:"hljs-number"},"2rem"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(" ."),Object(t["h"])("span",{class:"hljs-number"},"2rem"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"1.3rem"),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"display"),Object(t["g"])(": block;\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"position"),Object(t["g"])(": relative;\n            @include singleLine;\n            @include item-dot(6px, 50%);\n            &"),Object(t["h"])("span",{class:"hljs-selector-pseudo"},":hover"),Object(t["g"])(" {\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"background"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"border-radius"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"3px"),Object(t["g"])(";\n            }\n            &"),Object(t["h"])("span",{class:"hljs-selector-pseudo"},":active"),Object(t["g"])(", &"),Object(t["h"])("span",{class:"hljs-selector-pseudo"},":focus"),Object(t["g"])(" {\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"color"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$link-red"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"background"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"border-radius"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"3px"),Object(t["g"])(";\n            }\n        }\n    }\n\n    "),Object(t["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"margin-left"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"2rem"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-selector-tag"},"a"),Object(t["g"])(" {\n            @include item-dot(5px, 0);\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"font-weight"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$font-weight"),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"font-size"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$font-size-h3-excerpt"),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"margin"),Object(t["g"])(": ."),Object(t["h"])("span",{class:"hljs-number"},"1rem"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"padding"),Object(t["g"])(": ."),Object(t["h"])("span",{class:"hljs-number"},"1rem"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(" ."),Object(t["h"])("span",{class:"hljs-number"},"1rem"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"1.3rem"),Object(t["g"])(";\n        }\n    }\n\n    "),Object(t["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-selector-tag"},"a"),Object(t["g"])(" {\n            @include item-dot(5px, 50%);\n            "),Object(t["h"])("span",{class:"hljs-attribute"},"font-size"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$font-size-h5-excerpt"),Object(t["g"])(";\n        }\n    }\n}\n")])],-1),v=Object(t["h"])("p",null,"样式中有用到一些混入和变量",-1),x=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-scss"},[Object(t["h"])("span",{class:"hljs-variable"},"$font-size-h1-excerpt"),Object(t["g"])(":   "),Object(t["h"])("span",{class:"hljs-number"},"1rem"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$font-size-h3-excerpt"),Object(t["g"])(":   ."),Object(t["h"])("span",{class:"hljs-number"},"95rem"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$font-size-h5-excerpt"),Object(t["g"])(":   ."),Object(t["h"])("span",{class:"hljs-number"},"9rem"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$line-height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1.6"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$font-weight"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"400"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$font-weight-bold"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"600"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$font-dark-grey"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"#333"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$link-red"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"#fc4d50"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"#f2f3f4"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-variable"},"$aside-width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"310px"),Object(t["g"])(";\n@mixin singleLine() {\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"white-space"),Object(t["g"])(": nowrap;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"text-overflow"),Object(t["g"])(": ellipsis;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"overflow"),Object(t["g"])(": hidden;\n}\n@mixin item-dot("),Object(t["h"])("span",{class:"hljs-variable"},"$size"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-variable"},"$border-radius"),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-variable"},"$left"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"5px"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-variable"},"$top"),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-number"},"50%"),Object(t["g"])(") {\n    &::before {\n        content: "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"position"),Object(t["g"])(": absolute;\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"top"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$top"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"left"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$left"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"margin-top"),Object(t["g"])(": -#{"),Object(t["h"])("span",{class:"hljs-variable"},"$size"),Object(t["g"])("}/"),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$size"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$size"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"background"),Object(t["g"])(": currentColor;\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"border-radius"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$border-radius"),Object(t["g"])(";\n    }\n}\n@mixin before-line("),Object(t["h"])("span",{class:"hljs-variable"},"$color"),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(t["g"])(") {\n    &::before {\n        content: "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"position"),Object(t["g"])(": absolute;\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"top"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"left"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"7px"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"bottom"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"2px"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"background"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-variable"},"$color"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"opacity"),Object(t["g"])(": ."),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])(";\n    } \n}\n")])],-1),S=Object(t["f"])("<h4>3) 目录锚定页面</h4><p>目录锚定页面其实基于的原理就是<code>&lt;a href=&quot;#id1&quot;&gt;text&lt;/a&gt;</code>中的<code>href</code>为标题行的<code>id</code>，如<code>&lt;h1 id=&quot;id1&quot;&gt;text&lt;/h1&gt;</code>。基于<code>marked</code>渲染的markdown页面，标题的h标签都携带了<code>id</code>属性，为标题文本，这样会存在一个问题，当标题文本包含特殊标点符号的时候，例如我们常用的<code>1. 标题</code>这种类型，会导致锚定失效。我们在上一节已经在生成目录html的时候，设定了单行目录为<code>&lt;a href=&quot;#heading-2&quot; title=&quot;标题1.1.1&quot;&gt;标题1.1.1&lt;/a&gt;</code>，只需要在对应的标题行修正<code>id=heading-index</code>的样式即可。</p><ul><li>修正h标签id</li></ul>",3),P=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" setHId = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"markdownText:string"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" headingArr:IAst[] = getPostCatalog(markdownText)\n    headingArr.map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item:IAst, index:number"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" itemText:string = item?.text?.["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" tagEle = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById(itemText)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (tagEle) {\n            tagEle.setAttribute("),Object(t["h"])("span",{class:"hljs-string"},"'id'"),Object(t["g"])(", id)\n        }\n    })\n}\n")])],-1),_=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["g"])("vue-router环境下锚定冲突处理 处理完"),Object(t["h"])("code",null,"h"),Object(t["g"])("标签的id之后，实际发现，并不能够锚定，原因是锚定会与vue-router的路由跳转冲突，需要手动处理锚定跳转。上一节目录页面中我们已经为目录绑定了"),Object(t["h"])("code",null,"anchor"),Object(t["g"])("事件。")])],-1),C=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"post-catalog"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"{hide: isCatalogFixed}"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"js-catalog"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-if"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-title"'),Object(t["g"])(">")]),Object(t["g"])("目录"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalog-body"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-html"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@click.prevent"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"anchor($event)"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("anchor(event:any) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(event?.target.nodeName === "),Object(t["h"])("span",{class:"hljs-string"},"'A'"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" href:string = event.target.attributes?.href?.value\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" anchorName:string = href.substring("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(", href.length)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" anchorEle = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById(anchorName)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ( anchorEle ) {\n            anchorEle.scrollIntoView({"),Object(t["h"])("span",{class:"hljs-attr"},"behavior"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"smooth"'),Object(t["g"])("})\n        }\n    }\n}\n")])],-1),I=Object(t["h"])("p",null,"至此，可以锚定的目录就已经做好啦~~~",-1),E=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2021-07-04/2.jpg",style:{border:"1px solid #ededed"}},null,-1);function A(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E])}const D={};D.render=A;s["default"]=D},"6a7c":function(e,s,c){},"6e25":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>Promise是一种处理异步代码的方式，避免了JS异步处理时会陷入回调地狱的模式。我们接下来就在了解Promise基本用法的同时，逐步完成Promise的手写。</p><h2>一. Promise的基本特点</h2><p>Promise实例包含有一些状态的管理和变迁，是Promise的基础</p><h3>1. promise的状态</h3><p>Promise有两个基本特点：</p><ul><li><strong>状态不受外界影响</strong>：<code>Promise</code>代表一个异步操作，有<code>pending(进行中)</code>、<code>fulfilled(已成功)</code>、<code>rejected(已失败)</code>三种状态。初始状态为<code>pending</code>，只有异步操作的结果可以决定当前的状态，其他任何操作都无法决定或改变这个状态</li><li><strong>状态一旦改变，不会再变</strong>：只要<code>Promise</code>的状态发生了改变，就不会再变了，会一直保持这个结果。</li></ul><p>我们可以用<code>Class</code>来实现，定义一些静态状态，在构造函数内设置初始化状态</p>",7),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 管理静态的Promise状态"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("() {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 初始状态就是pending"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n    }\n}\n")])],-1),a=Object(t["f"])("<h3>2. resolve和reject</h3><p>Promise构造函数接受一个函数作为参数，如果没有传入会报错，该函数有两个参数分别是<code>resolve</code>和<code>reject</code>，这两个函数，由<code>JavaScript</code>引擎提供，不用自己部署。</p><ul><li><strong>resolve</strong>：将<code>Promise</code>对象的状态从<code>pending</code>转换为<code>fulfilled</code>，在异步操作成功时调用，并将异步操作的结果，作为参数传递出去</li><li><strong>reject</strong>：将<code>Promise</code>对象的状态从<code>pending</code>转换为<code>rejected</code>，在异步操作失败时调用，并将异步操作中报出的错误，作为参数传递出去。</li></ul><p>针对这些特点，手写Promise时，我们可以在构造函数内传入执行函数作为参数，并且在<code>Class</code>中定义<code>Promise</code>的方法<code>resolve</code>和<code>reject</code>，在这两个方法中改变<code>Promise</code>的状态</p>",4),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(fn) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n        fn("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".resolve, "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject)\n    } \n    resolve() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.FULFILLED\n        }\n    }\n    reject() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.REJECTED\n        }\n    }\n}\n")])],-1),b=Object(t["h"])("p",null,[Object(t["g"])("在原生"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("中，执行"),Object(t["h"])("code",null,"resolve()"),Object(t["g"])("和"),Object(t["h"])("code",null,"reject()"),Object(t["g"])("的时候可以传入一个参数，在Promise实例执行后就可以使用这个参数，作为回调结果。")],-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" promise = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    resolve("),Object(t["h"])("span",{class:"hljs-string"},"'go'"),Object(t["g"])(")\n})\n")])],-1),o=Object(t["h"])("p",null,[Object(t["g"])("那在手写"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("时，我们就可以将这个回调结果定义为"),Object(t["h"])("code",null,"promiseResult"),Object(t["g"])("，在"),Object(t["h"])("code",null,"resolve"),Object(t["g"])("和"),Object(t["h"])("code",null,"reject"),Object(t["g"])("中将结果赋值给这个变量")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(fn) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        fn("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".resolve, "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject)\n    } \n    resolve(result) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.FULFILLED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = result\n        }\n    }\n    reject(reason) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.REJECTED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = reason\n        }\n    }\n}\n")])],-1),r=Object(t["h"])("p",null,"写到这里，我们来直接试运行一下：",-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{ ... }\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    resolve("),Object(t["h"])("span",{class:"hljs-string"},"'go'"),Object(t["g"])(")\n})\n")])],-1),p=Object(t["h"])("p",null,"最终的输出是：",-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 报错：Uncaught TypeError: Cannot read property 'PromiseState ' of undefined"),Object(t["g"])("\n")])],-1),d=Object(t["f"])("<p>会发现，我们的<code>resolve</code>和<code>reject</code>在执行的时候，<code>this</code>已经丢了，所以会导致<code>constructor</code>定义的<code>promiseState</code>变成了<code>undefined</code>。原因是我们<code>new</code>一个新实例的时候执行的是<code>constructor</code>里面的内容，<code>constructor</code>里面的<code>this</code>确实是新实例的，但现在我们是在实例被创建后，调用<code>resolve</code>方法的，不是在<code>class</code>内部执行的，因此会报错。这里我们做个修正，给<code>resolve</code>和<code>reject</code>方法绑定<code>this</code>为当前实例</p>",1),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(fn) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        fn("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".resolve.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("), "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("))\n    } \n    resolve(result) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.FULFILLED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = result\n        }\n    }\n    reject(reason) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.REJECTED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = reason\n        }\n    }\n}\n")])],-1),m=Object(t["h"])("p",null,"测试一下我们的手写promise",-1),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 测试代码"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    resolve("),Object(t["h"])("span",{class:"hljs-string"},"'go'"),Object(t["g"])(");\n})\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(p1); \n"),Object(t["h"])("span",{class:"hljs-comment"},"// myPromise {PromiseState: 'fulfilled', PromiseResult: 'go'}"),Object(t["g"])("\n")])],-1),f=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-20/1.png",style:{display:"inline-block","margin-bottom":"16px",width:"500px"}},null,-1),w=Object(t["h"])("h3",null,"3. 执行异常",-1),k=Object(t["h"])("p",null,[Object(t["g"])("执行异常就是，在谈到"),Object(t["h"])("code",null,"reject"),Object(t["g"])("的时候，有说"),Object(t["h"])("strong",null,"在异步操作失败时调用reject，并将异步操作中报出的错误，作为参数传递出去"),Object(t["g"])("。因此我们在手写Promise中，就可以在执行函数的时候用"),Object(t["h"])("code",null,"try/catch"),Object(t["g"])("包起来，"),Object(t["h"])("code",null,"catch"),Object(t["g"])("方法内调用"),Object(t["h"])("code",null,"reject")],-1),v=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(fn) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n            fn("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".resolve.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("), "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("))\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject(e)\n        }\n    } \n    resolve(result) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.FULFILLED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = result\n        }\n    }\n    reject(reason) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.REJECTED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = reason\n        }\n    }\n}\n")])],-1),x=Object(t["h"])("p",null,[Object(t["g"])("我们来测试一下，在"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("中抛出异常")],-1),S=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{ ... }\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Error"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'there is an error'"),Object(t["g"])(")\n})\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(p1)\n")])],-1),P=Object(t["f"])('<img src="https://zhangmingemma.github.io/dist/images/2022-10-20/3.png" style="display:inline-block;margin-bottom:16px;width:500px;"><h2>二. then</h2><p>then创建实例后再进行调用的，是在<code>Promise</code>原型对象上定义的方法</p><h3>1. then基本实现</h3><p>then是在<code>Promise</code>实例状态发生改变时的回调函数。<code>then</code>接受两个函数作为参数，这两个参数是可选的。</p><ul><li><strong>第一个回调是resolve后调用的</strong>：将<code>resolve</code>传出的参数作为这个函数的参数</li><li><strong>第二个回调是reject后调用的</strong>：将<code>reject</code>传出的参数作为这个函数的参数</li></ul><p>已知这些之后，我们将then的两个参数分别定义为<code>onFulfilled</code>、<code>onRejected</code>，<code>onFulfilled</code>是在<code>resolve</code>之后执行的，也就是状态时<code>fulfilled</code>时执行，同样的<code>onRejected</code>是在<code>rejected</code>状态时执行的。我们之前得到的回调结果<code>promiseResult</code>作为<code>onFulfilled</code>和<code>onRejected</code>的参数</p>',7),_=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    ...\n    then(onFulfilled, onRejected) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.FULFILLED) {\n            onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.REJECTED) {\n            onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n        }\n    }\n}\n")])],-1),C=Object(t["h"])("p",null,"执行测试代码",-1),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{...}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    resolve("),Object(t["h"])("span",{class:"hljs-string"},"'go'"),Object(t["g"])(")\n    reject("),Object(t["h"])("span",{class:"hljs-string"},"'reject'"),Object(t["g"])(")\n})\np1.then(\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(res)\n    },\n    rea => {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(rea)\n    }\n)\n")])],-1),I=Object(t["h"])("p",null,"执行结果",-1),E=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},"go\n")],-1),A=Object(t["f"])("<p>可以看到，我们在<code>resolve</code>执行之后，状态改变为<code>fulfilled</code>，执行<code>then</code>第一个参数的函数，之后的<code>reject</code>方法就没有再执行了，这也印证了我们最开始提到的<code>Promise</code>的<strong>状态一旦被改变，就不会发生二次修改</strong>。</p><h3>2. then参数校验</h3><p>**Promise的<code>then</code>方法，两个参数如果不是函数的话就要被忽略。**忽略并不是什么都不做，而是将最后的结果原封不动的返回。</p>",3),D=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Error"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'reject'"),Object(t["g"])(")\n})\np1.then("),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])(", reason => { "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'rejected:'"),Object(t["g"])(", reason) })\n"),Object(t["h"])("span",{class:"hljs-comment"},"//rejected: Error: reject"),Object(t["g"])("\n")])],-1),M=Object(t["h"])("p",null,[Object(t["g"])("原生"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("不会有报错，可以顺利执行，因此，我们需要对"),Object(t["h"])("code",null,"then"),Object(t["g"])("的参数进行校验")],-1),N=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    ...\n    then(onFulfilled, onRejected) {\n        onFulfilled = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onFulfilled\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"value"),Object(t["g"])(" =>")]),Object(t["g"])(" value\n        onRejected = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onRejected\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"reason"),Object(t["g"])(" =>")]),Object(t["g"])(" { "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(" reason }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.FULFILLED) {\n            onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.REJECTED) {\n            onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n        }\n    }\n}\n")])],-1),F=Object(t["f"])("<h2>三. 实现异步</h2><p>Promise最主要的就是异步能力，Promise的执行顺序有以下几个特点：</p><ul><li><strong>Promise会立即执行</strong></li><li><strong>Promise的<code>then</code>会加入微任务队列</strong>，全局逻辑执行结束之后，再逐次执行</li><li><strong>Promise的<code>then</code>会判断实例状态，如果处于pending状态，会将回调函数加入执行队列，等到状态变化后，继续执行</strong></li></ul>",3),R=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(");\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" promise1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(");\n    resolve("),Object(t["h"])("span",{class:"hljs-string"},"'这次一定'"),Object(t["g"])(");\n})\npromise1.then(\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"result"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled:'"),Object(t["g"])(", result);\n    },\n    reason => {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'rejected:'"),Object(t["g"])(", reason)\n    }\n)\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(");\n")])],-1),V=Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-20/4.png",style:{display:"inline-block","margin-bottom":"16px",width:"500px"}},null,-1),B=Object(t["h"])("p",null,"可以看到Promise.then中是存在异步执行的，因此我们再手写的Promise需要加入异步操作",-1),L=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(fn) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n            fn("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".resolve.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("), "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("))\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject(e)\n        }\n    } \n    resolve(result) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.FULFILLED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = result\n        }\n    }\n    reject(reason) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.REJECTED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = reason\n        }\n    }\n    then(onFulfilled, onRejected) {\n        onFulfilled = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onFulfilled\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"value"),Object(t["g"])(" =>")]),Object(t["g"])(" value\n        onRejected = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onRejected\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"reason"),Object(t["g"])(" =>")]),Object(t["g"])(" { "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(" reason }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.FULFILLED) {\n            setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n            })\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.REJECTED) {\n            setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n            })\n        }\n    }\n}\n")])],-1),z=Object(t["h"])("p",null,[Object(t["g"])("我们来测试一下"),Object(t["h"])("code",null,"myPromise"),Object(t["g"])("的执行顺序，是否和原生"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("的执行顺序一致。测试之后和原生promise的执行顺序一致")],-1),q=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(");\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" promise1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(");\n    resolve("),Object(t["h"])("span",{class:"hljs-string"},"'这次一定'"),Object(t["g"])(");\n})\npromise1.then(\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"result"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled:'"),Object(t["g"])(", result);\n    },\n    reason => {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'rejected:'"),Object(t["g"])(", reason)\n    }\n)\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(");\n")])],-1),H=Object(t["h"])("p",null,[Object(t["g"])("那对于更复杂的情况，"),Object(t["h"])("code",null,"resolve"),Object(t["g"])("内添加"),Object(t["h"])("code",null,"setTimeout"),Object(t["g"])("，使得"),Object(t["h"])("code",null,"resolve"),Object(t["g"])("也异步执行，那和"),Object(t["h"])("code",null,"then"),Object(t["g"])("一起异步，究竟是谁先会被调用？")],-1),G=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(");\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" promise1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(");\n    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        resolve("),Object(t["h"])("span",{class:"hljs-string"},"'这次一定'"),Object(t["g"])(");\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(")\n    })\n})\npromise1.then(\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"result"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled:'"),Object(t["g"])(", result);\n    },\n    reason => {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'rejected:'"),Object(t["g"])(", reason)\n    }\n)\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(");\n")])],-1),J=Object(t["f"])('<img src="https://zhangmingemma.github.io/dist/images/2022-10-20/5.png" style="display:inline-block;margin-bottom:16px;width:500px;"><p>这里我们分析整个逻辑运行：</p><ul><li>顺次执行逻辑<code>console.log(1)</code></li><li><code>Promise</code>的执行函数会立刻执行，顺次执行逻辑<code>console.log(2)</code></li><li>遇到<code>setTimeout</code>之后，将<code>setTimeout</code>内的执行函数加入<strong>宏任务队列</strong></li><li>遇到<code>then</code>之后，将<code>then</code>内的执行函数加入<strong>微任务队列</strong></li><li>顺次执行逻辑<code>console.log(3)</code></li><li>全部顺次逻辑执行后，再执行微任务，即<code>then</code>的执行函数。但注意！此时我们<code>Promise</code>的状态仍旧是<code>pending</code>，因此无法执行<code>then</code>中的函数</li><li>再执行宏任务<code>setTimeout</code>中的执行函数，那我们看最终的结果来看是先执行<code>console.log(4)</code>再执行<code>resolve</code>的输出，那说明在原生<code>Promise</code>中，<strong>resolve也是一个异步的执行</strong>，其次是<strong>resolve之后还也可以执行回调函数</strong></li></ul><p>因此，我们在手写<code>Promise</code>的<code>resolve</code>中也要加上 <strong>resolve也是一个异步的执行</strong>，<strong>resolve之后还也可以执行回调函数</strong>这两个点。因此，就是 <strong>then判断Promise的状态为pending的时候，就把回调函数添加到回调函数组，在执行到resolve之后，异步将回调函数组内函数再执行</strong>。同样的逻辑也适用于<code>reject</code></p>',4),U=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(fn) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks = [] "),Object(t["h"])("span",{class:"hljs-comment"},"// 保存成功回调"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks = []  "),Object(t["h"])("span",{class:"hljs-comment"},"// 保存失败回调"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n            fn("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".resolve.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("), "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("))\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject(e)\n        }\n    } \n    resolve(result) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.FULFILLED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = result\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 执行回调队列中的函数"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"callback"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                callback(result)\n            })\n        }\n    }\n    reject(reason) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.REJECTED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = reason\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 执行回调队列中的函数"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"callback"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                callback(reason)\n            })\n        }\n    }\n    then(onFulfilled, onRejected) {\n        onFulfilled = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onFulfilled\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"value"),Object(t["g"])(" =>")]),Object(t["g"])(" value\n        onRejected = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onRejected\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"reason"),Object(t["g"])(" =>")]),Object(t["g"])(" { "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(" reason }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.FULFILLED) {\n            setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n            })\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.REJECTED) {\n            setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n            })\n        }\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 判断pending状态，将异步的执行函数加入执行队列"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                })   \n            })\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                })   \n            })\n        }\n    }\n}\n")])],-1),$=Object(t["h"])("p",null,[Object(t["g"])("我们来进行一下测试，看看最终的输出结果是和原生"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("的输出结果相同")],-1),W=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(");\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" promise1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(");\n    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        resolve("),Object(t["h"])("span",{class:"hljs-string"},"'这次一定'"),Object(t["g"])(");\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(")\n    })\n})\npromise1.then(\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"result"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled:'"),Object(t["g"])(", result);\n    },\n    reason => {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'rejected:'"),Object(t["g"])(", reason)\n    }\n)\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(");\n")])],-1),K=Object(t["f"])("<h2>四. then链式调用</h2><p>我们知道<code>Promise</code>最厉害的点就是可以实现<code>链式调用</code>，解决回调地狱。</p><ul><li><strong>then返回一个Promise实例</strong></li><li><strong>then可以实现链式调用</strong>，将第一层resolve可以传递给下一层执行</li></ul><p>举个简单的链式调用的例子</p>",4),X=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" p1 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    resolve("),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])(")\n})\np1.then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])(", res);\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(" * res\n}).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])(", res)\n})\n")])],-1),Y=Object(t["h"])("p",null,"最终的输出",-1),Q=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"fulfilled 100\nfulfilled 200\n")],-1),Z=Object(t["h"])("h3",null,"1. then返回一个Promise实例",-1),ee=Object(t["h"])("p",null,[Object(t["g"])("我们来实现手写"),Object(t["h"])("code",null,"Promise"),Object(t["g"])("这一部分，首先是"),Object(t["h"])("strong",null,"then返回一个Promise实例")],-1),se=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    ...\n    then(onFulfilled, onRejected) {\n        onFulfilled = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onFulfilled\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"value"),Object(t["g"])(" =>")]),Object(t["g"])(" value\n        onRejected = "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])("\n            ? onRejected\n            : "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"reason"),Object(t["g"])(" =>")]),Object(t["g"])(" { "),Object(t["h"])("span",{class:"hljs-keyword"},"throw"),Object(t["g"])(" reason }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" promise = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.FULFILLED) {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                })\n            }\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.REJECTED) {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                })\n            }\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 判断pending状态，将异步的执行函数加入执行队列"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                        onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                    })   \n                })\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                        onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                    })   \n                })\n            }\n        })\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" promise\n    }\n}\n")])],-1),ce=Object(t["f"])("<h3>2. Promise的冒泡</h3><p>其次，就是<strong>then的返回结果传递给下一层then</strong>，这里实现上我们用一个封装的函数来处理下一层的<code>resolve</code>和<code>reject</code>。这里我们封装一个<code>resolvePromise</code>函数来做这件事情。额外需要注意的是，<strong>Promise对象的错误是具有<code>冒泡</code>性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。Catch方法也会返回一个Promise对象，因此后面还可以继续调用<code>then</code>方法。</strong></p>",2),te=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    ...\n    then(onFulfilled, onRejected) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" promise = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.FULFILLED) {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                            resolve("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            resolvePromise(promise, x, resolve, reject)\n                        }\n                    } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                        "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                        reject(e)\n                    }\n                })\n            }\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.REJECTED) {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                            reject("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            resolvePromise(promise, x, resolve, reject)\n                        }\n                    } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                        "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                        reject(e)\n                    }\n                })\n            }\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 判断pending状态，将异步的执行函数加入执行队列"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                                resolve("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                                "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                                resolvePromise(promise, x, resolve, reject)\n                            }\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                            "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                            reject(e)\n                        }\n                    }) \n                })\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                                reject("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                                "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                                resolvePromise(promise, x, resolve, reject)\n                            }\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                            "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                            reject(e)\n                        }\n                    })\n                })\n            }\n        })\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" promise\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"resolvePromise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"promise, x, resolve, reject"),Object(t["g"])(") ")]),Object(t["g"])("{}\n")])],-1),ne=Object(t["h"])("p",null,"那接下来就是如何去封装resolvePromise，让resolve和reject",-1),le=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"resolvePromise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"promise, x, resolve, reject"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (x "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(" myPromise) {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果x也是一个promise实例，那就让promise接收x的状态，继续执行"),Object(t["g"])("\n        x.then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"y"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n            resolvePromise(promise, y, resolve, reject)\n        }, reject)\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ( x != "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" && ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" x == "),Object(t["h"])("span",{class:"hljs-string"},"'object'"),Object(t["g"])(" || "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" x == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(")) {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果x是一个执行函数，或是一个值，那就直接执行then"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" then = x.then\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" then == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                then.call(\n                    x,\n                    y => {\n                        resolvePromise(promise, y, resolve, reject)\n                    },\n                    r => {\n                        reject(r)\n                    }\n                )\n            } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                reject(e)\n            }\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            resolve(x)\n        }\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" resolve(x)\n    }\n}\n\n")])],-1),ae=Object(t["h"])("p",null,"基于此，我们再给出一个示例来测试",-1),je=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" p2 = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    resolve("),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])(")\n})\n\np2.then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])(", res);\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" resolve("),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(" * res))\n}).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])(", res)\n})\n")])],-1),be=Object(t["h"])("p",null,"最终输出，可以看到可以最终实现链式调用",-1),he=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("fulfilled "),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])("\nfulfilled "),Object(t["h"])("span",{class:"hljs-number"},"300"),Object(t["g"])("\n")])],-1),oe=Object(t["h"])("p",null,"给出，我们最终的Promise的代码",-1),Oe=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"myPromise"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" PENDING = "),Object(t["h"])("span",{class:"hljs-string"},"'pending'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" FULFILLED = "),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"static"),Object(t["g"])(" REJECTED = "),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("(fn) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.PENDING\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks = [] "),Object(t["h"])("span",{class:"hljs-comment"},"// 保存成功回调"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks = []  "),Object(t["h"])("span",{class:"hljs-comment"},"// 保存失败回调"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n            fn("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".resolve.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("), "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject.bind("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("))\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".reject(e)\n        }\n    } \n    resolve(result) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.FULFILLED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = result\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 执行回调队列中的函数"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"callback"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                callback(result)\n            })\n        }\n    }\n    reject(reason) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState = myPromise.REJECTED\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult = reason\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 执行回调队列中的函数"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"callback"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                callback(reason)\n            })\n        }\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(onRejected) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".then("),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(", onRejected)\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"finally"),Object(t["g"])("(callback) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".then(callback, callback)\n    }\n    then(onFulfilled, onRejected) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" promise = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" myPromise("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.FULFILLED) {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                            resolve("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            resolvePromise(promise, x, resolve, reject)\n                        }\n                    } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                        "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                        reject(e)\n                    }\n                })\n            }\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.REJECTED) {\n                setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                            reject("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            resolvePromise(promise, x, resolve, reject)\n                        }\n                    } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                        "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                        reject(e)\n                    }\n                })\n            }\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 判断pending状态，将异步的执行函数加入执行队列"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseState == myPromise.PENDING) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onFulfilledCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onFulfilled != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                                resolve("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                                "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onFulfilled("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                                resolvePromise(promise, x, resolve, reject)\n                            }\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                            "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                            reject(e)\n                        }\n                    }) \n                })\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".onRejectedCallbacks.push("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" onRejected != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                                reject("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                            } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                                "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" x = onRejected("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".promiseResult)\n                                resolvePromise(promise, x, resolve, reject)\n                            }\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                            "),Object(t["h"])("span",{class:"hljs-comment"},"// 接收抛出的异常"),Object(t["g"])("\n                            reject(e)\n                        }\n                    })\n                })\n            }\n        })\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" promise\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"resolvePromise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"promise, x, resolve, reject"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (x "),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(" myPromise) {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果x也是一个promise实例，那就让promise接收x的状态，继续执行"),Object(t["g"])("\n        x.then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"y"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n            resolvePromise(promise, y, resolve, reject)\n        }, reject)\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ( x != "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" && ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" x == "),Object(t["h"])("span",{class:"hljs-string"},"'object'"),Object(t["g"])(" || "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" x == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(")) {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 如果x是一个执行函数，或是一个值，那就直接执行then"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" then = x.then\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" reject(e)\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" then == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" called = "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// 避免多次调用"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"try"),Object(t["g"])(" {\n                then.call(\n                    x,\n                    y => {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(called) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])("\n                        called = "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])("\n                        resolvePromise(promise, y, resolve, reject)\n                    },\n                    r => {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (called) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" \n                        called = "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])("\n                        reject(r)\n                    }\n                )\n            } "),Object(t["h"])("span",{class:"hljs-keyword"},"catch"),Object(t["g"])("(e) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (called) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" \n                called = "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])("\n                reject(e)\n            }\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            resolve(x)\n        }\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" resolve(x)\n    }\n}\n")])],-1),re=Object(t["f"])("<h2>五. Promise的其他方法</h2><h3>1. Promise.all</h3><p>Promise.all是ES6对象上的一个方法，它的功能是将多个<code>Promise</code>实例包装成一个<code>Promise</code>实例</p><ul><li><strong>返回值是一个promise实例</strong></li><li><strong>接收一个可遍历的数据容器，每个元素都是promise实例</strong>，那如果不是promise实例，就会将其转换为promise实例之后再实现</li><li><strong>数组中每个实例都成功，promise.all才成功，所有resolve结果是promise.all的resolve结果</strong></li><li><strong>数组中任一实例失败，promise.all就失败，第一个reject结果就是promise.all的reject结果</strong></li></ul><p>因此我们的手动实现就是</p>",5),ge=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".prototype._all = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"promises"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" resArr = [], count = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        promises.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item, index"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".resolve(item).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                resArr[index] = res\n                count += "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (count == promises.length) resolve(resArr)\n            }).catch(reject)\n        })\n    })\n}\n")])],-1),pe=Object(t["f"])("<h3>2. Promise.any</h3><p>Promise.all是ES6对象上的一个方法，它的功能是将多个<code>Promise</code>实例包装成一个<code>Promise</code>实例</p><ul><li><strong>返回值是一个promise实例</strong></li><li><strong>接收一个可遍历的数据容器，每个元素都是promise实例</strong>，那如果不是promise实例，就会将其转换为promise实例之后再实现</li><li><strong>数组中任一实例成功，promise.any就成功，第一个resolve结果是promise.any的resolve结果</strong></li><li><strong>数组中全部实例失败，promise.any就失败，reject结果是AggregateError</strong></li></ul>",3),ie=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".prototype._any = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"promises"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" resArr = [], count = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        promises.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item, index"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".resolve(item).then(resolve).catch(e) {\n                count += "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (count == promises.length) reject("),Object(t["h"])("span",{class:"hljs-string"},"'AggregateError'"),Object(t["g"])(")\n            }\n        })\n    })\n}\n")])],-1),de=Object(t["h"])("h3",null,"3. Promise.race",-1),ue=Object(t["h"])("p",null,"不论成功与否，第一个Promise的结果就是Promise.race的结果，不论成功与否",-1),me=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".prototype._race = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"promises"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        promises.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item, index"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".resolve(item).then(resolve).catch(reject)\n        })\n    })\n}\n")])],-1),ye=Object(t["h"])("h3",null,"4. Promise.allSettled",-1),fe=Object(t["h"])("p",null,"所有Promise实例全部执行完之后再执行下一步操作",-1),we=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".prototype._allSettled = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"promises"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" resArr = [], count += "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        promises.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item, index"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".resolve(item).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                resArr[index] = {"),Object(t["h"])("span",{class:"hljs-attr"},"status"),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-string"},"'fulfilled'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(":res}\n                count += "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (count == promises.length) resolve(resArr)\n            }).catch("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                resArr[index] = {"),Object(t["h"])("span",{class:"hljs-attr"},"status"),Object(t["g"])(":"),Object(t["h"])("span",{class:"hljs-string"},"'rejected'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(": e}\n                count += "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (count == promises.length) resolve(resArr)\n            })\n        })\n    })\n}\n")])],-1);function ke(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E,A,D,M,N,F,R,V,B,L,z,q,H,G,J,U,$,W,K,X,Y,Q,Z,ee,se,ce,te,ne,le,ae,je,be,he,oe,Oe,re,ge,pe,ie,de,ue,me,ye,fe,we])}const ve={};ve.render=ke;s["default"]=ve},"73df":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-meta"},[Object(t["g"])("<!DOCTYPE "),Object(t["h"])("span",{class:"hljs-meta-keyword"},"html"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"html"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"head"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"meta"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"charset"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"utf-8"'),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"title"),Object(t["g"])(">")]),Object(t["g"])("test"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"title"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"style"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"css"},[Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-selector-class"},".triangle1"),Object(t["g"])(" {\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"border-style"),Object(t["g"])(": solid;\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"border-width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"50px"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"border-color"),Object(t["g"])(": transparent transparent red transparent;\n            }\n\n            "),Object(t["h"])("span",{class:"hljs-selector-class"},".triangle2"),Object(t["g"])(" {\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"border"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"50px"),Object(t["g"])(" solid transparent;\n                "),Object(t["h"])("span",{class:"hljs-attribute"},"border-top-color"),Object(t["g"])(": red;\n            }  \n        ")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"style"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"head"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"body"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"triangle1"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"triangle2"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"body"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"html"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}c("942d");const a={};a.render=l;s["default"]=a},"798a":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"清除浮动是指清除由于子元素浮动带来的父元素高度塌陷的影响，我们先来看看存在浮动的样式。",-1),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"style"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"css"},[Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-selector-class"},".container"),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"margin"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"50px"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"400px"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"background"),Object(t["g"])(": lightblue;\n}\n"),Object(t["h"])("span",{class:"hljs-selector-class"},".big"),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"float"),Object(t["g"])(": left;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"200px"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"200px"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"background"),Object(t["g"])(": orange;\n}\n"),Object(t["h"])("span",{class:"hljs-selector-class"},".small"),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"float"),Object(t["g"])(": left;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"width"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"100px"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"100px"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"background"),Object(t["g"])(": blueviolet;\n}\n")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"style"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"body"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"big"'),Object(t["g"])(">")]),Object(t["g"])("big"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"small"'),Object(t["g"])(">")]),Object(t["g"])("small"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"body"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),a=Object(t["h"])("div",{style:{display:"flex"}},[Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-12/2.png",style:{display:"inline-block","margin-bottom":"16px",width:"500px"}})],-1),j=Object(t["h"])("p",null,"可以看到因为浮动的元素，父容器没有被撑开，背景色没有展示出来",-1),b=Object(t["h"])("h4",null,[Object(t["g"])("1. "),Object(t["h"])("code",null,"clear:both")],-1),h=Object(t["h"])("p",null,[Object(t["g"])("本质就是添加一个元素，这个元素设置成"),Object(t["h"])("code",null,"clear:both"),Object(t["g"])("，来清除浮动")],-1),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"style"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"css"},[Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-selector-class"},".clear"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attribute"},"clear"),Object(t["g"])(": both;\n    }\n")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"style"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"body"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"container"'),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"big"'),Object(t["g"])(">")]),Object(t["g"])("big"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"small"'),Object(t["g"])(">")]),Object(t["g"])("small"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"clear"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"body"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),O=Object(t["h"])("div",{style:{display:"flex"}},[Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-12/3.png",style:{display:"inline-block","margin-bottom":"16px",width:"500px"}})],-1),r=Object(t["h"])("p",null,[Object(t["g"])("显式添加元素，来设置"),Object(t["h"])("code",null,"clear:both"),Object(t["g"])("可能不是很方便，那我们可以通过添加伪类来达到相同的目的")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-css"},[Object(t["h"])("span",{class:"hljs-selector-class"},".container"),Object(t["h"])("span",{class:"hljs-selector-pseudo"},":after"),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"clear"),Object(t["g"])(": both;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"content"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"display"),Object(t["g"])(": block;\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-attribute"},"visibility"),Object(t["g"])(": hidden;\n}\n")])],-1),p=Object(t["h"])("h4",null,[Object(t["g"])("2. "),Object(t["h"])("code",null,"overflow:hidden")],-1),i=Object(t["h"])("p",null,[Object(t["g"])("在父元素中设置"),Object(t["h"])("code",null,"overflow:hidden"),Object(t["g"])("来形成一个"),Object(t["h"])("code",null,"BFC"),Object(t["g"])("清除浮动的影响")],-1);function d(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i])}c("a03b"),c("2a42");const u={};u.render=d;s["default"]=u},"7e0f":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"节流和防抖是JS最常用的两种函数方法，是为了防止函数被高频调用，控制函数的执行次数的。",-1),l=Object(t["h"])("h3",null,"1. 节流throttle",-1),a=Object(t["h"])("p",null,[Object(t["g"])("节流函数的原理是在"),Object(t["h"])("code",null,"wait"),Object(t["g"])("秒内仅执行一次，也就是说有一个时间阈值，阈值到了就会执行，更适用于屏幕尺寸变化、滚动条滚动这种的事件发生，是一个有克制地去节制的方法")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"throttle"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},[Object(t["g"])("fn, wait = "),Object(t["h"])("span",{class:"hljs-number"},"100")]),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"...args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])(".now() >= lasttime + wait ) {\n            fn.apply("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(", args)\n            lasttime = "),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])(".now()\n        }\n    }\n}\n")])],-1),b=Object(t["h"])("p",null,"在此基础上，如果想要第一次调用函数的时候，就可以立即执行，并且最后一次也执行",-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"throttle"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},[Object(t["g"])("fn, wait = "),Object(t["h"])("span",{class:"hljs-number"},"100")]),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" timerId, lasttime = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"...args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" curtime = +"),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])("()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (curtime >= lasttime + wait) {\n            fn.apply(slef, args)\n            lasttime = +"),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])("()\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (timerId) {\n                clearTimeout(timerId)\n                timerId = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n            }\n            timerId = setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n                fn.apply(self, args)\n            }, wait)\n        }\n    }\n}\n")])],-1),o=Object(t["f"])("<h3>2. 防抖debounce</h3><p>防抖函数的原理是从上一次调用后，延迟<code>wait</code>毫秒后调用<code>fn</code>方法，也就是说将频繁出发的事件合并成一次执行，<code>debounce</code>更适用于<code>input</code>输入校验、<code>input</code>输入发起<code>ajax</code>请求、限制鼠标连击这些事件。更适用于需要更大程度去限制频次的应用场景。</p>",2),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"debounce"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},[Object(t["g"])("fn, wait = "),Object(t["h"])("span",{class:"hljs-number"},"100")]),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" timerId\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"...args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (timerId) {\n            clearTimeout(timerId)\n            timerId = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        }\n        timerId = setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            fn.apply(self, args)\n        }, wait)\n    }\n}\n")])],-1),r=Object(t["h"])("p",null,[Object(t["g"])("在此基础上，具备立即执行、取消能力的"),Object(t["h"])("code",null,"debounce"),Object(t["g"])("的写法是")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"debounce"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},[Object(t["g"])("fn, wait = "),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])(", immediate")]),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" timerId\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" callback = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"...args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (timerId) {\n            clearTimeout(timerId)\n            timerId = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (immediate) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" callnow = !timerId\n            timerId = setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n                timerId = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n            },wait)\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (callnow) {\n                fn.apply(self, args)\n            }\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            timerId = setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n                fn.apply(self, args)\n            }, wait)\n        }\n    }\n    callback.cancel = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        clearTimeout(timerId)\n        timerId = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" callback\n}\n")])],-1);function p(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g])}const i={};i.render=p;s["default"]=i},"7e5f":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>GeoServer是 OpenGIS Web 服务器规范的 J2EE 实现，利用 GeoServer 可以方便的发布地图数据，允许用户对特征数据进行更新、删除、插入操作，通过 GeoServer 可以比较容易的在用户之间迅速共享空间地理信息。它兼容 WMS 和 WFS 特性；支持 PostgreSQL、 Shapefile 、 ArcSDE 、 Oracle 、 VPF 、 MySQL 、 MapInfo ；支持上百种投影；能够将网络地图输出为 jpeg 、 gif 、 png 、 SVG 、 KML 等格式；能够运行在任何基于 J2EE/Servlet 容器之上；嵌入 MapBuilder 支持 AJAX 的地图客户端OpenLayers；除此之外还包括许多其他的特性。</p><p><strong>JAVA环境安装配置</strong></p><ul><li><p>GeoServer需要JAVA环境，所以需要先安装<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank">JAVA JDK,比如本文下载的是8u152_x64</a>,这里我的安装路径为系统默认的C:\\Program Files\\Java <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20170831image1.png" alt> 安装之后会存在两个文件包分别是JDK的文件包和JRE的文件包</p></li><li><p>接下来为重要的环境变量配置！！！奉上一个<a href="http://blog.csdn.net/tiantang_1986/article/details/53894947" target="_blank">环境配置链接</a></p></li></ul><p>其中需要设置的环境变量为</p>',4),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":""},"JAVA_HOME：C:\\Program Files\\Java\\jre1.8.0_152\nCLASSPATH: .;%JAVA_HOME%\\jdk1.8.0_152\\lib\nPath: %JAVA_HOME%\\jdk1.8.0_152\\bin\n")],-1),a=Object(t["f"])('<ul><li>cmd命令输入java -version如果出现对应版本号，说明配置成功</li></ul><p><strong>GeoServer安装</strong></p><ul><li><p>首先下载，Stable版本的GeoServer无需安装TomCat等服务器，如果想要用TomCat来运行的话，选择下载Web Archive。<a href="http://geoserver.org/download/" target="_blank">GeoServer——Stable</a><img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20170831image2.png" alt></p></li><li><p>安装过程中就按照指令一步步安装就好了，其中需要注意的有：</p></li></ul><p>(1)首先，JRE的路径选择，JRE的路径为上文提到的C:\\Program Files\\Java下的C:\\Program Files\\Java\\jre1.8.0_144 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20170831image3.png" alt></p><p>(2)其次，GeoServer运行端口的选择，以及登录名和密码的设置</p><ul><li>以上都完成了之后，Start GeoServer，成功运行之后，浏览器打开http://localhost:7070/geoserver/web/，输入用户名密码之后便可操作</li></ul><p><strong>利用GeoServer发布WMS</strong></p><ul><li>新建工作区 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image1.png" alt></li></ul><p>命名工作区 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image2.png" alt></p><ul><li>新建数据存储， <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image3.png" alt></li></ul><p>这里选择的是shp文件 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image4.png" alt></p><p>发布该数据 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image5.png" alt></p><p>设置投影，并计算经纬度包围盒 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image6.png" alt></p><ul><li><p>新建样式，这里选择的是sld文件 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image7.png" alt></p></li><li><p>预览图层 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image8.png" alt></p></li></ul><p>输入样式名，显示对应样式下的WMS <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image9.png" alt></p>',15);function j(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a])}const b={};b.render=j;s["default"]=b},"827a":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖与它的对象都将得到状态改变的通知。</p><ul><li><strong>订阅者</strong>：把自己想订阅的事件注册到调度中心</li><li><strong>发布者</strong>：当发布者发布该事件到调度中心，也就是事件触发时，由调度中心统一调度度订阅者注册到调度中心的处理代码</li></ul><p>发布-订阅者模式的优点是对象之间的解耦，异步编程中，可以更松耦合的代码编写，缺点就是创建订阅者本身需要消耗一定的事件和内存，虽然可以弱化对象之间的联系，多个发布-订阅者嵌套的时候，程序难以跟踪维护</p><h3>1. 手写实现发布-订阅模式</h3><p>整体的发布-订阅模式的实现思路如下：</p><ul><li>创建一个类</li><li>在类里创建缓存列表（调度中心）</li><li><code>on</code>方法：用来把函数<code>fn</code>添加到缓存列表</li><li><code>emit</code>方法：取到<code>event</code>事件类型，根据<code>event</code>值去执行对应缓存列表中的函数</li><li><code>off</code>方法：可以根据<code>event</code>事件类型取消订阅</li></ul>",6),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-class"},[Object(t["h"])("span",{class:"hljs-keyword"},"class"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Observer"),Object(t["g"])()]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"constructor"),Object(t["g"])("() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message = {}\n    }\n    $on(type, callback) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type]) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type] = []\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type].push(callback)\n    }\n    $emit(type, callback) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type]) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" \n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type].forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"item"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" item == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(") {\n                item()\n            }\n        })\n    }\n    $off(type, callback) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type]) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" \n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!callback) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type] = "),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" \n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type] = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".message[type].filter("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"x"),Object(t["g"])(" =>")]),Object(t["g"])(" x != callback)\n    }\n}\n")])],-1);function a(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l])}const j={};j.render=a;s["default"]=j},"83f3":function(e,s,c){var t={"./2016-11-20-Cluster Paper Reading.md":"2863","./2016-12-03-Text Categorization Summary.md":"dda5","./2017-03-29-Python NLTK.md":"4ddc","./2017-08-31-Geoserver.md":"7e5f","./2019-07-16-Miniprogram Plugin.md":"32d2","./2021-07-03-Blog1.md":"9379","./2021-07-04-Blog2.md":"699a","./2021-07-05-Blog3.md":"3af7","./2022-10-11-BFC.md":"44f1","./2022-10-11-Triangle.md":"73df","./2022-10-12-Box.md":"0f04","./2022-10-12-CSS Performance Optimization.md":"0f23","./2022-10-12-Hide Elements.md":"798a","./2022-10-12-px em rem.md":"4f6e","./2022-10-13-OSI.md":"da8c","./2022-10-15-TCP-UDP.md":"deab","./2022-10-16-DNS.md":"a7cc","./2022-10-17-HTTP.md":"0ed1","./2022-10-18-UA.md":"2050","./2022-10-19-ES6 Data Type.md":"b328","./2022-10-20-Async.md":"2a30","./2022-10-20-Class.md":"092d","./2022-10-20-Generator.md":"ea27","./2022-10-20-Iterator.md":"b5c2","./2022-10-20-Promise.md":"6e25","./2022-10-20-Proxy.md":"cff1","./2022-10-21-Copy.md":"ba5d","./2022-10-21-New.md":"b244","./2022-10-21-Observer Watcher.md":"827a","./2022-10-21-Page Performance.md":"a545","./2022-10-21-call bind apply.md":"c612","./2022-10-21-carry.md":"9d29","./2022-10-21-throttle.md":"7e0f","./2022-10-22-Async Program.md":"51b5","./2022-10-23-prototype.md":"5789","./2022-10-26-Data Type Compute.md":"0f54","./2022-10-26-Data Type Transform.md":"baeb","./2022-10-26-Dom event.md":"ef34","./2022-10-26-bibao.md":"b5dd","./2022-10-26-queue.md":"9ba1","./2022-10-27-Ajax.md":"03b1","./2022-10-27-Module.md":"d558","./2022-10-28-Garbage.md":"14ae","./2022-10-29-Arguments.md":"2c22","./2022-10-29-URL To HTML Render.md":"c3bd","./2022-10-29-this.md":"3c31","./2022-10-31-Sort.md":"be58","./2022-11-01-Npm Pnpm Yarn.md":"9dde","./2022-11-01-Webpack Base Description.md":"45b2","./2022-11-12-Parent Child Contact.md":"f891","./2022-11-12-Vue MVVM MVC.md":"8f91","./2022-11-12-Vue2 Vue3.md":"e007","./2022-11-13-Reactive.md":"5f51","./2022-11-13-VDOM.md":"3c65","./2022-11-13-View Render.md":"67a4","./2022-11-16-Framework Selection.md":"c502","./2022-11-17-TS.md":"2e8a"};function n(e){var s=l(e);return c(s)}function l(e){if(!c.o(t,e)){var s=new Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}return t[e]}n.keys=function(){return Object.keys(t)},n.resolve=l,e.exports=n,n.id="83f3"},"8f91":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>MVVM(Model-View-ViewModel)，其中<code>Model</code>代表数据模型，定义数据操作的业务逻辑，<code>View</code>代表视图层，负责将数据模型渲染到页面上，<code>ViewModel</code>通过双向绑定把<code>View</code>和<code>Model</code>进行同步交互，不需要手动操作<code>DOM</code>的一种设计思想。</p><h3>一. MVVM</h3><p>MVVM的核心是<code>ViewModel</code>层，它就像是一个中转站，负责转换<code>Model</code>中的数据对象，让数据变得更容易管理和使用，<strong>该层向上与视图进行双向数据绑定，向下与Model层通过接口请求进行数据交互，起承上启下的作用。</strong></p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-11-12/1.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><ul><li><strong>View层</strong>：也就是视图层，也就是用户界面，前端主要由<code>HTML</code>、<code>CSS</code>来构建，为了更方便地展现<code>ViewModel</code>或<code>Model</code>层的数据，已经产生了各种各样的模板语言。</li><li><strong>ViewModel层</strong>：由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对后端获取的<code>Model</code>层数据进行转换处理，做二次封装，以生成符合<code>View</code>层使用预期的视图数据模型。需要注意的是<code>ViewModel</code>所封装出来的数据模型包括视图的状态和行为两部分，比如页面这一块展示什么属于视图状态。而页面加载进来时发生什么，点击发生什么，这些都属于视图交互。由于<code>ViewModel</code>实现双向绑定，<code>ViewModel</code>的内容就会实时展现在<code>View</code>层，就再也不必通过操作<code>DOM</code>去更新视图了。</li><li><strong>Model层</strong>：指数据模型，泛指后端进行的业务逻辑处理和数据操控，主要是围绕数据库系统展开</li></ul><h3>二. MVC</h3><p>MVC(Model-View-Controller)，是模型-视图-控制器的缩写，一种软件设计的典范</p><ul><li><strong>Model模型</strong>：处理应用程序数据逻辑的部分，通常模型对象负责在数据库中存取数据</li><li><strong>View视图</strong>：处理数据显示的部分，通常视图是依据数据模型创建的</li><li><strong>Controller控制器</strong>：数据模型和视图之间通信的桥梁，通常控制器负责从事图读取数据，控制用户输入，并向模型发送数据</li></ul><p>MVC的思想：Controller负责将Model的数据用View显示出来，换句话说就是在Controller里面把Model的数据赋值给View。</p><p>MVC的特点：实现关注点分离，即应用程序中的数据模型与业务和展示逻辑解耦。就是将模型和视图之间实现代码分离，松散耦合，使之成为一个更容易开发、维护和测试的客户端应用程序。</p>',10);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},9379:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>之前的博客是用jekyll写的，总觉得用起来很不顺手，所以重构了一遍，用vue3来写博客，没有后台，文章存储在项目文件夹内，逻辑简单。之所以没有用VuePress、Jekyll之类的模板，是为了更多能力能够自己定制，也是拿Vue3.0来练手一个项目。本篇主要讲解第一部分，从项目文件夹内读取文章列表，并抽析单篇文章的标题、时间戳、标签、摘要等信息，作为首页文章列表展示。</p><p>博客源码github: <a href="https://github.com/zhangmingemma/zhangmingemma.github.io" target="_blank">博客仓库地址</a>，读取列表的代码写在<code>ListHanlder.ts</code>中，文章标题解析写在<code>PostHandler.ts</code>中</p><h3>1. 获取文章列表</h3><p>我们封装一个整体的函数来获取文章列表信息，先用<code>require.context</code>获得文件夹内的文章列表文件名；再通过<code>axios</code> 来发起请求，获取本地文件，拿到Markdown文件的文本内容；最后通过函数<code>getPostInfo</code>解析获得单篇文章的基本信息。</p>',4),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" getAllPostContent = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" state = reactive({\n        "),Object(t["h"])("span",{class:"hljs-attr"},"postList"),Object(t["g"])(": [] "),Object(t["h"])("span",{class:"hljs-keyword"},"as"),Object(t["g"])(" IPost[]\n    })\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" files = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])(".context("),Object(t["h"])("span",{class:"hljs-string"},'"../../../public/posts"'),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(", /\\.md/)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (files && files.length) {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])(".all(files.keys().map("),Object(t["h"])("span",{class:"hljs-keyword"},"async"),Object(t["g"])(" (path:string) => {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" paths:string[] = path.split("),Object(t["h"])("span",{class:"hljs-string"},"'/'"),Object(t["g"])(")\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" fileName:string = paths.pop()!.replace("),Object(t["h"])("span",{class:"hljs-regexp"},"/\\.\\w+$/"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(")\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 博客部署到github后，访问的是域名根目录，因此这里需要重新定义线上环境访问dist/posts"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" baseUrl:string = process.env.NODE_ENV === "),Object(t["h"])("span",{class:"hljs-string"},'"production"'),Object(t["g"])(" ? "),Object(t["h"])("span",{class:"hljs-string"},'"./dist/posts"'),Object(t["g"])(" : "),Object(t["h"])("span",{class:"hljs-string"},'"./posts"'),Object(t["g"])(" \n            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" info:IPost = "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(" getSinglePost(fileName)\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" info\n        })).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"res"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            state.postList = res\n        })\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            ...toRefs(state)\n        }\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" getSinglePost = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"fileName:string"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" post:AxiosResponse = "),Object(t["h"])("span",{class:"hljs-keyword"},"await"),Object(t["g"])(" axios.get("),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`"),Object(t["h"])("span",{class:"hljs-subst"},"${getPostPath()}"),Object(t["g"])("/"),Object(t["h"])("span",{class:"hljs-subst"},"${fileName}"),Object(t["g"])(".md`")]),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" info:IPost = getPostInfo(post.data)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" info\n}\n")])],-1),a=Object(t["f"])("<p>关于Markdown的文件路径，有两点需要注意：</p><ul><li>Vue仅把 <code>public</code> 路径下的文件当做对外公开的目录，因此markdown文件必须要放在 <code>public</code> 文件夹下， <code>axios</code> 访问的文件根目录就是<code>public</code>。我这里所有的Markdown文件都放在了<code>public/posts</code>文件夹内。</li><li>博客<code>build</code>之后，<code>public</code>内的文件都会编译到<code>dist</code>文件夹内，部署到线上后，<code>axios</code>访问的根目录即项目文件，文章会访问不到。因此这里需要定义一下线上环境和生产环境的基础路径，线上为<code>./dist/posts</code>。</li></ul><h3>2. 解析文章标题、时间戳、标签</h3><p>首先，我们需要在markdown文件头部按照既定格式定义好标题、时间戳、标签，并注释掉，避免在文章渲染时将这些内容渲染出来</p>",4),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-comment"},"\x3c!-- ---\ntitle: Test Title\ndate: 2016-11-20 \ntags: Vue3.0, Javascript\n--- --\x3e")]),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-section"},"### 标题1"),Object(t["g"])("\n内容1\n\n"),Object(t["h"])("span",{class:"hljs-section"},"### 标题2"),Object(t["g"])("\n内容2\n")])],-1),b=Object(t["h"])("p",null,"接下来要做的就是用正则规则把头部的内容提取出来了",-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" getPostInfo = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"data:string, fileName:string"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!data) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {}\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" info:IPost = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": fileName }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" content:string = data.split("),Object(t["h"])("span",{class:"hljs-string"},"'\\n'"),Object(t["g"])(").map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"s"),Object(t["g"])(" =>")]),Object(t["g"])(" s.trim()).join("),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" layout:RegExpMatchArray|"),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" = content.match("),Object(t["h"])("span",{class:"hljs-regexp"},"/-+title: (.*?)date: (.*?)tags: (.*?)-+/"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (layout && layout.length >= "),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(") {\n        info["),Object(t["h"])("span",{class:"hljs-string"},"'title'"),Object(t["g"])("] = layout["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]\n        info["),Object(t["h"])("span",{class:"hljs-string"},"'date'"),Object(t["g"])("] = layout["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]\n        info["),Object(t["h"])("span",{class:"hljs-string"},"'tags'"),Object(t["g"])("] = layout["),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("].split("),Object(t["h"])("span",{class:"hljs-string"},"','"),Object(t["g"])(").map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"s"),Object(t["g"])(" =>")]),Object(t["g"])(" s.trim())\n    }\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 解析文章摘要"),Object(t["g"])("\n    info["),Object(t["h"])("span",{class:"hljs-string"},"'abstract'"),Object(t["g"])("] = getPostAbstract(data)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" info\n}\n")])],-1),o=Object(t["f"])('<h3>3. 解析文章摘要</h3><p>解析文章摘要主要用到的库是<a href="https://github.com/pdubroy/marked-ast" target="_blank">marked-ast</a>,它能够通过正则表达式将文章转换为AST语法树，文本类型包含<code>list</code>、<code>heading</code>、<code>paragraph</code>、<code>code</code>、<code>blockquote</code>等</p><blockquote><p>引用内容</p></blockquote>',3),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(t["h"])("span",{class:"hljs-section"},"### 标题1"),Object(t["g"])("\n文本内容\n"),Object(t["h"])("span",{class:"hljs-bullet"},"* "),Object(t["g"])("条目1\n\nconst a = 1 //代码块\n"),Object(t["h"])("span",{class:"hljs-quote"},"> 引用内容"),Object(t["g"])("\n")])],-1),r=Object(t["h"])("p",null,[Object(t["h"])("code",null,"marked-ast"),Object(t["g"])("解析后的AST语法树变成")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("[{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'标题1'"),Object(t["g"])("],\n    "),Object(t["h"])("span",{class:"hljs-attr"},"level"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("\n}, {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'paragraph'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'文本内容'"),Object(t["g"])("]\n}, {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'list'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"ordered"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"body"),Object(t["g"])(": [{\n        "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'listitem'"),Object(t["g"])(",\n        "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'条目1'"),Object(t["g"])("]\n    }]\n}, {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'code'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"code"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'const a = 1'"),Object(t["g"])("\n}, {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'blockquote'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"quote"),Object(t["g"])(": [{\n        "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'paragraph'"),Object(t["g"])(",\n        "),Object(t["h"])("span",{class:"hljs-attr"},"text"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'引用内容'"),Object(t["g"])("]\n    }]\n}]\n")])],-1),p=Object(t["h"])("p",null,"整理清楚之后，抽取摘要就非常容易了，我这里摘要限制500字，摘要内不展示代码，你也可以按照你的要求去解析语法树。",-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" markedAST = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'marked-ast'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" getPostAbstract = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"text:string"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ast:object[] = markedAST.parse(text.trim())\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" abstract:string = parseMarkAst(ast).slice("),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"500"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" abstract\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" parseMarkAst = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"ast:IAst[]"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" result:string = "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (ast && ast.length) {\n        ast.map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"astItem:IAst"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 解析平铺的文本段落"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (["),Object(t["h"])("span",{class:"hljs-string"},"'paragraph'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'heading'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'strong'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'em'"),Object(t["g"])("].indexOf(astItem.type) >= "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(") {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (astItem.text && astItem.text.length) {\n                    astItem.text.map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"textItem:IAst"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" textItem === "),Object(t["h"])("span",{class:"hljs-string"},"'string'"),Object(t["g"])(") {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" noSpaceText = text.replaceAll("),Object(t["h"])("span",{class:"hljs-string"},"'\\n'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(").trim()\n                            result += noSpaceText.replace("),Object(t["h"])("span",{class:"hljs-regexp"},"/<[^>]+>/g"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"' '"),Object(t["g"])(")\n                        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" textItem === "),Object(t["h"])("span",{class:"hljs-string"},"'object'"),Object(t["g"])(") {\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" text = textItem?.text?.["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]\n                            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("( text && "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" text === "),Object(t["h"])("span",{class:"hljs-string"},"'string'"),Object(t["g"])(") {\n                                result += text.replaceAll("),Object(t["h"])("span",{class:"hljs-string"},"'\\n'"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-string"},"''"),Object(t["g"])(").trim()\n                            }\n                        }\n                    })\n                }\n            }\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 解析嵌套列表"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (astItem.type === "),Object(t["h"])("span",{class:"hljs-string"},"'list'"),Object(t["g"])(" && astItem.body && astItem.body.length) {\n                astItem.body.map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"listItem:IAst"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (listItem.type === "),Object(t["h"])("span",{class:"hljs-string"},"'listitem'"),Object(t["g"])(") {\n                        result += parseMarkAst(astItem)\n                    }\n                })\n            } \n        })\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" result\n}\n")])],-1),d=Object(t["h"])("p",null,[Object(t["g"])("最终我们就可以获得摘要啦，图片展示的便是文件夹内的文章列表，抽取标题、时间戳、标签之后渲染为文章列表，进一步抽取摘要后渲染首页文章Block展示的效果~~~ "),Object(t["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2021-07-03/1.png",alt:""}),Object(t["g"])(" 以首页文章Block的展示为例")],-1),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-for"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"(post, index) in postList"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":key"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"index"'),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"article"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-if"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"post"'),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@click"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"tapPost(post.name)"'),Object(t["g"])(">")]),Object(t["g"])("{{post.title}}"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"abstract"'),Object(t["g"])(">")]),Object(t["g"])("{{post.abstract}}"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@click"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"tapPost(post.name)"'),Object(t["g"])(">")]),Object(t["g"])("点我阅读更多..."),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"a"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"footer"'),Object(t["g"])(">")]),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"footer-tags"'),Object(t["g"])(">")]),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"blog-tag"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"v-for"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"tag in post.tags"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":key"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"tag"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":tag"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"tag"'),Object(t["g"])(">")]),Object(t["g"])("{{tag}}"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("{{post.date}}"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"span"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"article"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(" defineComponent({\n    setup() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" router = useRouter()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" listHandler = getAllPostContent()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" tapPost = (name:string) {\n            setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n                "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".scrollTo({ "),Object(t["h"])("span",{class:"hljs-attr"},"top"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"behavior"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'smooth'"),Object(t["g"])("})\n            })\n            router.push("),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`/post?file="),Object(t["h"])("span",{class:"hljs-subst"},"${name}"),Object(t["g"])("`")]),Object(t["g"])(")\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            ...listHandler\n        }\n    }\n})\n")])],-1);function y(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m])}const f={};f.render=y;s["default"]=f},"942d":function(e,s,c){"use strict";c("05e0")},9460:function(e,s,c){"use strict";c.r(s);var t=c("1c18"),n=c.n(t);for(var l in c.d(s,"default",(function(){return n.a})),t)["default"].indexOf(l)<0&&function(e){c.d(s,e,(function(){return t[e]}))}(l)},"968f":function(e,s,c){},"9ba1":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>JavaScript从诞生起就是一门<code>单线程</code>的<code>非阻塞</code>的脚本语言，这是由于最初的用途就是用来与浏览器进行交互的。</p><ul><li><strong>单线程</strong>：<code>javascript</code>代码在执行的时候，都只有一个主线程来处理所有的任务。单线程是JS的基础，设想如果两个线程同时执行<code>DOM</code>操作，那应该如何处理？所以单线程是必要的，能够保证程序执行的一致性。</li><li><strong>非阻塞</strong>：当代码需要进行一项异步任务的时候，主线程会挂起这个任务，然后在异步任务返回结果的时候再根据一定的规则执行相应的回调。JS实现<strong>非阻塞</strong>依赖的就是<strong>事件循环</strong>。</li></ul><h3>1. 浏览器中的事件循环</h3><p><strong>JS是按照语句出现的顺序执行的</strong>：正常情况下JS的执行是按照语句出现的顺序来执行的，例如</p>",4),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-string"},"'1'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a) "),Object(t["h"])("span",{class:"hljs-comment"},"// 1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" b = "),Object(t["h"])("span",{class:"hljs-string"},"'2'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(b) "),Object(t["h"])("span",{class:"hljs-comment"},"// 2"),Object(t["g"])("\n")])],-1),a=Object(t["f"])("<p>所有的JS任务都是一个个顺序执行的，如果一个任务耗时太长，那后一个任务就一定会等着。但实际上，我们的网页加载其实并不需要等所有逻辑执行结束</p><p><strong>事件循环</strong>：js任务分为<strong>同步任务</strong>和<strong>异步任务</strong>两种类型。<code>同步任务</code>和<code>异步任务</code>分别进入不同的执行“场所”，<code>同步</code>的进入主线程，<code>异步</code>的进入任务队列；当主线程的事情完成后，会读取任务队列中的逻辑，以上过程不断重复，就是常说的事件循环</p><h3>2. 宏任务和微任务</h3><p>我们常见的宏任务包含</p><ul><li><strong><code>setTimeout</code></strong></li><li><strong><code>setInterval</code></strong></li></ul><p>我们常见的微任务包含</p><ul><li><strong><code>promise.then()</code></strong></li><li><strong><code>Async/Await()</code></strong></li><li><strong><code>queueMicrotask()</code></strong></li><li><strong><code>new MutationObserver()</code></strong></li></ul><p>具体的执行是，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或微任务队列中，在当前执行栈为空时，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈...如此反复，进入循环。<strong>微任务永远在宏任务之前执行</strong></p>",8),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n})\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve, reject"),Object(t["g"])(")")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\n    resolve("),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(")\n}).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"val"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(val)\n})\n")])],-1),b=Object(t["h"])("p",null,"执行结果为：",-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("p",null,"再来看一个更为复杂的题目",-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"test"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(")}, "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(");\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Promise"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"executor"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"resolve"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(");\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("( "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(" ; i<"),Object(t["h"])("span",{class:"hljs-number"},"10000"),Object(t["g"])(" ; i++ ) {\n            i == "),Object(t["h"])("span",{class:"hljs-number"},"9999"),Object(t["g"])(" && resolve();\n        }\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(");\n    }).then("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])(");\n    });\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(");\n})()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'script end'"),Object(t["g"])(")\n")])],-1),r=Object(t["h"])("p",null,"最终输出的结果是：",-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("\nscript end\n"),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])("\n")])],-1),p=Object(t["h"])("h3",null,"3. queueMicrotask",-1),i=Object(t["h"])("p",null,[Object(t["g"])("在JS中能够通过"),Object(t["h"])("code",null,"queueMicrotask()"),Object(t["g"])("使用微任务，是"),Object(t["h"])("code",null,"window"),Object(t["g"])("暴露的方法，能够允许第三方库、框架能使用微任务。")],-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("log("),Object(t["h"])("span",{class:"hljs-string"},'"Before enqueueing the microtask"'),Object(t["g"])(");\nqueueMicrotask("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n  log("),Object(t["h"])("span",{class:"hljs-string"},'"The microtask has run."'),Object(t["g"])(")\n});\nlog("),Object(t["h"])("span",{class:"hljs-string"},'"After enqueueing the microtask"'),Object(t["g"])(");\n")])],-1),u=Object(t["h"])("p",null,"输出结果是：",-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},"Before enqueueing the microtask\nAfter enqueueing the microtask\nThe microtask has run.\n")],-1),y=Object(t["h"])("p",null,"再看一个比较复杂的",-1),f=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" callback = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" log("),Object(t["h"])("span",{class:"hljs-string"},'"Regular timeout callback has run"'),Object(t["g"])(");\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" urgentCallback = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" log("),Object(t["h"])("span",{class:"hljs-string"},'"*** Oh noes! An urgent callback has run!"'),Object(t["g"])(");\n\nlog("),Object(t["h"])("span",{class:"hljs-string"},'"Main program started"'),Object(t["g"])(");\nsetTimeout(callback, "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(");\nqueueMicrotask(urgentCallback);\nlog("),Object(t["h"])("span",{class:"hljs-string"},'"Main program exiting"'),Object(t["g"])(");\n")])],-1),w=Object(t["h"])("p",null,"输出结果是：",-1),k=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},"Main program started\nMain program exiting\n*** Oh noes! An urgent callback has run!\nRegular timeout callback has run\n")],-1);function v(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k])}const x={};x.render=v;s["default"]=x},"9d29":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>我们在<a href="https://zhangmingemma.github.io/#/post?file=2022-10-24-carry" target="_blank">《JS深入系列之手写Call Apply和Bind》</a>文章中讲述实现<code>bind</code>的时候，有谈到<code>bind</code>能够实现参数柯里化，那究竟什么是柯里化，以及如果要我们去用原生JS如何可以实现一个柯里化？</p><h3>1. 什么是柯里化</h3><p>首先，什么是柯里化。下面这个例子就是典型的柯里化的应用场景，<code>checkFn</code>是一个柯里化后的函数，<code>checkPhone</code>接受了第一个参数一个正则规则，后面真正的校验就是输入另一个参数，电话号码，或者邮箱</p>',3),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"checkRegExp"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"gExp, str"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" gExp.test(str)\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" checkFn = curry(checkRegExp)\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" checkPhone = checkFn("),Object(t["h"])("span",{class:"hljs-regexp"},"/^1\\d{10}$/"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" checkEmail = checkFn("),Object(t["h"])("span",{class:"hljs-regexp"},"/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/"),Object(t["g"])(")\n\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkPhone("),Object(t["h"])("span",{class:"hljs-number"},"18611234455"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkPhone("),Object(t["h"])("span",{class:"hljs-number"},"18688950167"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkEmail("),Object(t["h"])("span",{class:"hljs-string"},"'163.qq.com'"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkEmail("),Object(t["h"])("span",{class:"hljs-string"},"'weixin.qq.com'"),Object(t["g"])("))\n")])],-1),a=Object(t["h"])("p",null,"柯里化，其实就是把接受多个参数的函数改造成只接受单一参数的函数，并返回一个接收其他参数的函数。常应用于多次调用，但每次调用都有部分参数相同的应用场景，能够为代码编写带来遍历，增强代码可读性。比如上面场景的正则检验的需求，如果没有柯里化，可能就需要这样来写",-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"checkRegExp"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"gExp, str"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" gExp.test(str)\n}\n\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkRegExp("),Object(t["h"])("span",{class:"hljs-regexp"},"/^1\\d{10}$/"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"18611234455"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkRegExp("),Object(t["h"])("span",{class:"hljs-regexp"},"/^1\\d{10}$/"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"18688950167"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkRegExp("),Object(t["h"])("span",{class:"hljs-regexp"},"/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'163.qq.com'"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(checkRegExp("),Object(t["h"])("span",{class:"hljs-regexp"},"/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'weixin.qq.com'"),Object(t["g"])("))\n")])],-1),b=Object(t["h"])("h3",null,"2. 封装柯里化工具函数",-1),h=Object(t["h"])("p",null,"我们对柯里化的定义，就是接收一部分参数，返回一个函数接收剩余参数，接收足够参数后，执行原型。我们有两个思路：",-1),o=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"通过函数的length的属性，来获取函数的形参个数，形参的个数就是所需的参数个数"),Object(t["h"])("li",null,"在调用柯里化工具函数时，手动指定所需的参数个数")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"curry"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"fn"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"curried"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"...args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (fn.length <= args.length>) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" fn.apply("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(", args)\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"curried2"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"...args2"),Object(t["g"])(") ")]),Object(t["g"])("{\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" curried2.apply("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(", [...args, ...args2])\n            }   \n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" curried2\n        }\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" curried\n}\n")])],-1),r=Object(t["h"])("p",null,"但是柯里化的操作会减弱性能，原因是：",-1),g=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("strong",null,"操作arguments"),Object(t["g"])("，比直接命名并传入参数性能会稍差")]),Object(t["h"])("li",null,[Object(t["h"])("strong",null,"作用域、闭包的调用会增加内存消耗"),Object(t["g"])("，导致性能下降")]),Object(t["h"])("li",null,[Object(t["h"])("strong",null,"call、apply的调用比直接调用函数要稍慢")])],-1);function p(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g])}const i={};i.render=p;s["default"]=i},"9dde":function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>这篇文章中针对<code>npm</code>、<code>pnpm</code>和<code>yarn</code>等主流的包管理工具进行分析和总结</p><h3>一. npm</h3><p><strong>npm</strong>是node.js自带的包管理器。它不仅作为包管理工具，在前端项目中我们也经常使用<code>npm</code>来管理我们的项目依赖。<code>npm</code>是围绕着<strong>语义版本控制</strong>的思想来设计的，使用一个名为<code>package.json</code>的文件，用户可以通过<code>npm install --save</code>命令把项目里所有的依赖保存在这个文件中。<code>npm</code>会依照<code>package.json</code>中的配置逐步加载对应版本的依赖包。</p><h4>1. npm存放的包在哪里</h4><p><strong>npm</strong>的包实际上是存放在<code>registry</code>里面的，我们自己发布的包也会保存在<code>registry</code>当中，当我们通过<code>npm</code>安装某个包的时候，其实是<code>npm</code>从<code>registry</code>中下载的</p><h4>2. npm版本缺陷</h4><p>我们在<code>package.json</code>中会看到一些版本记录，</p><ul><li><code>x.y.z</code>：表示一个明确的版本号</li><li><code>^x.y.z</code>：表示<code>x</code>的版本保持不变，<code>y</code>和<code>z</code>永远是最新的</li><li><code>~x.y.z</code>：表示<code>x</code>和<code>y</code>的版本保持不变，<code>z</code>永远是最新的</li></ul><p>一般新版本是向下兼容的，安装最新版本是可以兼容旧版的。即使不同的开发人员使用了相同的<code>package.json</code>文件，在他们自己的机器上也可能会安装同一个库的不同版本，就会出现潜在的难以调试的错误。因此<code>npm</code>中的<code>package.json</code>中的依赖无法保持版本一致的缺陷，并且<code>npm</code>依赖很多的库，会导致嵌套依赖关系，增加无法匹配响应版本的几率。</p><p><strong>解决版本缺陷的问题</strong></p><ul><li><code>npm config set save-exact true</code>：关闭版本号前面使用<code>^</code>默认行为，但<strong>只会影响顶级依赖关系</strong>，由于每个依赖的库都有自己的<code>package.json</code>文件，在他们自己的依赖关系前面可能会有<code>^</code>符号，所以无法通过<code>package.json</code>文件为嵌套依赖的内容提供保证。</li><li><code>shrinkwrap</code>命令：生成<code>npm-shrinkwrap.json</code>文件，为所有库和所有嵌套依赖的库记录确切的版本。但针对相同版本不同内容的库也是无法甄别和控制的。</li></ul><h4>3. npm依赖结构</h4><p>对<code>npm 2</code>来说，如果一个项目依赖了A模块，A模块又依赖了B模块，B模块又依赖了C模块，那么最终的依赖结构是：</p>",13),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},"----node_modules\n    ----modules A\n        ----modules B\n            ----modules C\n")],-1),a=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"依赖地狱"),Object(t["g"])("，上面嵌套式的依赖结构，最终的依赖结构会很长，对"),Object(t["h"])("code",null,"windows"),Object(t["g"])("来说，很多程序是无法处理超过260个字符的文件路径名。"),Object(t["h"])("code",null,"npm 3"),Object(t["g"])("采用了"),Object(t["h"])("strong",null,"扁平化依赖树"),Object(t["g"])("的方式去解决这个问题")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},"----node_modules\n    ----modules A\n    ----modules B\n    ----modules C\n")],-1),b=Object(t["f"])("<p>那么，<code>npm</code>必须首先遍历所有项目的依赖关系，然后再决定如何生成扁平的<code>node_modules</code>目录结构，<code>npm</code>必须为所有使用到的模块构建一个完整的依赖关系树，这是一个非常耗时的操作，这也是<code>npm</code>安装速度慢的一个很重要的原因。</p><p><strong>依赖不同版本的相同包</strong>的情况<code>npm</code>又是如何处理的呢，了解一个例子，A如果依赖了B@1.0，C依赖B@2.0，对于<code>npm2</code>来说没什么问题，每个包的依赖包都是安装在自己的目录下的，对于<code>npm3</code>来说，是按照引用顺序，先加载对应版本作为扁平化最外层的包版本，在不相同版本处再仿造<code>npm2</code>的嵌套结构</p>",2),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("----node_modules\n    ----modules A\n    ----modules B@1"),Object(t["h"])("span",{class:"hljs-number"},".0"),Object(t["g"])("\n    ----modules C\n        ----modules B@2"),Object(t["h"])("span",{class:"hljs-number"},".0"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("p",null,"如果一个项目中必须要依赖不同版本的依赖包，可以用别名的方式来实现",-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("npm install vue\nnpm install vue3@npm:vue@^"),Object(t["h"])("span",{class:"hljs-number"},"3.2"),Object(t["h"])("span",{class:"hljs-number"},".27"),Object(t["g"])("\n")])],-1),r=Object(t["h"])("p",null,[Object(t["g"])("那么"),Object(t["h"])("code",null,"package.json"),Object(t["g"])("文件中就会多")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-string"},'"dependencies"'),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-string"},'"vue"'),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"^2.6.14"'),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-string"},'"vue3"'),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},'"npm:vue@^3.2.27"'),Object(t["g"])("\n}\n")])],-1),p=Object(t["h"])("p",null,"在使用的时候就可以",-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" {"),Object(t["h"])("span",{class:"hljs-attr"},"Client"),Object(t["g"])(": Client6} = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'es6'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" {"),Object(t["h"])("span",{class:"hljs-attr"},"Client"),Object(t["g"])(": Client7} = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'es7'"),Object(t["g"])(")\n")])],-1),d=Object(t["f"])('<h4>4. package-lock.json</h4><p><strong>package-lock.json安装依赖</strong>是<code>npm5.0</code>之后有的，在<code>npm install</code>之后就会自动生成。<code>npm install</code>时，如果<code>package.json</code>和<code>package-lock.json</code>中的版本兼容，则根据<code>package-lock.json</code>中的版本下载，如果不兼容，则会根据<code>package.json</code>，并更新<code>package-lock.json</code>，保证<code>package-lock.json</code>中的版本兼容<code>package.json</code></p><p><strong>package-lock.json文件内容</strong>，文件中的<code>name</code>、<code>version</code>和<code>package.json</code>的<code>name</code>和<code>version</code>是一样的，描述了当前包的名字和版本，<code>dependencies</code>是一个对象，该对象和<code>node_modules</code>中的包结构一一对应，对象的<code>key</code>是包的名称，值为包的一些描述信息，主要结构时</p><ul><li>version：包版本，这个包当前安装在<code>node_modules</code>中的版本</li><li>resolved：包具体的安装来源</li><li>integrity：包<code>hash</code>值，验证已安装的软件包是否被改动过，是否已失效</li><li>requires：对应的子依赖的依赖，与子依赖的<code>package.json</code>中<code>dependencies</code>依赖项相同</li><li>dependencies：结构和外层的<code>dependencies</code>属性，存储安装在子依赖<code>node_modules</code>中的依赖包，只要子依赖的依赖和当前已安装在根目录<code>node_modules</code>中的依赖冲突的时候，才会有这个属性</li></ul><h4>5. npm离线缓存</h4><p>当执行<code>npm install</code>时，通过<code>pacote</code>把相应的包解压到项目的<code>node_modules</code>中，<code>npm</code>下载依赖时，先下载到缓存中，再解压到<code>node_modules</code>中，<code>pacote</code>依赖<code>npm-registry-fetch</code>来下载包，可以根据<code>cache</code>属性，<code>integrity</code>、<code>verison</code>、<code>name</code> 相关信息会生成一个唯一的<code>key</code>;这个<code>key</code> 就能够对应上 <code>index-v5</code> 目录下的缓存记录; 如果发现有缓存资源,就会去找到 <code>tar</code> 包对应的<code>hash</code>值. 根据 <code>hash</code>再去找缓存中的<code>tar</code>包,然后再次通过 <code>pacote</code>将二进制文件解压缩进我们项目的 <code>node_modules</code>目录中，这样就省去了资源下载的网络开销。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-11-01/1.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h3>二. yarn</h3><p>2016年，<code>yarn</code>发布，<code>yarn</code>也采用<strong>扁平化依赖结构</strong>，它的出现是为了解决<code>npm v3</code>中的依赖安装速度慢，依赖安装版本不确定性等问题。<code>yarn</code>是一种新的<code>hadoop</code>资源管理器，可为上层应用系统提供统一的资源管理和调度。<strong>基本思想</strong>是将JobTracker的两个主要功能资源管理和作业调度/监控分离，<strong>主要方法是</strong>创建一个全局的ResourceManager和若干针对应用程序的ApplicationMaster，<strong>主要优点是</strong>减少了JobTracker的资源消耗，并且让每个Job子任务状态的程序分布式化了，更安全、更优美</p><h4>1. yarn版本问题</h4><p>yarn解决了<code>npm</code>版本不确定性的问题，<code>yarn</code>默认有<code>yarn.lock</code>文件锁定版本，能保证<code>package.json</code>依赖安装的版本和实际的版本是一致的，保持环境统一，不会出现<code>npm</code>那样版本混乱的问题</p><h4>2. yarn安装依赖</h4><p><strong>npm的安装是同步的</strong>，在 npm 中安装依赖时，安装任务是串行的，会按包顺序逐个执行安装，这意味着它会等待一个包完全安装，然后再继续下一个。<strong>yarn的安装依赖是异步的</strong>，例如同时安装<code>axios</code>和<code>elementui</code>，<code>yarn</code>不会阻塞下载，会同时下载，因此不会因为某个依赖安装太费时间而导致后面的依赖一直处于等待下载的状态</p><h4>3. yarn离线缓存</h4><p>当<code>yarn</code>安装重复的依赖时，<code>yarn</code>会从本地获取，<code>yarn</code>提供了离线模式，<code>yarn</code>会从缓存中下载依赖，</p><h3>三. pnpm</h3><p><code>pnpm</code>是2017年正式发布的，定义为快速的，节省磁盘空间的包管理工具，开创了一套新的依赖管理机制，成为了包管理的后起之秀。与依赖提升和扁平化的<code>node_modules</code>不同，<code>pnpm</code>引入了另一套依赖管理策略：内容寻址存储。</p><h4>1. 内容寻址存储</h4><p>该策略会将包安装在系统的全局<code>store</code>中，依赖的每个版本只会在系统中安装一次，在引用项目<code>node_modules</code>的依赖时，会通过<strong>硬链接</strong>和<strong>符号链接</strong>在全局<code>store</code>中找到这个文件。为了实现这个过程，<code>node_modules</code>下会多出<code>.pnpm</code>目录，而且是非扁平化结构。</p><ul><li>硬链接：可以理解为源文件的副本，项目里安装其实是副本，它使得用户可以通过路径引用查找到全局<code>store</code>中的源文件，而且这个副本根本不占任何空间。同时，<code>pnpm</code>会在全局<code>store</code>里存储硬链接，不同的项目可以从全局<code>store</code>寻找到同一个依赖，大大节省了磁盘空间</li><li>符号链接：也叫软连接，可以理解为快捷方式，<code>pnpm</code>可以通过它找到对应磁盘目录下的依赖地址。</li></ul><p>使用<code>pnpm</code>安装依赖后<code>node_modules</code>结构如下，其中<code>&lt;store&gt;/xxx</code>开头的路径是硬链接，指向全局<code>store</code>中安装的依赖。其余的是符号连接，指向依赖的快捷方式</p>',21),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("node_modules\n----.pnpm\n    ----A@1"),Object(t["h"])("span",{class:"hljs-number"},".0"),Object(t["h"])("span",{class:"hljs-number"},".0"),Object(t["g"])("\n        ----node_modules\n            ----"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"A"),Object(t["g"])(" =>")]),Object(t["g"])(" <store>/A@1.0.0\n            ----B => ../../B@1.0.0\n    ----B@1.0.0\n        ----node_modules\n            ----B => <store>/B@1.0.0\n    ----B@2.0.0\n        ----node_modules\n            ----B => <store>/B@2.0.0\n    ----C@1.0.0\n        ----node_modules\n            ----C => <store>/C@1.0.0\n            ----B => ../../B@2.0.0\n")])],-1),m=Object(t["f"])('<div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-11-01/2.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h4>2. 优缺点</h4><p><strong>pnpm的优点</strong>是可以解决：</p><ul><li>幽灵依赖问题：也就是没有引用，但可以正常运行，也就是存在依赖提升的问题。在<code>pnpm</code>中只有直接依赖会平铺在<code>node_modules</code>下，子依赖不会被提升，不会产生幽灵依赖</li><li>依赖分身问题：相同的依赖只会<code>store</code>全局安装一次，项目中都是源文件的副本，几乎不占用任何空间。</li><li>下载速度问题：由于链接的优势，<code>pnpm</code>的安装速度在大多数场景下都比<code>npm</code>和<code>yarn</code>快2倍，节省的磁盘空间也更多</li></ul><p><strong>pnpm的弊端</strong>是：</p><ul><li>由于<code>pnpm</code>创建的<code>node_modules</code>依赖软链接，因此在不支持软链接的环境中，无法使用<code>pnpm</code></li><li>因为依赖源文件是安装在<code>store</code>中，调试依赖或<code>patch-package</code>给依赖打补丁也不太方便，可能会影响到其他项目</li></ul>',6);function y(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m])}const f={};f.render=y;s["default"]=f},a03b:function(e,s,c){"use strict";c("968f")},a545:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"页面性能对于前端来说是非常重要的一个话题，我们常常会遇到“直接给页面添加1w个div可以怎么做？”这样的问题，那这些问题应该如何解决，都与哪些具体的知识相关，是本文想要解释的关键点。",-1),l=Object(t["h"])("h3",null,"一. 懒加载与分页",-1),a=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"懒加载与分页"),Object(t["g"])("的方案用于JS资源和图片资源的按需动态加载，提高页面的渲染性能，但不适用于数据量太大，且不能分页的场景。")],-1),j=Object(t["h"])("h4",null,"1. webpack懒加载",-1),b=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"懒加载"),Object(t["g"])("又叫延时加载，在网页响应时不立刻请求资源，等待页面加载完毕或者按需响应时再加载资源，以达到提高页面响应速度以及节省服务器资源的目的。常用于图片、JS资源的懒加载实现上，提高页面加载速度。")],-1),h=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"配置babel")],-1),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"plugins"),Object(t["g"])(": [\n        "),Object(t["h"])("span",{class:"hljs-string"},"'@babel/plugin-syntax-dynamic-import'"),Object(t["g"])("\n    ]\n}\n")])],-1),O=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"配置chunkName")],-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" Bar = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-comment"},'/* webpackChunkName: "group-foo"*/'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'./Bar.vue'"),Object(t["g"])(")\n")])],-1),g=Object(t["h"])("h4",null,"2. vue懒加载",-1),p=Object(t["h"])("p",null,[Object(t["g"])("使用"),Object(t["h"])("code",null,"vue-lazyload"),Object(t["g"])("插件进行懒加载"),Object(t["h"])("code",null,"npm i vue-lazyload")],-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" Vue "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'vue'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" VueLazyLoad "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'vue-lazyload'"),Object(t["g"])("\nVue.use(VueLazyLoad)\nVue.use(VueLazyLoad, {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"preLoad"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1.3"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"error"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'dist/error.png'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"loading"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'dist/loading.gif'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"attempt"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-comment"},"// 默认尝试次数"),Object(t["g"])("\n})\n<img v-lazy="),Object(t["h"])("span",{class:"hljs-string"},'"item.iconUrl"'),Object(t["g"])(" alt="),Object(t["h"])("span",{class:"hljs-string"},'""'),Object(t["g"])(" width="),Object(t["h"])("span",{class:"hljs-string"},'"100%"'),Object(t["g"])(" height="),Object(t["h"])("span",{class:"hljs-string"},'"100%"'),Object(t["g"])("/>\n")])],-1),d=Object(t["f"])('<h4>3. 分页</h4><p>分段分页向后台请求数据，移动端通过判断滚动条滚动的进度来判断是否需要分页加载下一页的数据，这种方式会牺牲部分前端交互体验，就是在列表页底给出页面编码，跳转后只渲染当前页码内的数据列表</p><h3>二. 虚拟列表</h3><p>长列表的数量一旦达到上千，页面渲染过程中会出现明显的卡顿，数量突破上万之后，网页可能直接奔溃，为了解决长列表造成的渲染压力，业界出现了相应的应对技术，就是<strong>虚拟列表</strong>，也叫<strong>虚拟滚动</strong>。<strong>虚拟列表的本质，不管页面如何滚动，HTML文档只渲染当前屏幕视口展示出来的少量DOM元素</strong>。</p><h4>1. 原理</h4><p><strong>虚拟列表</strong>其实是按需显示的一种实现，即只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。假设有1万条记录需要同时渲染，我们屏幕的可见区域的高度为500px,而列表项的高度为50px，则此时我们在屏幕中最多只能看到10个列表项，那么在首次渲染的时候，我们只需加载10条即可。<strong>虚拟列表</strong>的实现，实际上就是在首屏加载的时候，只加载<strong>可视区域</strong>内需要的列表项，当滚动发生时，动态通过计算获得<strong>可视区域</strong>内的列表项，并将非<strong>可视区域</strong>内存在的列表项删除。</p><p>实现<strong>虚拟列表</strong>就是在处理用户滚动时，改变列表在可视区域的渲染部分：</p><ul><li>计算当前可视区域起始数据的startIndex</li><li>计算当前可视区域结束数据的endIndex</li><li>计算当前可视区域的数据，并渲染到页面中</li><li>计算startIndex对应的数据在整个列表中的偏移位置startOffset，并设置到列表上</li><li>计算endIndex对应的数据相对于可滚动区域最底部的偏移位置endOffset，并设置到列表上</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-21/1.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h4>2. 实现</h4><h5>(1). 设计页面的DOM结构</h5>',11),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-container"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!--可视区域--\x3e"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-phantom"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!--容器内的占位，高度为总列表高度，用于形成滚动条--\x3e"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!--渲染区域--\x3e"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!-- item-1 --\x3e"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!-- item-2 --\x3e"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!-- item-... --\x3e"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-comment"},"\x3c!-- item-n --\x3e"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),m=Object(t["f"])("<h5>(2). 监听<code>scroll</code>事件，获取滚动位置<code>scrollTop</code></h5><p>在整个DOM结构中，我们假定每个数据项的高度是固定的<code>itemSize</code>，我们可以推算得到</p><ul><li>列表总高度：<code>listHeight = listData.length * itemSize</code></li><li>可显式的列表项数：<code>visibleCount = Math.ceil(screenHeight/itemSize)</code></li><li>数据起始索引：<code>startIndex = Math.floor(scrollTop / itemSize)</code></li><li>数据的结束索引：<code>endIndex = startIndex + visibleCount</code></li><li>列表渲染的数据：<code>visibleData = listData.slice(startIndex, endIndex)</code></li></ul><p>最终的简易代码是：</p>",4),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"ref"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"list"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-container"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@scroll"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"scrollEvent($event)"'),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-phantom"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},"\"{ height: listHeight + 'px' }\""),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"{ transform: getTransform }"'),Object(t["g"])(">")]),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-attr"},"ref"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"items"'),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-item"'),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-attr"},"v-for"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item in visibleData"'),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-attr"},":key"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item.id"'),Object(t["g"])("\n                "),Object(t["h"])("span",{class:"hljs-attr"},":style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},"\"{ height: itemSize + 'px', lineHeight: itemSize + 'px' }\""),Object(t["g"])("\n            >")]),Object(t["g"])("{{ item.value }}"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),f=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'VirtualList'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"props"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"listData"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(",\n        "),Object(t["h"])("span",{class:"hljs-attr"},"itemSize"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"computed"),Object(t["g"])(": {\n        listHeight() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.length * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".itemSize\n        },\n        visibleCount() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".ceil("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".screenHeight / "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".itemSize)\n        },\n        getTransform() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`translate3d(0, "),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".startOffset}")]),Object(t["g"])("px, 0)`")]),Object(t["g"])("\n        },\n        visibleData() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.slice("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start, "),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".min("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end, "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.length))\n        }\n    },\n    mounted() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".screenHeight = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$el.clientHeight\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start + "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount\n    },\n    data() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-attr"},"screenHeight"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(",\n            "),Object(t["h"])("span",{class:"hljs-attr"},"start"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(",\n            "),Object(t["h"])("span",{class:"hljs-attr"},"startOffset"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(",\n            "),Object(t["h"])("span",{class:"hljs-attr"},"end"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        }\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"methods"),Object(t["g"])(": {\n        scrollEvent() {\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 当前滚动位置"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" scrollTop = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.list.scrollTop\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 此时的开始索引"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start = "),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".floor(scrollTop / "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".itemSize)\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 此时的结束索引"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start + "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount\n            "),Object(t["h"])("span",{class:"hljs-comment"},"// 此时的偏移量"),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".startOffset = scrolllTop - (scrollTop % "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".itemSize)\n        }\n    }\n}\n")])],-1),w=Object(t["f"])('<div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-21/2.gif" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h4>3. 优化</h4><h5>1. 列表项动态高度</h5><p>上面的简易实现，我们假定了列表项的高度是固定的，但实际情况列表项的高度往往不是固定的，是根据内容而动态撑开的。这里我们可以先设置<strong>预估高度</strong>进行渲染，然后获取<strong>真实高度</strong>进行缓存。</p><h6>(1). 初始化配置</h6><p>定义组件属性预估高度<code>estimatedItemSize</code>，用于接收预估高度</p>',6),k=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"props"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"estimatedItemSize"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])(" \n    }\n}\n")])],-1),v=Object(t["h"])("p",null,[Object(t["g"])("定义"),Object(t["h"])("code",null,"positions"),Object(t["g"])("，用于列表渲染后存储"),Object(t["h"])("strong",null,"每一项的高度以及位置"),Object(t["g"])("信息，")],-1),x=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions = []\n")])],-1),S=Object(t["h"])("p",null,[Object(t["g"])("并在初始时根据"),Object(t["h"])("code",null,"estimatedItemSize"),Object(t["g"])("对"),Object(t["h"])("code",null,"positions"),Object(t["g"])("进行初始化")],-1),P=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("initPositions() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item, index"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            index,\n            "),Object(t["h"])("span",{class:"hljs-attr"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".estimatedItemSize,\n            "),Object(t["h"])("span",{class:"hljs-attr"},"top"),Object(t["g"])(": index * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".estimatedItemSize,\n            "),Object(t["h"])("span",{class:"hljs-attr"},"bottom"),Object(t["g"])(": (index + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".estimatedItemSize\n        }\n    })\n}\n")])],-1),_=Object(t["h"])("p",null,"那么我们之前写的列表高度就可以根据实际高度来计算得到了",-1),C=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("listHeight() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions["),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("].bottom\n}\n")])],-1),T=Object(t["h"])("h6",null,"(2).更新实际位置信息",-1),I=Object(t["h"])("p",null,[Object(t["g"])("通过"),Object(t["h"])("code",null,"updated"),Object(t["g"])("钩子函数，在渲染完成后，获取列表每项的位置信息并进行缓存")],-1),E=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("updated() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" nodes = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.items\n    nodes.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"node"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" rect = node.getBoundingClientRect()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" height = rect.height\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" index = +node.id.slice("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" oldHeight = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].height\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" dValue = oldHeight - height\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dValue) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].bottom = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].bottom - dValue\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].height = height\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" k=index+"),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(";k<"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions.length; k++) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k].top = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k"),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])("].bottom\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k].bottom = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k].bottom - dValue\n            }\n        }\n    })\n")])],-1),A=Object(t["h"])("p",null,[Object(t["g"])("滚动后获取列表"),Object(t["h"])("strong",null,"开始索引"),Object(t["g"])("方法通过"),Object(t["h"])("strong",null,"缓存"),Object(t["g"])("来获取：")],-1),D=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("getStartIndex(scrollTop="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(") {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" item = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions.find("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"x"),Object(t["g"])(" =>")]),Object(t["g"])(" x && x.bottom > scrollTop)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" item.index\n}\n")])],-1),M=Object(t["h"])("p",null,[Object(t["g"])("这其中可以通过"),Object(t["h"])("strong",null,"二分查找"),Object(t["g"])("来优化查找效率")],-1),N=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("getStartIndex(scrollTop="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(") {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".binarySearch("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions, scrollTop)\n},\nbinarySearch(list, value) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" start = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" end = list.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" tempIndex = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])("(start <= end) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" midIndex = "),Object(t["h"])("span",{class:"hljs-built_in"},"parseInt"),Object(t["g"])("((start+end) / "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" midValue = list[midIndex].bottom\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (midValue === value) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" midIndex + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (midValue > value) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (tempIndex === "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" || tempIndex > midIndex) {\n                tempIndex = midIndex\n            }\n            end = end - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            start = midIndex + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n        }\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" tempIndex\n}\n")])],-1),F=Object(t["h"])("p",null,"滚动后的偏移量的获取方式变更：",-1),R=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("scrollEvent() {\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// ... "),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start >= "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".startOffset  = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions["),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("].bottom\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".startOffset = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    }\n}\n")])],-1),V=Object(t["f"])('<div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-21/3.gif" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h5>2. 滚动部分白屏的问题</h5><p>可以看到<strong>文字内容动态撑高列表项</strong>可能在滚动过快的时候，出现短暂的白屏现象，我们可以在滚动的时候给予一些缓冲：</p><ul><li>可视区域上方：<code>above</code></li><li>可视区域：<code>screen</code></li><li>可视区域下方：<code>below</code></li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-21/4.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div>',5),B=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"props"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"bufferScale"),Object(t["g"])(": {\n            "),Object(t["h"])("span",{class:"hljs-attr"},"type"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])(",\n            "),Object(t["h"])("span",{class:"hljs-attr"},"default"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n        }\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"computed"),Object(t["g"])(": {\n        aboveCount() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".min("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start, "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".bufferScale * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount)\n        },\n        belowCount() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".min("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.length - "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end, "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".bufferScale * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount)\n        },\n        visibleData() {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" start = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start - "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".aboveCount\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" end = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end + "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".belowCount\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.slice(start, end)\n        }\n    }\n}\n")])],-1),L=Object(t["h"])("p",null,"最终完整代码",-1),z=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("<template>\n  "),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"ref"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"list"'),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},":style"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"{height}"'),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-container"'),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"@scroll"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"scrollEvent($event)"'),Object(t["g"])("\n  >")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"ref"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"phantom"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-phantom"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"ref"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"content"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list"'),Object(t["g"])(">")]),Object(t["g"])("\n      "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(" \n        "),Object(t["h"])("span",{class:"hljs-attr"},"class"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"infinite-list-item"'),Object(t["g"])(" \n        "),Object(t["h"])("span",{class:"hljs-attr"},"ref"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"items"'),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-attr"},":id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item._index"'),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-attr"},":key"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item._index"'),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-attr"},"v-for"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item in visibleData"'),Object(t["g"])("\n      >")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"slot"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"ref"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"slot"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":item"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"item.item"'),Object(t["g"])(">")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"slot"),Object(t["g"])(">")]),Object(t["g"])("\n      "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")])]),Object(t["g"])("\n<"),Object(t["h"])("span",{class:"hljs-regexp"},"/template>\n<script>\nexport default {\n  name: 'VirtualList',\n  props: {\n    listData: Array,\n    estimateItemSize: Number,\n    bufferScale: {\n      type: Number,\n      default: 1\n    },\n    height: {\n      type: String,\n      default: '100%'\n    }\n  },\n  data() {\n    return {\n      screenHeight: 0,\n      start: 0,\n      end: 0\n    }\n  },\n  computed: {\n    visibleCount() {\n      return Math.ceil(this.screenHeight /"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".estimateItemSize)\n    },\n    aboveCount() {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".min(\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start,\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".bufferScale * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount\n      )\n    },\n    belowCount() {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".min(\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.length - "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end,\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".bufferScale * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount\n      )\n    },\n    visibleData() {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" start = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start - "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".aboveCount\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" end = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end + "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".belowCount\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.slice(start, end)\n    }\n  },\n  created() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".initPosition()\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])(".vm = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n  },\n  mounted() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".screenHeight = screen.height\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start + "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount\n  },\n  updated() {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$nextTick("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.items || !"),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.items.length) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])("\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".updateItemSize()\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" height = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions["),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions.length "),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])("].bottom\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.phantom.style.height = height + "),Object(t["h"])("span",{class:"hljs-string"},"'px'"),Object(t["g"])("\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".setStartOffset()\n    });\n  },\n  "),Object(t["h"])("span",{class:"hljs-attr"},"methods"),Object(t["g"])(": {\n    initPosition() {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".listData.map("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"item, index"),Object(t["g"])(") =>")]),Object(t["g"])(" ({\n        index,\n        "),Object(t["h"])("span",{class:"hljs-attr"},"height"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".estimateItemSize,\n        "),Object(t["h"])("span",{class:"hljs-attr"},"top"),Object(t["g"])(": index * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".estimateItemSize,\n        "),Object(t["h"])("span",{class:"hljs-attr"},"bottom"),Object(t["g"])(": (index + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") * "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".estimateItemSize\n      }))\n    },\n    updateItemSize() {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" nodes = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.items\n      nodes.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"node"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" rect = node.getBoundingClientRect()\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" height = rect.height\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" index = +node.id.slice("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" oldHeight = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].height\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" dValue = oldHeight - height\n\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dValue) {\n          "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].bottom = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].bottom - dValue\n          "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[index].height = height\n          "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" k = index + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("; k < "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions.length; k++) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k].top = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k"),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])("].bottom\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k].bottom = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions[k].bottom - dValue\n          }\n        }\n      })\n    },\n    setStartOffset() {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" startOffset;\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start >= "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" temp = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions["),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start - "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".aboveCount]\n          ? "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions["),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start - "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".aboveCount].top\n          : "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" size = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions["),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start].top - temp\n        startOffset = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions["),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("].bottom - size\n      } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        startOffset = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n      }\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.content.style.transform = "),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`translate3d(0, "),Object(t["h"])("span",{class:"hljs-subst"},"${startOffset}"),Object(t["g"])("px, 0)`")]),Object(t["g"])("\n    },\n    scrollEvent() {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" scrollTop = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$refs.list.scrollTop\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".getStartIndex(scrollTop)\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".end = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".start + "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".visibleCount\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".setStartOffset()\n    },\n    getStartIndex(scrollTop = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(") {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".binarySearch("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".positions, scrollTop)\n    },\n    binarySearch(list, value) {\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" start = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" end = list.length - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(";\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" tempIndex = "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(";\n\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])("(start <= end){\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" midIndex = "),Object(t["h"])("span",{class:"hljs-built_in"},"parseInt"),Object(t["g"])("((start + end)/"),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(");\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" midValue = list[midIndex].bottom;\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(midValue === value){\n          "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" midIndex + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(";\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(midValue < value){\n          start = midIndex + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(";\n        }"),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(midValue > value){\n          "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(tempIndex === "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(" || tempIndex > midIndex){\n            tempIndex = midIndex;\n          }\n          end = end - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(";\n        }\n      }\n      "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" tempIndex;\n    }\n  }\n}\n<"),Object(t["h"])("span",{class:"hljs-regexp"},"/script>\n<style scoped>\n.infinite-list-container {\n  overflow: auto;\n  position: relative;\n  -webkit-overflow-scrolling: touch;\n}\n.infinite-list-phantom {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  z-index: -1;\n}\n.infinite-list {\n  left: 0;\n  right: 0;\n  top: 0;\n  position: absolute;\n}\n.infinite-list-item {\n  padding: 5px;\n  color: #555;\n  box-sizing: border-box;\n  border-bottom: 1px solid #999;\n}\n</"),Object(t["g"])("style>\n")])],-1),q=Object(t["f"])('<div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-21/5.gif" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h5>3. 更多优化</h5><p>可以使用<code>IntersectionObserver</code>替换监听<code>scroll</code>事件，<code>IntersectionObserver</code>可以监听目标元素是否出现在可视区域内，在监听的回调事件中执行可视区域数据的更新，并且<code>IntersectionObserver</code>的监听回调是异步触发，不随着目标元素的滚动而触发，性能消耗极低。</p><h3>三. DOM片段</h3><p><strong>documentFragment</strong>是一个保存多个<code>element</code>的容器对象，当更新其中的一个或多个<code>element</code>时，页面不会更新，只有当<code>documentFragment</code>容器中保存的所有<code>element</code>更新后再将其插入到页面中才能更新页面。用来批量更新是还不错的选择：</p><ul><li>创建documentFragment对象</li><li>更新fragment所有的节点</li><li>将fragment插入到页面中展示</li></ul>',6),H=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" app = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".querySelector("),Object(t["h"])("span",{class:"hljs-string"},"'.app'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" fragment = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createDocumentFragment()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<"),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("; i++) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" div = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".createElement("),Object(t["h"])("span",{class:"hljs-string"},"'li'"),Object(t["g"])(")\n    div.setAttribute("),Object(t["h"])("span",{class:"hljs-string"},"'class'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'item'"),Object(t["g"])(")\n    div.innerText = "),Object(t["h"])("span",{class:"hljs-number"},"6666"),Object(t["g"])("\n    fragment.appendChild(div)\n}\napp.appendChild(fragment)\n")])],-1),G=Object(t["h"])("h3",null,"参考文献",-1),J=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("a",{href:"https://juejin.cn/post/6844903982742110216",target:"_blank"},"高性能渲染十万条数据(虚拟列表)")]),Object(t["h"])("li",null,[Object(t["h"])("a",{href:"https://github.com/dwqs/blog/issues/70",target:"_blank"},"浅说虚拟列表的实现原理")]),Object(t["h"])("li",null,[Object(t["h"])("a",{href:"https://zhuanlan.zhihu.com/p/34585166",target:"_blank"},"再谈前端虚拟列表的实现")])],-1);function U(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E,A,D,M,N,F,R,V,B,L,z,q,H,G,J])}const $={};$.render=U;s["default"]=$},a7bb:function(e,s,c){"use strict";c.d(s,"a",(function(){return n})),c.d(s,"b",(function(){return l})),c.d(s,"e",(function(){return a})),c.d(s,"f",(function(){return j})),c.d(s,"d",(function(){return b})),c.d(s,"c",(function(){return h}));c("4de4");var t=c("a1e9"),n={ClientID:"f2fc4c018508a76889b4",ClientSecret:"c61f4feab775f95de8af0e4e215e1a5b2b54707c",Repo:"zhangmingemma.github.io",Owner:"zhangmingemma"},l={PageSie:5},a=function(e){var s=Object(t["k"])(null);return e.then((function(e){s.value=e})),{res:s}},j=function(){setTimeout((function(){window.scrollTo({top:0,behavior:"smooth"})}))},b=function(e,s){return e instanceof Array&&s instanceof Array&&e.filter((function(e){return s.indexOf(e)>=0}))||[]},h=function(){return"./dist/posts"}},a7cc:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>因特网采用层次树状结构命名，任何一个连接在因特网上的主机或者路由器，都有一个唯一的层次结构的名字，即域名。从语法上讲，每个域名都是由标号序列组成，而各标号之间用&quot;.&quot;隔开。例如下面的域名由三个标号组成，其中标号com是顶级域名，标号cctv是二级域名，标号mail是三级域名。标号不得超过63个字符，也不区分大小写，总域名不超过255个字符。各级标号域名由上一级的域名管理机构管理，顶级域名由ICANN管理</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/1.jpeg" style="display:inline-block;margin-bottom:16px;width:300px;"></div><p>因特网上的DNS域名服务器也是按照层次结构安排的，一个域名服务器都只对域名体系中的一部分进行管辖。每个域名服务器一般都会做数据备份，有一个主域名服务器，若干辅助域名服务器。根据域名服务器所起的作用，可以把域名服务器划分为：</p><ol><li>根域名服务器：层次最高的域名服务器，也是最重要的域名服务器，所有根域名服务器都知道顶级域名服务器的域名和IP地址。如果因特网上任何一个域名无法解析时，就会求助于根域名服务器。目前全球有a.rootservers,net ~ m.rootservers.net 13个跟域名服务器，对应无数台机器，分布在全球很多地方。很多根域名服务器在查询过程中，并不会将IP地址直接返回，而是告诉本地域名服务器下一步的顶级域名服务器是哪一个。</li><li>顶级域名服务器：负责管理在该项域名下所有的二级域名，当收到DNS查询时，给出响应的回答，可能是IP地址，也可能是下一步应该找的域名服务器的IP地址</li><li>权限域名服务器：当收到DNS查询时，给出响应的回答，可能是IP地址，也可能是下一步应该找的域名服务器的IP地址</li><li>本地域名服务器：并不属于上面图片中的域名服务器层次结构，但当一个主机发出DNS请求时，这个查询请求报文就发送给本地域名服务器，当所查询的主机属于同一个本地ISP时，就能直接给出IP地址，不需逐层向上查询。</li></ol><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/2.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h2>DNS域名解析过程</h2><p>整个DNS域名的解析过程如下：</p><ol><li>主机向本地域名服务器发起查询，采用的是<strong>递归查询</strong>，所谓递归查询就是如果主机所询问的本地域名服务器不知道准确的IP地址，那么本地域名服务器会作为请求方，向上级域名服务器发起请求</li><li>本地域名服务器向根域名服务器发起查询，采用的是<strong>迭代查询</strong>，所谓迭代查询就是根域名服务器收到本地域名服务器发出的报文时，要么给出IP地址，要么就是告诉本地域名服务器下一步要查询的域名服务器</li></ol><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/4.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>以上面的图片为例，如果<code>m.xyz.com</code>要向<code>y.abc.com</code>发送消息，就首先会向本地域名服务器<code>dns.xyz.com</code>发起DNS查询，本地域名服务器采用迭代查询的方式，向一个根域名服务器发起查询，根域名服务器告诉本地域名服务器顶级域名服务器<code>dns.com</code>的IP地址，本地域名服务器向<code>dns.com</code>发起查询，返回<code>dns.abc.com</code>的IP地址，本地域名服务器再向<code>dns.abc.com</code>发起查询，返回<code>y.abc.com</code>的IP地址。</p><h2>DNS域名解析提速</h2><p>如果每次都进行DNS域名的查询，会耗费大量的成本和耗时，也会加重根域名服务器的负荷，因此：</p><ol><li>为了提高DNS的查询效率，减轻根域名服务器的负荷，都会进行缓存，告诉缓存用来存放最近查询过的域名以及何处获得域名的映射表。</li><li>实现全局负载均衡，实现不同地域服务器的流量调配能够保证用户的请求被离用户最近或者服务质量最好的服务器来处理，确保服务质量。</li></ol><h2>DNS域名解析问题</h2><p>因为DNS域名解析导致的常见问题有：</p><ol><li>运营商劫持（DNS劫持）：通过劫持DNS域名服务器，获取域名解析记录的控制权，修改域名的解析结果，导致用户访问到假网址，从而窃取资料或者破坏原有服务的正常服务</li></ol><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/4.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><ol start="2"><li>DNS解析域名时缓存解析结果：我们在开发的过程中经常会出现，配置了代理没有生效，或者举例联通用户在手机浏览器中输入baidu.com，本来应该是由一个本地域名服务器向百度权限域名服务器查询应该访问哪台服务器，本地域名服务器根据返回结果进行查询，并返回给用户。但当本地域名服务器有缓存的时候，就不会发起查询，而是直接返回缓存中的结果，如果IP地址已经发生了改变，那就会导致用户访问不到</li></ol><h2>额外知识点</h2><ul><li>DNS为什么使用UDP？主要原因是为了避免使用TCP造成的连接时延，为了得到IP地址，往往会向多个域名服务器发起查询请求，如果使用TCP，会让DNS服务变得很慢，会造成页面的过长等待</li><li>DNS如何实现负载平衡？一个域名可能对应多个服务器地址，当用户发起DNS请求时，DNS服务器会返回一个IP集合，用户一般选择排在前面的地址发送请求，将用户的请求分配到不同的服务器上，实现负载均衡</li></ul><p>参考文献： [1] 计算机网络 谢希仁著 [2] <a href="https://juejin.cn/post/6844903987796246542">全面理解DNS及HTTPDNS</a></p>',21);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},b244:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("blockquote",null,[Object(t["h"])("p",null,"new运算符是创建一个用户定义的对象类型的实例，或具有构造函数的内置对象类型之一")],-1),l=Object(t["h"])("h3",null,"1. new做了什么",-1),a=Object(t["h"])("p",null,[Object(t["g"])("换而言之，就是"),Object(t["h"])("code",null,"new"),Object(t["g"])("就是为构造函数创建一个对象实例，我们来通过一个例子了解一下"),Object(t["h"])("code",null,"new"),Object(t["g"])("实现了哪些功能：")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Func"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, age"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".age = age\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".habit = "),Object(t["h"])("span",{class:"hljs-string"},"'shopping'"),Object(t["g"])("\n}\nFunc.prototype.job = "),Object(t["h"])("span",{class:"hljs-string"},"'programming'"),Object(t["g"])("\nFunc.prototype.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'I am '"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name)\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" obj = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Func("),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"18"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(obj.name)  "),Object(t["h"])("span",{class:"hljs-comment"},"// Gemma"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(obj.age)   "),Object(t["h"])("span",{class:"hljs-comment"},"// 18"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(obj.habit) "),Object(t["h"])("span",{class:"hljs-comment"},"// shopping"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(obj.job)   "),Object(t["h"])("span",{class:"hljs-comment"},"// programming"),Object(t["g"])("\nobj.say()              "),Object(t["h"])("span",{class:"hljs-comment"},"// I am Gemma"),Object(t["g"])("\n")])],-1),b=Object(t["f"])("<p>我们可以看到<code>new</code>创建的实例可以：</p><ul><li>访问到构造函数内部的属性</li><li>访问到构造函数原型上的属性</li></ul><h3>2. 手写new</h3><p>因此我们就来手写一个<code>new</code>，这里没有办法在任何东西的原型上去定义<code>new</code>，我们可以把<code>new</code>写做一个函数<code>objectFactory</code>，来模拟<code>new</code>的效果。手写的整个过程是：</p><ul><li><code>objectFactory</code>的第一个参数取出来作为构造函数</li><li><code>objectFactory</code>内新建一个对象<code>obj</code>，将对象<code>obj</code>的<code>__proto</code>指向构造函数的原型，这样<code>obj</code>就可以访问构造函数原型上的属性</li><li>使用<code>apply</code>，改变构造函数的<code>this</code>到<code>obj</code>，这样<code>obj</code>就可以访问到构造函数的属性</li><li>将除第一个参数之外的参数作为参数传入构造函数</li></ul>",5),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"objectFactory"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" Constructor = [].shift.call("),Object(t["h"])("span",{class:"hljs-built_in"},"arguments"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" obj = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])("()\n    obj.__proto__ = Constructor.prototype\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" Constructor.apply(obj, "),Object(t["h"])("span",{class:"hljs-built_in"},"arguments"),Object(t["g"])(")\n}\n")])],-1),o=Object(t["h"])("p",null,"初版的测试用例",-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Func"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, age"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".age = age\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".habit = "),Object(t["h"])("span",{class:"hljs-string"},"'shopping'"),Object(t["g"])("\n}\nFunc.prototype.job = "),Object(t["h"])("span",{class:"hljs-string"},"'programming'"),Object(t["g"])("\nFunc.prototype.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'I am '"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name)\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ob1 = objectFactory(Func, "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"18"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(ob1.name)  "),Object(t["h"])("span",{class:"hljs-comment"},"// Gemma"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(ob1.age)   "),Object(t["h"])("span",{class:"hljs-comment"},"// 18"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(ob1.habit) "),Object(t["h"])("span",{class:"hljs-comment"},"// shopping"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(ob1.job)   "),Object(t["h"])("span",{class:"hljs-comment"},"// programming"),Object(t["g"])("\nob1.say()              "),Object(t["h"])("span",{class:"hljs-comment"},"// I am Gemma"),Object(t["g"])("\n")])],-1),r=Object(t["h"])("p",null,[Object(t["g"])("这里，我们再来看看"),Object(t["h"])("code",null,"new"),Object(t["g"])("的用法，当构造函数返回一个东西的时候，会怎么样呢？")],-1),g=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("strong",null,"返回对象"),Object(t["g"])("：如果构造函数返回一个对象，则实例只能访问到返回的对象属性，访问不到原型中的属性")]),Object(t["h"])("li",null,[Object(t["h"])("strong",null,"返回基本类型"),Object(t["g"])("：如果构造函数返回一个基本类型的值，那实例就只能访问到构造函数的属性，也可以访问到原型中的属性")])],-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 返回一个对象"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Fn"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, age"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".age = age\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".habit = "),Object(t["h"])("span",{class:"hljs-string"},"'shopping'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n        name,\n        "),Object(t["h"])("span",{class:"hljs-attr"},"address"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'China'"),Object(t["g"])("\n    }\n}\nFn.prototype.job = "),Object(t["h"])("span",{class:"hljs-string"},"'programming'"),Object(t["g"])("\nFn.prototype.sayName = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".error("),Object(t["h"])("span",{class:"hljs-string"},"'I am'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name)\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" person = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Fn("),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'18'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.name)   "),Object(t["h"])("span",{class:"hljs-comment"},"// Gemma"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.age)    "),Object(t["h"])("span",{class:"hljs-comment"},"// undefined"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.habit)  "),Object(t["h"])("span",{class:"hljs-comment"},"// undeined"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.job)    "),Object(t["h"])("span",{class:"hljs-comment"},"// undefined"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.address)"),Object(t["h"])("span",{class:"hljs-comment"},"// China"),Object(t["g"])("\nperson.sayName()          "),Object(t["h"])("span",{class:"hljs-comment"},"// sayName is not function"),Object(t["g"])("\n")])],-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 返回一个基本类型"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"Fn"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, age"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name = name\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".age = age\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".habit = "),Object(t["h"])("span",{class:"hljs-string"},"'shopping'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n}\nFn.prototype.job = "),Object(t["h"])("span",{class:"hljs-string"},"'programming'"),Object(t["g"])("\nFn.prototype.sayName = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".error("),Object(t["h"])("span",{class:"hljs-string"},"'I am'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".name)\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" person = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Fn("),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'18'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.name)   "),Object(t["h"])("span",{class:"hljs-comment"},"// Gemma"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.age)    "),Object(t["h"])("span",{class:"hljs-comment"},"// 18"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.habit)  "),Object(t["h"])("span",{class:"hljs-comment"},"// shopping"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(person.job)    "),Object(t["h"])("span",{class:"hljs-comment"},"// programming"),Object(t["g"])("\nperson2.sayName()          "),Object(t["h"])("span",{class:"hljs-comment"},"// I am Gemma"),Object(t["g"])("\n")])],-1),d=Object(t["h"])("p",null,[Object(t["g"])("我们来修正一下手写"),Object(t["h"])("code",null,"new"),Object(t["g"])("的实现")],-1),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"objectFactory"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" Constructor = [].shift.call("),Object(t["h"])("span",{class:"hljs-built_in"},"arguments"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" obj = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])("()\n    obj.__proto__ = Constructor.prototype\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ret = Constructor.apply(obj, "),Object(t["h"])("span",{class:"hljs-built_in"},"arguments"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" ret == "),Object(t["h"])("span",{class:"hljs-string"},"'Object'"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" ret\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" obj\n    }\n}\n")])],-1);function m(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u])}const y={};y.render=m;s["default"]=y},b328:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<h2>一. Symbol</h2><p>ES6在原本的原生数据类型<code>Number</code>、<code>Null</code>、<code>String</code>、<code>Undefined</code>、<code>Boolean</code>中加入了<code>Symbol</code>，表示独一无二的值。Symbol常见的用法有：</p><ul><li><strong>Symbol可以用于作为对象的key</strong>，可以有效防止键值被改写或是覆盖。但<code>Symbol</code>作为对象的key时，只能当做变量来对待，要用<code>[]</code>取值或赋值，不能用<code>.</code>运算符。</li><li><strong>Symbol作为对象属性时，不会在对象属性遍历的时候Object.keys出现</strong>。只能通过<code>Object.getOwnPropertySymbols</code>获取，可以通过这个特性定义对象的私有属性</li><li><strong>Symbol.for(&#39;foo&#39;)可以创建相同的值</strong></li></ul>",3),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// symbol创建"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])("()\n"),Object(t["h"])("span",{class:"hljs-comment"},"// symbol类型"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" a "),Object(t["h"])("span",{class:"hljs-comment"},"// symbol"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// symbol添加描述"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" b = "),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'foo'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" c = "),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'foo'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// symbol比较"),Object(t["g"])("\nc == b "),Object(t["h"])("span",{class:"hljs-comment"},"// false"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// symbol作为属性"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" d = {}\nd[b] = "),Object(t["h"])("span",{class:"hljs-string"},"'hello!'"),Object(t["g"])("\n")])],-1),a=Object(t["f"])("<h2>二. Set</h2><p>ES6提供了新的数据结构<code>Set</code>，<code>Set</code>成员的值都是唯一的，没有重复的值。</p><p><strong>Set与Array的区别</strong></p><ul><li><strong>成员值</strong>：Array成员的值可重复，Set成员的值没有重复的</li><li><strong>创建方法</strong>：都可以通过<code>new</code>来创建</li><li><strong>操作方法</strong>：Array的操作方法是<code>length</code> / <code>push</code> / <code>splice</code> / <code>shift</code> / <code>unshift</code> / <code>pop</code>，Set的操作方法是<code>size</code> / <code>add</code> / <code>delete</code> / <code>has</code> / <code>clear</code></li><li><strong>遍历</strong>：Set可以通过<code>keys()</code> / <code>values()</code> / <code>entries</code> / <code>forEach</code>进行遍历，其中<code>keys()</code> 、 <code>values()</code>、 <code>entries()</code>结果都不能通过<code>map</code>、 <code>forEach</code>、 <code>for</code>去遍历，也不能通过<code>[]</code>索引来获取</li></ul>",4),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Set"),Object(t["g"])("(["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("])).keys() "),Object(t["h"])("span",{class:"hljs-comment"},"// SetIterator {1, 2, 5}"),Object(t["g"])("\n("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Set"),Object(t["g"])("(["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("])).values() "),Object(t["h"])("span",{class:"hljs-comment"},"// SetIterator {1, 2, 5}"),Object(t["g"])("\n("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Set"),Object(t["g"])("(["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("])).entries() "),Object(t["h"])("span",{class:"hljs-comment"},"// SetIterator {1 => 1, 2 => 2, 5 => 5}"),Object(t["g"])("\n("),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Set"),Object(t["g"])("(["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("])).keys().map... "),Object(t["h"])("span",{class:"hljs-comment"},"// keys().map is not a function"),Object(t["g"])("\n")])],-1),b=Object(t["f"])("<p><strong>WeakSet</strong> WeakSet的成员只能是对象，不能是其他类型的值。并且WeakSet内的对象都是弱引用，也就是说其他对象不再引用该对象，垃圾回收机制会自动回收该对象占用的内存，不考虑这个对象还存在于WeakSet中。因此WeakSet中的值是否还在取决于垃圾回收机制何时运行，ES6规定WeakSet不允许遍历</p><h2>三. Map</h2><p>ES6提供了新的数据结构<code>Map</code>，</p><p><strong>Map和Object的区别</strong></p><ul><li><strong>本质</strong>：二者本质都是键值对的集合</li><li><strong>键</strong>：JS的对象<code>Object</code>传统上只能用字符串做键，但<code>Map</code>的键可以是各种类型，是一种更完善的Hash结构</li><li><strong>操作方法</strong>：Map的取值和赋值，是通过<code>get</code>/<code>set</code>来实现，Object的取值和赋值，是通过<code>.</code>/<code>[]</code>来实现，二者都可以通过<code>delete</code>删除键值对</li><li><strong>创建</strong>：任何具有Iterator接口、且每个成员都是一个双元素数组的数据结构都可以当做<code>Map</code>构造函数的参数</li></ul>",5),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"set"),Object(t["g"])(" = new Set([['foo', 1], ['bar', 2]])\nconst m1 = new Map("),Object(t["h"])("span",{class:"hljs-keyword"},"set"),Object(t["g"])(")\nm1."),Object(t["h"])("span",{class:"hljs-keyword"},"get"),Object(t["g"])("('foo') // 1\n\nconst m2 = new Map()."),Object(t["h"])("span",{class:"hljs-keyword"},"set"),Object(t["g"])("(true, 7)."),Object(t["h"])("span",{class:"hljs-keyword"},"set"),Object(t["g"])("({foo: "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("}, ["),Object(t["h"])("span",{class:"hljs-string"},"'abc'"),Object(t["g"])("])\n[...myMap] "),Object(t["h"])("span",{class:"hljs-comment"},"// [[true, 7], [{foo: 3}, ['abc']]]"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Map"),Object(t["g"])("([["),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"7"),Object(t["g"])("], [{"),Object(t["h"])("span",{class:"hljs-attr"},"foo"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("}, ["),Object(t["h"])("span",{class:"hljs-string"},"'abc'"),Object(t["g"])("]]])\n"),Object(t["h"])("span",{class:"hljs-comment"},"// Map{true: 7, {foo:3}: ['abc']}"),Object(t["g"])("\n")])],-1),o=Object(t["f"])("<p><strong>Map和WeakMap的区别</strong></p><ul><li>WeakMap只接受对象作为键名，不接受其他类型的值作为键名</li><li>WeakMap键名所指向的对象，不计入垃圾回收机制，也就是WeakMap的键名所引用的对象都是弱引用，垃圾回收机制不会将WeakMap与键名之间的引用考虑在内，一旦不再需要，就会被清除。鉴于此，WeakMap的键名随时都可能消失，所以不能取键名，没有<code>keys</code>、<code>values</code>、<code>entries</code>这些方法，也不能用<code>clear</code>清空，只能使用<code>get</code>/<code>set</code>/<code>has</code>/<code>delete</code></li></ul>",2);function O(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o])}const r={};r.render=O;s["default"]=r},b419:function(e,s,c){"use strict";c("6a7c")},b5c2:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>我们在上一篇<a href="https://zhangmingemma.github.io/#/post?file=2022-10-19-ES6%20Data%20Type" target="_blank">《ES6系列之数据类型》</a>中讲<code>Set</code>数据类型的时候，提到<code>(new Set()).keys()</code>会返回<code>SetIterator</code>，那<code>Iterator</code>是什么呢？</p><h3>1. 简介</h3><p>JS原有的表示集合的数据结构，主要是数组和对象，ES6中又添加了<code>Map</code>和<code>Set</code>，这样就有了四种数据结构，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是<code>Map</code>，<code>Map</code>的成员是对象，这样就需要一种统一的接口机制来处理所有不同的数据结构，<code>Iterator</code>就是这样一种机制，为不同的数据结构提供统一的访问机制。任何数据结构只要部署<code>Iterator</code>接口，就可以完成遍历操作。</p><p><strong>Iterator的作用</strong>有三个：</p><ul><li>为各种数据结构，提供一个统一的访问接口</li><li>使得数据结构的成员能够按某种次序排列</li><li>ES6创造了一种新的遍历命令<code>for...of</code>，<code>Iterator</code>接口主要供<code>for...of</code>消费</li></ul><p><strong>Iterator的遍历过程</strong>：</p><ul><li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象</li><li>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员</li><li>第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员</li><li>不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置</li></ul><p><strong>每次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中<code>value</code>属性时当前成员的值，<code>done</code>表示遍历是否结束，即是否有必要再一次调用next方法。</strong></p><h3>2. Symbol.iterator</h3><p>ES6规定，默认的<code>Iterator</code>接口部署在数据结构的<code>Symbol.iterator</code>属性，或者说，一个数据结构只要具有<code>Symbol.iterator</code>属性，就认为是<code>可遍历的</code>。<code>Symbol.iterator</code>属性本身是一个函数，就是当前数据结构默认的遍历器生成函数，执行这个函数就会返回一个遍历器。这个遍历器包含<code>value</code>和<code>done</code>。ES6的部分数据结构原生具备<code>Iterator</code>接口，不用任何处理，这些数据结构也是自动具备<code>Symbol.iterator</code>的属性，可以用<code>next</code>访问下一个节点，返回<code>value</code>和<code>done</code></p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的arguments对象</li><li>NodeList对象</li></ul>',11),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" arr = ["),Object(t["h"])("span",{class:"hljs-string"},"'a'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'c'"),Object(t["g"])("]\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" iter = arr["),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])(".iterator]()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:'a', done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:'b', done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:'c', done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:undefined, done:true}"),Object(t["g"])("\n\n")])],-1),a=Object(t["h"])("p",null,[Object(t["g"])("如果不是自己自带"),Object(t["h"])("code",null,"Iterator"),Object(t["g"])("接口，可以自己定义"),Object(t["h"])("code",null,"Symbol.iterator"),Object(t["g"])("属性，实现相同的遍历，比如对象上定义"),Object(t["h"])("code",null,"Symbol.iterator"),Object(t["g"])("属性的例子是：")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" obj = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"data"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'world'"),Object(t["g"])("],\n    ["),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])(".iterator]() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" index = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            next() {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (index < self.data.length) {\n                    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n                        "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(": self.data[index++],\n                        "),Object(t["h"])("span",{class:"hljs-attr"},"done"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])("\n                    }\n                }\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" { "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"done"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(" }\n            }\n        }\n    }\n}\n")])],-1),b=Object(t["h"])("p",null,[Object(t["g"])("有一些场合会默认调用"),Object(t["h"])("code",null,"Iterator"),Object(t["g"])("接口，即"),Object(t["h"])("code",null,"Symbol.iterator"),Object(t["g"])("方法")],-1),h=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"for...of"),Object(t["h"])("li",null,"解构赋值"),Object(t["h"])("li",null,"扩展运算符"),Object(t["h"])("li",null,"yield *")],-1),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" generator = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("* ("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])("* ["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])("];\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])(";\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" iter = generator()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:1, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:2, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:3, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:4, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:5, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:undefined, done:true}"),Object(t["g"])("\n")])],-1),O=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"Array.from()"),Object(t["h"])("li",null,"Map()、Set()、WeakMap()、WeakSet()"),Object(t["h"])("li",null,"Promise.all()"),Object(t["h"])("li",null,"Promise.race()")],-1),r=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"字符串的Iterator")],-1),g=Object(t["h"])("p",null,"字符串也原生具有Iterator接口",-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" string = "),Object(t["h"])("span",{class:"hljs-string"},"'hi'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" iter = string["),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])(".iterator]()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:'h', done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:'i', done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(iter.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:undefined, done:true}"),Object(t["g"])("\n")])],-1),i=Object(t["f"])("<h3>3. 遍历语法的比较</h3><p>我们常见的遍历方法包含有<code>for循环</code>、 <code>forEach</code>、 <code>for...in</code>、 <code>for...of</code>。</p><ul><li><strong>for循环</strong>：写法比较麻烦</li><li><strong>forEach</strong>：无法中途跳出循环，<code>break</code>和<code>return</code>都不能奏效</li><li><strong>for in</strong>：可以遍历键名，但键名是字符串类型的，数组的话遍历的是数组的索引值；会以任意顺序遍历键名；但可以搭配<code>break</code>、 <code>continue</code>和<code>return</code>使用</li></ul>",3),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" string = ["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("]\n"),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" str "),Object(t["h"])("span",{class:"hljs-keyword"},"in"),Object(t["g"])(" string) {\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-built_in"},"parseInt"),Object(t["g"])("(str) > "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"break"),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(str, "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" str)\n}\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 0 string"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 1 string"),Object(t["g"])("\n")])],-1),u=Object(t["h"])("ul",null,[Object(t["h"])("li",null,[Object(t["h"])("strong",null,"for of"),Object(t["g"])("：可以遍历键值，数组也是一样的，会输出正确类型；可以与"),Object(t["h"])("code",null,"break"),Object(t["g"])("、 "),Object(t["h"])("code",null,"continue"),Object(t["g"])("和"),Object(t["h"])("code",null,"return"),Object(t["g"])("搭配使用；语法简洁")])],-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" string = ["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])("]\n"),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" str "),Object(t["h"])("span",{class:"hljs-keyword"},"in"),Object(t["g"])(" string) {\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-built_in"},"parseInt"),Object(t["g"])("(str) > "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"break"),Object(t["g"])("\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(str, "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" str)\n}\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 1 number"),Object(t["g"])("\n")])],-1);function y(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m])}const f={};f.render=y;s["default"]=f},b5dd:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"闭包"),Object(t["g"])("是指有权访问另一个函数作用域中的变量的函数，创建闭包最常用的方式就是在一个函数内部创建另一个函数")],-1),l=Object(t["h"])("h3",null,"1. 闭包的作用",-1),a=Object(t["h"])("p",null,[Object(t["g"])("因为闭包可以读取到另一个函数内部的变量，所以可以让这些变量的值始终保存在内存中。第一个应用场景就是"),Object(t["h"])("strong",null,"用闭包来模拟私有方法，封装私有变量，实现JS模块"),Object(t["g"])("。私有方法不仅仅有利于限制对代码的访问，还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱代码的公共接口部分。")],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" Counter = ("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(")")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" privateCounter = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"changeBy"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"val"),Object(t["g"])(") ")]),Object(t["g"])("{\n        privateCounter += val\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"increment"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            changeBy("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n        },\n        "),Object(t["h"])("span",{class:"hljs-attr"},"decrement"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            changeBy("),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])(")\n        },\n        "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" privateCounter\n        }\n    }\n})()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(Counter.value())\nCounter.increment()\nCounter.increment()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(Counter.value())\nCounter.decrement()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(Counter.value())\n")])],-1),b=Object(t["f"])("<p>上面的示例就是运用了闭包的方式，创建了一个词法环境，为三个函数共享<code>Counter.increment</code>、<code>Counter.decrement</code>、<code>Counter.value</code>。<strong>这个共享的词法环境创建于一个立即执行的匿名函数体内</strong>。这个环境中包含两个私有项：<code>privateCounter</code>和<code>changeBy</code>，是在这个共享词法环境之外是无法直接访问的，必须通过匿名函数返回的三个公共函数访问。</p><p>再看另一个的例子，可以看到<code>Counter1</code>和<code>Counter2</code>两个计时器是通过两个闭包创建的，不会互相影响，<strong>以这种方式使用闭包，提供了许多与面向对象变成相关的好处，特别是数据隐藏和封装</strong>。</p>",2),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" makeCounter = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(")")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" privateCounter = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"changeBy"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"val"),Object(t["g"])(") ")]),Object(t["g"])("{\n        privateCounter += val\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"increment"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            changeBy("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n        },\n        "),Object(t["h"])("span",{class:"hljs-attr"},"decrement"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            changeBy("),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])(")\n        },\n        "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" privateCounter\n        }\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" Counter1 = makeCounter()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" Counter2 = makeCounter()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(Counter1.value()) "),Object(t["h"])("span",{class:"hljs-comment"},"// 0"),Object(t["g"])("\nCounter1.increment()\nCounter1.increment()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(Counter1.value()) "),Object(t["h"])("span",{class:"hljs-comment"},"// 2"),Object(t["g"])("\nCounter1.decrement()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(Counter1.value()) "),Object(t["h"])("span",{class:"hljs-comment"},"// 1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(Counter2.value()) "),Object(t["h"])("span",{class:"hljs-comment"},"// 0"),Object(t["g"])("\n")])],-1),o=Object(t["h"])("h3",null,"2. 闭包的性能",-1),O=Object(t["h"])("p",null,"闭包对内存消耗有负面影响，闭包会导致原始作用域链不释放（因为内部函数保存了对外部变量的引用），造成内存泄漏。对处理速度有负面影响，闭包的层级决定了引用的外部变量在查找时经过的作用域长度。",-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"foo"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" name = "),Object(t["h"])("span",{class:"hljs-string"},"'foo'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" age = "),Object(t["h"])("span",{class:"hljs-number"},"20"),Object(t["g"])("\n\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"bar"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(name)\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(age)\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" bar\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" fn = foo()\nfn()\n")])],-1),g=Object(t["f"])("<p><strong>内存泄漏</strong>：上面的例子中，<code>fn</code>函数调用完，<code>foo</code>函数就会被自动销毁，但是<code>foo</code>中的变量<code>name</code>和<code>age</code>不会被销毁，因为<code>bar</code>内部对这两个变量进行了调用。如果该函数调用的次数很少，不进行销毁就会造成闭包的内存泄漏。要解决内存泄漏，就要使<code>fn=null</code>。</p><p>再举一个例子内存泄漏的例子，下面的例子中<code>arraydegree</code>中的<code>arr</code>大概是<code>4m</code>左右，数字<code>1</code>在内存中是<code>2</code>个字节，一个<code>arr</code>是<code>1024*1024</code>字节，大概就是<code>4m</code>，在<code>10s</code>的循环中，生成100个到函数<code>arrayFns</code>中，最终内存达到<code>400</code></p>",2),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"arraydegree"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" arr = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-number"},"1024"),Object(t["g"])("*"),Object(t["h"])("span",{class:"hljs-number"},"1024"),Object(t["g"])(").fill("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(arr)\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" arrayFns = []\n"),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<"),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])("; i++) {\n    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        arrayFns.push(arraydegree())\n    }, i*"),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])(")\n}\n")])],-1),i=Object(t["h"])("p",null,"要想解决内存泄漏的问题，则",-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"arraydegree"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" arr = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-number"},"1024"),Object(t["g"])("*"),Object(t["h"])("span",{class:"hljs-number"},"1024"),Object(t["g"])(").fill("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(arr)\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" arrayFns = []\n"),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<"),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])("; i++) {\n    setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n        arrayFns.push(arraydegree())\n    }, i*"),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])(")\n}\n\nsetTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<"),Object(t["h"])("span",{class:"hljs-number"},"50"),Object(t["g"])("; i++) {\n        setTimeout("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n            arrayFns.pop()\n        }, i*"),Object(t["h"])("span",{class:"hljs-number"},"100"),Object(t["g"])(")\n    }\n}, "),Object(t["h"])("span",{class:"hljs-number"},"10000"),Object(t["g"])(")\n")])],-1);function u(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d])}const m={};m.render=u;s["default"]=m},b601:function(e,s,c){},b81d:function(e,s,c){"use strict";var t=c("53ca"),n=c("5530"),l=c("1da1"),a=c("d4ec"),j=c("bee2"),b=(c("c740"),c("b0c0"),c("4de4"),c("18a5"),c("99af"),c("d81d"),c("ac1f"),c("1276"),c("498a"),c("5319"),c("a15b"),c("466d"),c("fb6a"),c("96cf"),c("a1e9")),h=c("5c40"),o=c("bc3a"),O=c.n(o),r=c("62b5"),g=c("a7bb"),p=c("1487"),i=c.n(p),d=c("597d"),u=c("0e54"),m=c("589c");u.setOptions({renderer:new u.Renderer,gfm:!0,tables:!0,breaks:!0,pedantic:!1,smartLists:!0,smartypants:!0,highlight:function(e){return i.a.highlightAuto(e).value}});var y=function(){function e(){Object(a["a"])(this,e),this.Post={}}return Object(j["a"])(e,[{key:"postCompiler",value:function(e){var s=Object(b["k"])(""),c=Object(b["k"])(""),t=Object(b["j"])({catalogOffset:null,post:{},prePost:null,nextPost:null,sameSetPostList:[]}),a=Object(g["e"])(this.getPostInfo(e)),j=a.res;Object(h["P"])(Object(l["a"])(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:if(!j.value||!j.value.content){e.next=10;break}return t.post=j.value,s.value=u(j.value.content),e.next=5,Object(h["s"])();case 5:return c.value=r["a"].getCatalogHtml(),r["a"].setHId(),e.next=9,Object(h["s"])();case 9:t.catalogOffset=r["a"].getCatalogOffset(!0);case 10:case"end":return e.stop()}}),e)}))));var o=d["a"].listCompiler({banPagination:!0});return Object(h["P"])((function(){if(o.postList){var s,c,n=o.postList.value.findIndex((function(s){return s.name==e}));t.prePost=(null===(s=o.postList.value)||void 0===s?void 0:s[n+1])||null,t.nextPost=(null===(c=o.postList.value)||void 0===c?void 0:c[n-1])||null,t.post.set&&(t.sameSetPostList=o.postList.value.filter((function(e){return e.set==t.post.set})))}})),window.onresize=function(){t.catalogOffset=r["a"].getCatalogOffset(!0)},Object(n["a"])(Object(n["a"])({postHtml:s,catalogHtml:c},Object(b["r"])(t)),{},{anchor:r["a"].anchor})}},{key:"getPostInfo",value:function(){var e=Object(l["a"])(regeneratorRuntime.mark((function e(s){var c,t,n,l;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:if(s){e.next=2;break}return e.abrupt("return",{});case 2:return e.next=4,O.a.get("".concat(Object(g["c"])(),"/").concat(s,".md"));case 4:return c=e.sent,t=c.data,n={},t&&(n["content"]=t,n["abstract"]=this.getPostAbstract(t),n["name"]=this.getPostName(s),l=this.matchPostBase(t),l&&l.length>=4&&(n["title"]=l[1],n["date"]=l[2],n["tags"]=l[3].split(",").map((function(e){return e.trim()})),n["set"]=((null===l||void 0===l?void 0:l[4])||"").replace("set: ",""))),e.abrupt("return",n);case 9:case"end":return e.stop()}}),e,this)})));function s(s){return e.apply(this,arguments)}return s}()},{key:"getPostName",value:function(e){if(e){var s=e.split("/");if(s&&s.length){var c=s.pop();if(c)return c.replace(/\.\w+$/,"")}}return""}},{key:"matchPostBase",value:function(e){var s=e.split("\n").map((function(e){return e.trim()})).join("");return s.match(/-+title: (.*?)date: (.*?)tags: (.*?)((set: (.*?))?)-+/)}},{key:"getPostAbstract",value:function(e){var s=e.match(/--- -->(\s+(.*))+/);if(s&&s.length>=1){var c=null===s||void 0===s?void 0:s[0].replace("--- --\x3e",""),t=m.parse(c.trim()),n=this.parseMarkAst(t).slice(0,500);return n+"..."}return""}},{key:"parseMarkAst",value:function(e){var s=this,c="";return e&&e.length&&e.map((function(e){var n;["paragraph","heading","strong","em"].indexOf(null===e||void 0===e?void 0:e.type)>=0&&e.text&&e.text.length&&e.text.map((function(e){if("string"===typeof e)c+=s.getAstText(e);else if("object"===Object(t["a"])(e)){var n,l=null===e||void 0===e||null===(n=e.text)||void 0===n?void 0:n[0];l&&"string"===typeof l&&(c+=l.replaceAll("\n","").trim())}})),"list"===(null===e||void 0===e?void 0:e.type)&&null!==e&&void 0!==e&&null!==(n=e.body)&&void 0!==n&&n.length&&e.body.map((function(t){"listitem"===t.type&&(c+=s.parseMarkAst(e))}))})),c}},{key:"getAstText",value:function(e){var s=e.replaceAll("\n","").trim(),c=s.replace(/<[^>]+>/g," ");return c}}]),e}();s["a"]=new y},ba5d:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("h3",null,"一. 浅拷贝",-1),l=Object(t["h"])("p",null,"浅拷贝是指只复制第一层对象，但是当对象的属性时引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。浅拷贝的实现包含有很多方法：",-1),a=Object(t["h"])("h4",null,"1. 完全浅拷贝",-1),j=Object(t["h"])("p",null,"完全浅拷贝就是每一层都是相同的引用地址。常见的赋值可以实现完全浅拷贝",-1),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objA = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"number"),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"first"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"a"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"555"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"second"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"666"),Object(t["g"])("\n}}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objB = objA;\nobjB.number.first.a = "),Object(t["h"])("span",{class:"hljs-number"},"999"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objA: `"),Object(t["g"])(", objA.number.first.a);   "),Object(t["h"])("span",{class:"hljs-comment"},"// 999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objB: `"),Object(t["g"])(", objB.number.first.a);   "),Object(t["h"])("span",{class:"hljs-comment"},"// 999"),Object(t["g"])("\n")])],-1),h=Object(t["h"])("h4",null,"2. 不完全浅拷贝",-1),o=Object(t["h"])("p",null,"也就是部分浅拷贝，第一层是深拷贝的，引用地址不同，第二层及以上都是相同的引用地址。常见的实现方法有：",-1),O=Object(t["h"])("h5",null,"1). Object.assign",-1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objA = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"number"),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"first"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"a"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"555"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"second"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"666"),Object(t["g"])("\n}}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objB = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".assign({}, objA)\nobjB.name = "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\nobjB.number.second = "),Object(t["h"])("span",{class:"hljs-number"},"888"),Object(t["g"])("\nobjB.number.first.a = "),Object(t["h"])("span",{class:"hljs-number"},"999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objA: `"),Object(t["g"])(", objA.name, objA.number.second, objA.number.first.a);   "),Object(t["h"])("span",{class:"hljs-comment"},"// objA: Kevin 888 999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objB: `"),Object(t["g"])(", objB.name, objB.number.second, objB.number.first.a);  "),Object(t["h"])("span",{class:"hljs-comment"},"// objB: Gemma 888 999"),Object(t["g"])("\n")])],-1),g=Object(t["h"])("h5",null,"2). 扩展运算符",-1),p=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objA = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"number"),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"first"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"a"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"555"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"second"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"666"),Object(t["g"])("\n}}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objB = { ...objA }\nobjB.name = "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\nobjB.number.second = "),Object(t["h"])("span",{class:"hljs-number"},"888"),Object(t["g"])("\nobjB.number.first.a = "),Object(t["h"])("span",{class:"hljs-number"},"999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objA: `"),Object(t["g"])(", objA.name, objA.number.second, objA.number.first.a);   "),Object(t["h"])("span",{class:"hljs-comment"},"// objA: Kevin 888 999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objB: `"),Object(t["g"])(", objB.name, objB.number.second, objB.number.first.a);  "),Object(t["h"])("span",{class:"hljs-comment"},"// objB: Gemma 888 999"),Object(t["g"])("\n")])],-1),i=Object(t["h"])("h5",null,"3). slice",-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" arrA = [ "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(", [ "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(", ["),Object(t["h"])("span",{class:"hljs-number"},"5"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"6"),Object(t["g"])("]]]\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" arrB = arrA.slice();\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(arrB)\narrA["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("] = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(";\narrA["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("] = "),Object(t["h"])("span",{class:"hljs-number"},"20"),Object(t["g"])(";\narrA["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("] = "),Object(t["h"])("span",{class:"hljs-number"},"220"),Object(t["g"])(";\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(arrA["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("], arrA["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("], arrA["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]);   "),Object(t["h"])("span",{class:"hljs-comment"},"//   0 20   220"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(arrB["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("], arrB["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("], arrB["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("]["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]);   "),Object(t["h"])("span",{class:"hljs-comment"},"//   1 20   220"),Object(t["g"])("\n")])],-1),u=Object(t["h"])("h5",null,"4). Object.create",-1),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objA = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"number"),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"first"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"a"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"555"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"second"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"666"),Object(t["g"])("\n}}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objB = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".create(objA)\nobjB.name = "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\nobjB.number.second = "),Object(t["h"])("span",{class:"hljs-number"},"888"),Object(t["g"])("\nobjB.number.first.a = "),Object(t["h"])("span",{class:"hljs-number"},"999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objA: `"),Object(t["g"])(", objA.name, objA.number.second, objA.number.first.a);   "),Object(t["h"])("span",{class:"hljs-comment"},"// objA: Kevin 888 999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objB: `"),Object(t["g"])(", objB.name, objB.number.second, objB.number.first.a);  "),Object(t["h"])("span",{class:"hljs-comment"},"// objB: Gemma 888 999"),Object(t["g"])("\n")])],-1),y=Object(t["h"])("h3",null,"二. 深拷贝",-1),f=Object(t["h"])("p",null,[Object(t["g"])("深拷贝就是实现拷贝，但每一层都是不同的引用地址。可以"),Object(t["h"])("strong",null,"判断基本类型则直接返回即是完成拷贝，如果是数组或对象，就通过层层遍历去递归进行拷贝")],-1),w=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" deepCopy = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" target != "),Object(t["h"])("span",{class:"hljs-string"},"'object'"),Object(t["g"])(" || target === "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// 非引用类型，就没必要层层嵌套了，就直接拷贝就好了"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" target \n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" result = "),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".isArray(target) ? [] : {}\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" key "),Object(t["h"])("span",{class:"hljs-keyword"},"in"),Object(t["g"])(" target) {\n        result[key] = deepCopy(target[key])\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" result\n}\n")])],-1),k=Object(t["h"])("p",null,"测试一下",-1),v=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objA = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'Kevin'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-attr"},"number"),Object(t["g"])(": {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"first"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"a"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"555"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"second"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"666"),Object(t["g"])("\n}}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" objB = deepCopy(objA)\nobjB.name = "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\nobjB.number.second = "),Object(t["h"])("span",{class:"hljs-number"},"888"),Object(t["g"])("\nobjB.number.first.a = "),Object(t["h"])("span",{class:"hljs-number"},"999"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objA: `"),Object(t["g"])(", objA.name, objA.number.second, objA.number.first.a);   "),Object(t["h"])("span",{class:"hljs-comment"},"// objA: Kevin 555 666"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"`objB: `"),Object(t["g"])(", objB.name, objB.number.second, objB.number.first.a);   "),Object(t["h"])("span",{class:"hljs-comment"},"// objB: Gemma 888 999"),Object(t["g"])("\n")])],-1),x=Object(t["h"])("p",null,"如果存在循环引用的话，这个深拷贝的逻辑就行不通了，来看个例子会报错",-1),S=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" target = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"f1"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"f2"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"undefined"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"f3"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"child"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'child'"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"f4"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"8"),Object(t["g"])("]\n}\ntarget.target = target\n\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(deepCopy(target)) "),Object(t["h"])("span",{class:"hljs-comment"},"// Uncaught RangeError: Maximum call stack size exceeded"),Object(t["g"])("\n")])],-1),P=Object(t["h"])("p",null,[Object(t["g"])("要"),Object(t["h"])("strong",null,"解决循环引用的问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中去找，有没有拷贝这个对象，如果有的话直接返回，如果没有的话继续拷贝，这样就可以巧妙化解循环引用的问题"),Object(t["g"])("。")],-1),_=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"deepCopy"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target, map = new Map("),Object(t["g"])(")) ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" target != "),Object(t["h"])("span",{class:"hljs-string"},"'object'"),Object(t["g"])(" || target === "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" target\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" result = "),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".isArray(target) ? [] : {}\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (map.get(target)) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" map.get(target)\n    }\n    map.set(target, result)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" key "),Object(t["h"])("span",{class:"hljs-keyword"},"in"),Object(t["g"])(" target) {\n        result[key] = deepCopy(target[key], map)\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" result\n}\n")])],-1),C=Object(t["f"])("<p>进而还可以对上述的代码进行优化</p><ul><li>用<code>weakMap</code>来代替<code>map</code>，让<code>key</code>和<code>target</code>存在弱利用关系，<code>weakMap</code>可以化解手动释放内存的。</li><li>用<code>while</code>来代替<code>for in</code>循环，来提升效率</li><li>将数据类型划分为可遍历、不可遍历两类去分别处理，其中可遍历的数据类型包含<code>Object</code>、<code>Array</code>、<code>Map</code>、<code>Set</code>、<code>WeakMap</code>、<code>WeakSet</code></li></ul>",2),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"isBasicType"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" target === "),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        || ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" target != "),Object(t["h"])("span",{class:"hljs-string"},"'object'"),Object(t["g"])(" && "),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" target != "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(")\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"getDataType"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".prototype.toString.call(target)\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"cloneRegExp"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" reFlags = "),Object(t["h"])("span",{class:"hljs-regexp"},"/\\w*$/"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" result= "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Ctor(target.source, reFlags.exec(target))\n    result.lastIndex = target.lastIndex\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" result\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"cloneFunction"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"func"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" bodyReg = "),Object(t["h"])("span",{class:"hljs-regexp"},"/(?<={)(.|\\n)+(?=})/"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" paramReg = "),Object(t["h"])("span",{class:"hljs-regexp"},"/(?<=\\().+(?=\\)\\s+{)/"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" funcStr = func.toString()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])("(func.prototype) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" param = paramReg.exec(funcStr)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" body = bodyReg.exec(funcStr)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (body) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (param) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" paramArr = param["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("].split("),Object(t["h"])("span",{class:"hljs-string"},"','"),Object(t["g"])(")\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])("(...paramArr, body["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("])\n            } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])("(body["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("])\n            }\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])("\n        }\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"eval"),Object(t["g"])("(funcStr)\n    }\n\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"deepCopy"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target, map = new WeakMap("),Object(t["g"])(")) ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 基本类型直接返回"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isBasicType(target)) "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" target\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 解决循环引用问题"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" Ctor = target.constructor\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" result = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Ctor()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (map.get(target)) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" map.get(target)\n    }\n    map.set(target, result)\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 克隆Set和WeakSet"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" dataType = getDataType(target)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dataType == "),Object(t["h"])("span",{class:"hljs-string"},"'Set'"),Object(t["g"])(" || dataType == "),Object(t["h"])("span",{class:"hljs-string"},"'WeakSet'"),Object(t["g"])(") {\n        target.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"value"),Object(t["g"])(" =>")]),Object(t["g"])(" {\n            result.add(deepCopy(value, map))\n        })\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" result\n    }\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 克隆Map和WeakMap"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dataType == "),Object(t["h"])("span",{class:"hljs-string"},"'Map'"),Object(t["g"])(" || dataType == "),Object(t["h"])("span",{class:"hljs-string"},"'WeakMap'"),Object(t["g"])(") {   \n        target.forEach("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"value,key"),Object(t["g"])(") =>")]),Object(t["g"])(" {\n            result.set(key, deepCopy(value, map))\n        })\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" result\n    }\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 克隆不可遍历的数据类型（包含包装类型）"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 1) Bool、String、Number、Date、RegExp、Error"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (["),Object(t["h"])("span",{class:"hljs-string"},"'String'"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-string"},"'Number'"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-string"},"'Boolean'"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-string"},"'Error'"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-string"},"'Date'"),Object(t["g"])("].includes(dataType)) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Ctor(target)\n    }\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 2) RegExp"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dataType == "),Object(t["h"])("span",{class:"hljs-string"},"'RegExp'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" cloneRegExp(target)\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 3) Symbol"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dataType == "),Object(t["h"])("span",{class:"hljs-string"},"'Symbol'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])(".prototype.valueOf.call(target))\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 4) Function"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (dataType == "),Object(t["h"])("span",{class:"hljs-string"},"'Function'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" cloneFunction(target)\n\n    "),Object(t["h"])("span",{class:"hljs-comment"},"// 解决Array和Object的循环拷贝"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" keys = "),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".isArray(target) ? target : "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".keys(target)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" index = "),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])("(++index < keys.length) {\n        result[keys[index]] = deepCopy(target[keys[index]], map)\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" result\n}\n")])],-1);function I(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T])}const E={};E.render=I;s["default"]=E},baeb:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>JS在一些操作符下类型会做一些变化，所以JS灵活，也易出错，并且难以理解。涉及隐式转换最多的是两个运算符<code>+</code>和<code>==</code>。其中<code>+</code>运算符即可数字相加，也可以字符串相加，所以转换的时候会很麻烦，<code>==</code>不同于<code>===</code>，故也存在隐式转换，但像<code>-*/</code>这些运算符只会针对<code>number</code>，因此转换的结果也只能是转换为<code>number</code>类型。</p><p>隐式转换中主要涉及到三种转换：</p><ul><li>将值转为原始值，<code>ToPrimitive()</code></li><li>将值转为数字，<code>ToNumber()</code></li><li>将值转为字符串，<code>ToString()</code></li></ul><h3>一. ToPrimitive将值转为原始值</h3><p>JS引擎内部的抽象操作<code>ToPrimitive</code>的使用方法是<code>ToPrimitive(input, preferredType)</code> 其中<code>input</code>是要转换的值，<code>preferredType</code>是可选参数，可以是<code>Number</code>或<code>String</code>类型，只是一个转换标志，转换后的结果并不一定是这个参数所指的类型，但转换结果一定是一个原始值</p><h4>1. 如果<code>preferredType</code>是<code>Number</code></h4><ul><li>如果输入的值已经是一个原始值，直接返回</li><li>如果输入的值是一个对象，调用对象的<code>valueOf()</code>。如果对象的<code>valueOf()</code>返回值是一个原始值，则直接返回；否则，调用对象的<code>toString()</code>，如果返回值是一个原始值，则返回这个原始值，否则抛出<code>TypeError</code>异常</li></ul><h4>2. 如果<code>preferredType</code>是<code>String</code></h4><ul><li>如果输入的值已经是一个原始值，直接返回</li><li>如果输入的值是一个对象，调用对象的<code>valueOf()</code>。如果对象的<code>valueOf()</code>返回值是一个原始值，则直接返回；否则，调用对象的<code>toString()</code>，如果返回值是一个原始值，则返回这个原始值，否则抛出<code>TypeError</code>异常</li></ul><h4>3. 如果<code>preferredType</code>不填</h4><ul><li>如果对象为<code>Date</code>类型，则<code>preferredType</code>则设置为<code>String</code>，否则<code>preferredType</code>被设置为<code>Number</code></li></ul><h4>4. <code>valueOf</code>和<code>toString</code></h4><p>所有对象都有<code>valueOf</code>和<code>toString</code>的方法，在<code>Object.prototype</code>上面。首先我们来看看<code>valueOf</code>转换的结果是什么？</p><p><strong>1) <code>Number</code>、<code>Boolean</code>和<code>String</code>这三种构造函数生成的基础值对象形式，通过<code>valueOf</code>转换后会变成相应的原始值</strong></p>",14),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" num = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'123'"),Object(t["g"])(")\nnum.valueOf() "),Object(t["h"])("span",{class:"hljs-comment"},"// 123"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" str = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'12df'"),Object(t["g"])(")\nstr.valueOf() "),Object(t["h"])("span",{class:"hljs-comment"},"// 12df"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" bool = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'fd'"),Object(t["g"])(")\nbool.valueOf() "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),a=Object(t["h"])("p",null,[Object(t["h"])("strong",null,[Object(t["g"])("2) Date这种特殊对象，其原型"),Object(t["h"])("code",null,"Date.prototype"),Object(t["g"])("内置"),Object(t["h"])("code",null,"valueOf"),Object(t["g"])("函数将日期转换为日期的毫秒的形式的数值")])],-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])("()\na.valueOf() "),Object(t["h"])("span",{class:"hljs-comment"},"// 1668866962913"),Object(t["g"])("\n")])],-1),b=Object(t["f"])("<p><strong>3) 除<code>Number</code>、<code>Boolean</code>和<code>String</code>、<code>Date</code>之外，<code>valueOf</code>返回的都是<code>this</code>，即对象本身</strong></p>",1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])("()\na.valueOf() === a  "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" b = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])("()\nb.valueOf() === b  "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" sym = "),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])("()\nsym.valueOf() === sym "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),o=Object(t["f"])("<p><strong>4) <code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>、<code>Symbol</code>这几种构造函数生成的对象，通过<code>toString</code>转换后会变成相应的字符串的形式，因为这些构造函数上都封装了自己的<code>toString</code>方法。</strong></p>",1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])(".prototype.hasOwnProperty("),Object(t["h"])("span",{class:"hljs-string"},"'toString'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])(".prototype.hasOwnProperty("),Object(t["h"])("span",{class:"hljs-string"},"'toString'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])(".prototype.hasOwnProperty("),Object(t["h"])("span",{class:"hljs-string"},"'toString'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])(".prototype.hasOwnProperty("),Object(t["h"])("span",{class:"hljs-string"},"'toString'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])(".prototype.hasOwnProperty("),Object(t["h"])("span",{class:"hljs-string"},"'toString'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"RegExp"),Object(t["g"])(".prototype.hasOwnProperty("),Object(t["h"])("span",{class:"hljs-string"},"'toString'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(".prototype.hasOwnProperty("),Object(t["h"])("span",{class:"hljs-string"},"'toString'"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" num = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Number"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'123sd'"),Object(t["g"])(")\nnum.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// 'NaN'"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" str = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"String"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'12df'"),Object(t["g"])(")\nstr.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// '12df'"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" bool = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Boolean"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'fd'"),Object(t["g"])(")\nbool.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// 'true'"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" arr = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Array"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\narr.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// 1,2"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" date = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Date"),Object(t["g"])("()\ndate.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// Sat Nov 19 2022 22:47:59 GMT+0800 (中国标准时间)"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" reg = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"RegExp"),Object(t["g"])("()\nreg.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// /(?:)/"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" func = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{}\nfunc.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// function() {}"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" symbol = "),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])("()\nsymbol.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// Symbol()"),Object(t["g"])("\n")])],-1),r=Object(t["f"])("<p><strong>5) 除<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>之外，其他对象都是返回<code>Object.prototype.toString</code></strong></p>",1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" obj = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])("({})\nobj.toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Object]"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".toString() "),Object(t["h"])("span",{class:"hljs-comment"},"// [object Math]"),Object(t["g"])("\n")])],-1),p=Object(t["f"])("<p>总之，总结一下<code>ToPrimitive</code>转换数字的整体步骤是，<code>toPrimitive(input, preferredType)</code>有两个入参，第一个是转换的值，第二个是建议转换的类型，只能是<code>Number</code>或<code>String</code>。</p><ul><li>当<code>preferredType</code>是<code>Number</code>时，<code>input</code>为原始值，则输出原始值，<code>input</code>为非原始值时，先用<code>valueOf</code>判断，<code>valueOf</code>还无法输出原始值，则利用<code>toString()</code>判断并输出原始值，否则输出<code>TypeError</code></li><li>当<code>preferredType</code>是<code>String</code>时，<code>input</code>为原始值，则输出原始值，<code>input</code>为非原始值时，先用<code>valueOf</code>判断，<code>valueOf</code>还无法输出原始值，则利用<code>toString()</code>判断并输出原始值，否则输出<code>TypeError</code></li><li>当<code>preferredType</code>不填时，<code>input</code>为<code>Date</code>类型，则设定<code>preferredType</code>为<code>String</code>，<code>input</code>为其他类型时，则设定<code>preferredType</code>为<code>Number</code></li></ul><p>其中需要<code>valueOf</code>来判断则：</p><ul><li>针对<code>Number</code>、<code>String</code>和<code>Boolean</code>包装类型，<code>valueOf</code>将会转换为其原始值</li><li>针对<code>Date</code>类型，<code>valueOf</code>输出对应的毫秒时间戳</li><li>针对其他类型，<code>valueOf</code>输出对象本身</li></ul><p>需要<code>toString</code>来判断则：</p><ul><li>针对<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>、<code>Symbol</code>，<code>toString</code>输出对应的字符串</li><li>针对<code>Object</code>和<code>Math</code>，则<code>toString</code>输出对象类型</li></ul><h3>二. ToNumber</h3><ul><li><code>undefined</code>，输出<code>NaN</code></li><li><code>null</code>，输出<code>+0</code></li><li><code>布尔值</code>，<code>true</code>输出1，<code>false</code>转换为<code>+0</code></li><li><code>数字</code>，无需转换</li><li><code>字符串</code>，有字符串解析为数字，否则转换为<code>NaN</code></li><li><code>对象</code>，先进行<code>ToPrimitive(input, Number)</code>转换得到原始值，再转换为数字</li></ul><h3>三. ToString</h3><ul><li><code>undefined</code>，输出<code>undefined</code></li><li><code>null</code>，输出<code>null</code></li><li><code>布尔值</code>，输出<code>true</code>或<code>false</code></li><li><code>数字</code>，输出数字转换的字符串</li><li><code>字符串</code>，无需转换</li><li><code>对象</code>，先进行<code>ToPrimitive(input, String)</code>转换得到原始值，再转换为字符串</li></ul><p>举例来看，<code>({} + {}) == ?</code></p><ul><li>两个对象的值进行<code>+</code>运算符，肯定要先进行隐式转换为原始类型才能进行计算</li><li>进行<code>ToPrimitive</code>转换，由于没有指定类型，<code>{}</code>默认为<code>Number</code></li><li>所以先执行<code>valueOf</code>，输出的是对象本身</li><li>再执行<code>toString</code>，输出<code>[object Object]</code></li><li>所以最终结果是<code>[object Object][object Object]</code></li></ul><p>第二个例子<code>2 * {}</code></p><ul><li>首先<code>*</code>运算符，只能针对数字进行计算，因此先将<code>{}</code>执行<code>ToPrimitive({}, Number)</code></li><li>首先执行<code>valueOf</code>，返回的是<code>{}</code>本身，还是个对象</li><li>再执行<code>toString</code>，返回<code>[object Object]</code></li><li>最后，二者相乘，无法得出结果，所以最终输出<code>NaN</code></li></ul><h3>四. ==隐式转换</h3><p>隐式转换<code>x</code>和<code>y</code>的步骤是：</p><ol><li>如果<code>Type(x)</code>和<code>Type(y)</code>相同 1). <code>Type(x)</code>和<code>Type(y)</code>都是<code>undefined</code>，则返回<code>true</code> 2). <code>Type(x)</code>和<code>Type(y)</code>都是<code>null</code>，则返回<code>true</code> 3). <code>Type(x)</code>和<code>Type(y)</code>都是<code>Number</code>，则 * 如果<code>x</code>或<code>y</code>是<code>NaN</code>，则返回<code>false</code> * 如果<code>x</code>与<code>y</code>是相等数值，则返回<code>true</code> * 如果<code>x</code>为<code>+0</code>，<code>y</code>为<code>-0</code>，则返回<code>true</code> * 如果<code>x</code>为<code>-0</code>，<code>y</code>为<code>+0</code>，则返回<code>true</code> * 否则返回<code>false</code> 4). <code>Type(x)</code>和<code>Type(y)</code>都是<code>String</code>，则必须是相同的字符串，返回<code>true</code>，否则返回<code>false</code> 5). <code>Type(x)</code>和<code>Type(y)</code>都是<code>Boolean</code>，则当二者都是<code>false</code>或<code>true</code>，则返回<code>true</code>，否则返回<code>false</code> 6). <code>x</code>和<code>y</code>为引用同一对象则返回<code>true</code>，否则返回<code>false</code></li></ol><p>如果<code>Type(x)</code>和<code>Type(y)</code>不同 2. <code>x</code>为<code>null</code>，<code>y</code>为<code>undefined</code>，则返回<code>true</code> 3. <code>x</code>为<code>undefined</code>，<code>y</code>为<code>null</code>，则返回<code>true</code> 4. <code>Type(x)</code>为<code>Number</code>，<code>Type(y)</code>为<code>String</code>，则返回<code>x == ToNumber(y)</code> 5. <code>Type(x)</code>为<code>String</code>，<code>Type(y)</code>为<code>Number</code>，则返回<code>ToNumber(x) == y</code> 6. <code>Type(x)</code>为<code>Boolean</code>，则返回<code>toNumber(x) == y</code>的结果 7. <code>Type(y)</code>为<code>Boolean</code>，则返回<code>x == toNumber(y)</code>的结果 8. <code>Type(x)</code>为<code>String</code>或<code>Number</code>，<code>Type(y)</code>为<code>Object</code>，则返回<code>x == ToPrimitive(y)</code>的结果 9. <code>Type(x)</code>为<code>Object</code>，<code>Type(y)</code>为<code>String</code>或<code>Number</code>，则返回<code>ToPrimitive(x) == y</code> 10. 否则返回<code>false</code></p><h3>五. 隐式转换例子</h3><h4>1. [] == !{}</h4><ul><li><code>!</code>运算符优先于<code>==</code>，因此先进行<code>!</code>运算</li><li><code>!{}</code>输出结果为<code>false</code>，那么最终要比较的就是<code>[] == false</code></li><li>按照第7条的规则，<code>Type(y)</code>为<code>Boolean</code>，则返回<code>[] == ToNumber(false)</code>即<code>[] == 0</code></li><li>按照第9条的规则，<code>Type(y)</code>为<code>Number</code>，<code>Type(x)</code>为<code>Object</code>，则返回<code>ToPrimitive([], Number) == 0</code>，按照<code>ToPrimitive</code>的规则，则先按照<code>valueOf</code>转换为<code>[]</code>，再按照<code>toString</code>转换为<code>&#39;&#39;</code>，则是比较<code>&#39;&#39; == 0</code></li><li>再按照第5条的规则，<code>Type(x)</code>为<code>String</code>，<code>Type(y)</code>为<code>Number</code>，则返回<code>ToNumber(&#39;&#39;) == 0</code>，即比较<code>0==0</code>，输出最终结果<code>true</code></li></ul><h4>2. 0 == [0]</h4><ul><li>根据上面的第8条规则，<code>Type(x)</code>为<code>Number</code>，<code>Type(y)</code>为<code>Object</code>，则返回<code>0 == ToPrimitive([0])</code></li><li><code>ToPrimitive([0])</code>需要对<code>[0]</code>调用<code>valueOf</code>，返回数组本身，再调用<code>toString</code>返回数组<code>join</code>后的值，即<code>0</code>，最终返回<code>0==&#39;0&#39;</code></li><li>在根据第4条，<code>Type(x)</code>为<code>Number</code>，<code>Type(y)</code>为<code>String</code>，则返回<code>x == ToNumber(y)</code>，<code>ToNumber(&#39;0&#39;)</code>的值为<code>0</code>，则返回<code>0 == 0</code></li><li>最终输出结果为<code>true</code></li></ul><h4>3. -1 == false</h4><ul><li>根据上面的第7条规则，<code>Type(y)</code>为<code>Boolean</code>，则返回<code>-1 == ToNumber(false)</code></li><li><code>ToNumber(false)</code>值等于<code>0</code>，则返回<code>-1 == 0</code></li><li>最终输出结果为<code>false</code></li></ul><h4>4. 如何让<code>a=[1,2,3]</code>，<code>a==1 &amp;&amp; a==2 &amp;&amp; a == 3</code>输出true</h4><p>这个判断<code>a==1</code>、<code>a==2</code>和<code>a==3</code>，根据上面第9条的隐式转换规则，<code>Type(y)</code>为<code>Number</code>，<code>Type(x)</code>为<code>Object</code>，则判断<code>ToPrimitive(x) == y</code>，那需要先调用<code>valueOf</code>，再调用<code>toString</code>方法</p><p>因此要实现上面的输出，我们可以改写<code>a</code>的<code>valueOf</code>方法，或者也可以改写<code>a</code>的<code>toString</code>方法，改写本身的方法包含有几种解法，直接赋值，其次用<code>Object.defineProperty</code>和<code>Proxy</code>三种办法。</p><p><strong>解法一. 改写valueOf和toString方法</strong></p>",29),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" a = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"i"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(",\n    valueOf() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".i++\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a == "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(" && a == "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(" && a == "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),d=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"解法二. 通过Object.defineProperty改写数组join"),Object(t["g"])("：按照上面说的，"),Object(t["h"])("code",null,"a"),Object(t["g"])("调用"),Object(t["h"])("code",null,"toString"),Object(t["g"])("，是将数组执行"),Object(t["h"])("code",null,"join"),Object(t["g"])("，我们可以用"),Object(t["h"])("code",null,"Object.defineProperty"),Object(t["g"])("来改写数组的"),Object(t["h"])("code",null,"join"),Object(t["g"])("方法")],-1),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-built_in"},"Object"),Object(t["g"])(".defineProperty(["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("], "),Object(t["h"])("span",{class:"hljs-string"},"'join'"),Object(t["g"])(", {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"get"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".shift()\n    }\n})\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a == "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(" && a == "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(" && a == "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),m=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"解法三. 使用Proxy代理构造get"),Object(t["g"])("：利用"),Object(t["h"])("code",null,"Proxy"),Object(t["g"])("来改写")],-1),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Proxy"),Object(t["g"])("(\n    { "),Object(t["h"])("span",{class:"hljs-attr"},"v"),Object(t["g"])(" : "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(" },\n    {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"get"),Object(t["g"])("(target, property, receiver) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (property === "),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])(".toPrimitive) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" target.v++\n            }\n        }\n    }\n)\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a == "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(" && a == "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(" && a == "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-comment"},"// true"),Object(t["g"])("\n")])],-1),f=Object(t["h"])("p",null,"参考文献： https://juejin.cn/post/6844903557968166926",-1);function w(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f])}const k={};k.render=w;s["default"]=k},be58:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<h3>1. 冒泡排序</h3><p>比较相邻的元素，如果第一个比第二个大就交换两个的位置，一轮排完再重复排序，直至没有任何一对数字需要比较。</p><ul><li><strong>最佳</strong>：已经是正序排序，O(n)</li><li><strong>最坏</strong>：已经是倒序排序，O(n^2)</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li></ul>",3),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"bubbleSort"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"arr"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" len = arr.length\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<len - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("; i++) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" j="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; j<len"),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])("-i; j++) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (arr[j] > arr[j+"),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]) {\n                "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" temp = arr[j+"),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("]\n                arr[j+"),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" arr\n}\n")])],-1),a=Object(t["f"])("<h3>2. 选择排序</h3><p>首先在未排序的序列中找到最小值，存放到排序序列的起始位置，再从剩余序列中找到最小的，放在起始位置，重复，直至所有元素都排序完毕</p><ul><li><strong>最坏</strong>：O(n^2)</li><li><strong>最好</strong>：O(n^2)</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li></ul>",3),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"selectionSort"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"arr"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" len = arr.length\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" minIndex\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<arr.length"),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])("; i++) {\n        minIndex = i\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" j=i+"),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("; j<arr.length; j++) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (arr[j] < arr[minIndex]) {\n                minIndex = j\n            }\n        }\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" temp = arr[i]\n        arr[i] = arr[minIndex]\n        arr[minIndex] = temp\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" arr\n}\n")])],-1),b=Object(t["f"])("<h3>3. 插入排序</h3><p>把第一个元素当做一个有序序列，第二个元素到最后一个元素看做是待排序的序列，从头到尾扫描未排序的序列，把它插入到有序序列中的适当位置。</p><ul><li><strong>最佳</strong>：O(n)</li><li><strong>最坏</strong>：O(n^2)</li><li><strong>时间复杂度</strong>：O(n^2)</li><li><strong>空间复杂度</strong>：O(1)</li></ul>",3),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"insertSort"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"arr"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" len = arr.length\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" preIndex, cur\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("; i<len; i++) {\n        preIndex = i - "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n        cur = arr[i]\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"while"),Object(t["g"])("(preIndex >="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])(" && arr[preIndex] > cur) {\n            arr[preIndex + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("] = arr[preIndex]\n            preIndex--\n        }\n        arr[preIndex + "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("] = cur\n    }\n}\n")])],-1),o=Object(t["f"])("<h3>4. 快速排序</h3><p>从数列中挑出一个元素，称为基准，重新排序数列，所有比基准小的值放在基准前面，比基准大的都放到基准后面，递归地排序所有比基准小的序列和比基准大的序列</p><ul><li><strong>最好</strong>：O(n log n)</li><li><strong>最坏</strong>：O(n^2)</li><li><strong>时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>：O(log n)</li></ul>",3),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"quickSort"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"arr"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (arr.length <= "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(") "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" arr\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" sIndex = "),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".floor(arr.length / "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" sValue = arr.splice(sIndex, "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")["),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("]\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" left = []\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" right = []\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i="),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; i<arr.length; i++) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (arr[i] < sValue) {\n            left.push(arr[i])\n        } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n            right.push(arr[i])\n        }\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" quickSort(left).concat([sValue]).concat(quickSort(right))\n}\n")])],-1),r=Object(t["f"])("<blockquote><p><strong>额外知识点</strong> JS中数组的<code>sort</code>方法是通过<code>插入排序</code> + <code>快速排序</code> 来实现排序的，数组长度 <code>&lt; 10</code>时使用<code>插入排序</code>，但<code>&gt; 10</code>时使用<code>快速排序</code></p></blockquote>",1);function g(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r])}const p={};p.render=g;s["default"]=p},c1e3:function(e,s,c){"use strict";c("3548")},c1ef:function(e,s,c){"use strict";c.r(s);var t=c("f9bb"),n=c.n(t);for(var l in c.d(s,"default",(function(){return n.a})),t)["default"].indexOf(l)<0&&function(e){c.d(s,e,(function(){return t[e]}))}(l)},c3bd:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>URL从输入到渲染整个过程可以分为<code>网络通信</code>和<code>页面渲染</code>两个方面。每个环节都有优化的空间，都可以称为页面性能提升的关键点。</p><h3>一. 网络通信</h3><p>浏览器将接收到的<code>URL</code>中抽取出域名字段，就是访问的主机名，例如<code>http://www.qq.com</code>，会向域名服务器发起请求获取域名对应的<code>IP</code>地址，就可以向该<code>IP</code>地址定位的<code>HTTP</code>服务器发起<code>TCP</code>连接。</p><h4>1. DNS解析</h4><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-29/2.png" style="display:inline-block;margin-bottom:16px;"></div><p>DNS解析过程涉及很多步骤，我们在之前的文章<a href="https://zhangmingemma.github.io/#/post?file=2022-10-16-DNS" target="__blank">《计算机网络系列之DNS以及网络域名解析》</a>有介绍过DNS的域名服务器和解析的过程：</p><ul><li>浏览器缓存：当用户通过浏览器访问域名时，浏览器首先会在自己缓存中查找是否有域名对应的<code>IP地址</code>，如果有缓存则直接得到<code>IP地址</code>发起请求，否则继续下一步</li><li>本地服务器：向本地服务器，即系统<code>Hosts</code>文件查询缓存</li><li>根域名服务器：向根域名服务器<code>.com</code>查询<code>IP地址</code></li><li>二级域名服务器：向二级域名服务器<code>.qq.com</code>查询<code>IP地址</code></li><li>三级域名服务器：向三级域名服务器<code>www.qq.com</code>查询<code>IP地址</code></li></ul><h3>二. 页面渲染</h3><h4>1. 进程与线程的概念</h4><h5>(1) 进程</h5><p>CPU是计算机的核心，承担所有的计算任务，<code>进程</code>是<code>CPU</code>资源分配的最小单位，是一个可以独立运行且拥有自己的资源空间的任务程序。<code>CPU</code>给每个<code>进程</code>分配资源空间，分出去越多，越卡，每个<code>进程</code>之间是相互独立的，在运行一个<code>进程</code>时，其他<code>进程</code>都处于非运行状态，使用<code>时间片轮转调度算法</code>来实现同时运行多个进程</p><h5>(2) 线程</h5><p><strong>线程</strong>是<code>CPU</code>调度的最小单元，是建立在<code>进程</code>基础上的一次程序运行单位，通俗来讲，就是程序中的一个执行流，一个<code>进程</code>可以由多个<code>线程</code>。一个<code>进程</code>只有一个<code>线程</code>的时候，被称作<code>单线程</code>，程序执行时，所走的程序路径按照连续顺序排下来，前面的处理好，后面的才会执行。一个<code>进程</code>包含多个<code>线程</code>的时候，被称作<code>多线程</code>。</p><h5>(3) JS为单线程</h5><p>JS作为浏览器脚本语言，主要用途是与用户互动，以及操作<code>DOM</code>，这就决定了它只能是单线程，否则会带来复杂的同步问题。<code>HTML5</code>提出<code>web worker</code>标准，允许<code>JS</code>脚本创建多线程，但子线程完全受主线程控制的，不能操作<code>DOM</code>，本质上没有改变<code>JS</code>的单线程的本质</p><h5>(4) 浏览器渲染进程</h5><p>浏览器渲染进程也就是常说的浏览器内核，主要作用为页面渲染、脚本执行和事件处理等。这个渲染进程是多线程的</p><ul><li><strong>GUI渲染线程</strong>：负责渲染浏览器页面，解析<code>HTML</code>、<code>CSS</code>，构建<code>DOM树</code>和<code>RenderObject</code>树，布局和绘制等</li><li><strong>JS引擎线程</strong>：就是JS内核，负责处理JS脚本程序，JS是单线程运行的，并且<strong>JS引擎线程</strong>和<strong>GUI渲染线程</strong>是互斥的，JS引擎线程会阻塞GUI渲染线程，比如浏览器渲染的时候遇到<code>&lt;script&gt;</code>标签，就会停止GUI渲染，然后JS线程开始运行代码，JS引擎线程停止工作，GUI线程才会继续渲染下面的内容。</li><li><strong>事件触发线程</strong>：用来控制事件循环，并且管理着一个事件队列，当JS执行碰到事件绑定和一些异步操作，会走事件触发线程将对应的事件添加到对应的线程中，等异步事件有了结果，便把他们的回调操作添加到事件队列，等待JS引擎线程空闲时来处理，</li><li><strong>定时触发器线程</strong>：就是<code>SetTimeout</code>和<code>SetInterval</code>线程，用来计时，将回调函数加入单独的线程，计时结束等JS引擎线程空闲后执行</li><li><strong>异步请求线程</strong>：在<code>XHR</code>连接后在浏览器新开一个线程请求，检测到<code>XHR</code>状态变更时，如果设置有回调函数，异步线程就会有状态变更事件，将这个回调再放入事件队列中由JS引擎线程执行。</li></ul><h4>2. 渲染过程</h4><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-29/3.png" style="display:inline-block;margin-bottom:16px;"></div><h5>(1) 解析HTML构建DOM树</h5><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-29/4.png" style="display:inline-block;margin-bottom:16px;"></div><ul><li><strong>字节流编码</strong>：浏览器拿到页面<code>HTML</code>内容，这个内容是<code>0/1</code>原始的字节流，需要先用文件的指定编码将它们转换为各个字符，也就是一大串字符串。</li><li><strong>词法解析</strong>：也就是从字符串解析出编译的最小单元，如标签开始、标签结束、属性、注释、CDATA节点等。把这些解析出来，父子关系构建好，最终就构成了<code>DOM树</code>。</li></ul><h5>(2) 解析CSS构建CSSOM树</h5><ul><li><strong>请求CSS资源</strong>：构建<code>DOM树</code>，也就是解析HTML的时候，如果遇到了<code>link</code>，就会立即发起对资源的请求，返回样式内容，也就是字节流</li><li><strong>构建CSSOM</strong>：将CSS文件字符串，进行词法解析，生成CSSOM，决定着DOM结构的样式，即使是<code>DOM</code>构建先完成，也要等<code>CSSOM</code>构建完成，才能进行下一步</li></ul><blockquote><p>这里涉及到一个针对CSS样式的优化点：减少使用标签定义样式，避免多层嵌套，多使用class和id来提升CSS渲染构建的效率</p></blockquote><h5>(3) 解析JS脚本</h5><p>构建<code>DOM</code>树的过程中，如果遇到了<code>script</code>标签的时候，立即会阻塞<code>DOM</code>树的构建，将控制权交回给JS引擎线程，等到JS引擎线程执行完毕，浏览器才会从中断的地方恢复DOM树的构建。</p><blockquote><p>这里涉及到一个针对JS脚本解析的优化点：一般都将JS文件放到<code>HTML</code>底部进行加载，或是对JS文件执行<code>async</code>和<code>defer</code>加载 async：异步执行，不保证执行顺序，一定在onload前，但不确定在<code>DOMContentLoaded</code>事件的前后 defer：延迟执行，在浏览器看起来的效果像是把JS加载放在了<code>body</code>后面，虽然按照规范是在<code>DOMContentLoaded</code>之前，但实际上浏览器优化效果不同，可能在之后</p></blockquote><h5>(4) 构建渲染树</h5><p>渲染树是由<code>DOM树</code>和<code>CSSOM树</code>合并而成的，并不是等<code>DOM树</code>和<code>CSSOM树</code>加载完成后才开始合并构建<code>渲染树</code>，三者的构建并无先后条件，也并非完全独立，而是会有交叉，并行构建，因此会一边加载，一边解析，一边渲染。渲染树只包含网页中每个可见元素的布局，并输出绘制流程，将像素渲染到屏幕上。</p><h5>(5) 重绘</h5><p>元素发生的改变只是影响了元素的一些外观，例如背景色、边框颜色、文字颜色等，此时只需要应用新样式绘制这个元素就可以了</p><h5>(6) 回流</h5><p>也叫<strong>重排</strong>，<strong>回流</strong>一定伴随着<strong>重绘</strong>，成本较高，引起<strong>回流</strong>的条件包括有：</p><ul><li>页面渲染初始化</li><li><code>DOM</code>结构改变，比如删除某个节点</li><li><code>render</code>树变化，比如减少<code>padding</code></li><li>窗口<code>resize</code></li><li>元素的width/height/fontSize等发生了变化的时候</li><li>读取元素的offset、client、getComputeStyle()等</li></ul><blockquote><p>这里就涉及到了新的优化点：</p><ul><li>减少逐项更改样式，最好一次性修改，或者将样式组合成class并以此更新</li><li>避免循环操作DOM，先创建<code>documentFragment</code>，在它上面应用所有的<code>DOM</code>操作，最后再把它添加到<code>window.document</code>。</li><li>避免多次读取<code>offset</code>等属性，无法避免就要缓存到变量</li><li>将复杂的元素绝对定位或者固定定位，脱离文档流，否则回流代价会很高</li><li>尽量减少改变字体大小、table布局等，减少回流的可能性</li><li>动画中使用<code>transform</code>和<code>opacity</code>，不会发生重排和重绘</li></ul></blockquote>',37);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},c502:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>框架选型主要考虑的几个因素包含有：</p><ul><li><strong>应用</strong>：是否能够满足大部分应用的需求</li><li><strong>生态</strong>：框架的生态是否丰富？是否拥有我们所需要的功能组件？技术选型要考虑的一个因素是生态系统，即是否有对应的可选择的组件、库是否足够丰富？</li><li><strong>兼容性</strong>：不同框架对于不同浏览器的支持程度如何？由于实现机制的不同，框架会对浏览器有一定的要求。</li><li><strong>迁移成本</strong>：是否能以最小的代价迁移现有的应用？当我们选定A框架时，往往后面编写的代码都难以迁移到B框架。比如我们使用React编写的组件，无法直接在Angular或者Vue中使用。尽管随着Web Components技术的发展，跨框架使用变得越来越有希望，但是这也意味着我们需要做大量的适配。</li><li><strong>学习成本</strong>：团队成员能否快速掌握该框架？框架拥有自己的设计思想，它可能有更适合的用户群。如Angular其总体的架构思想依赖注入、强类型等，更适合那些有后端经验的开发者。如Vue框架更容易上手，适合初学者进行Web开发。而对于一个没有经验的新手，直接使用Angular框架，则需要较长的学习时间。</li></ul><h3>一. Vue</h3><p>网络选型的主要考虑选Vue的考虑包括：</p><ul><li>体积小、复杂度低：如果项目主要支持移动端页面，Vue体积较小，网络性能角度相比React更适合移动端，特别是Vue3打包体积更小，性能更优，React相比之下更适合大型相对更复杂的SPA</li><li>上手成本、迁移成本低：Vue的学习和上手成本相对更低，框架本身提供了大量丰富的中文文档，这也为Vue的发展和使用带来巨大的优势。</li><li>兼容性：Vue2浏览器端不支持IE8及以下版本，移动端支持Android 4.2+，iOS 6+；Vue3浏览器端不支持IE，支持Chrome 49+，移动端安卓6.0+。</li><li>生态系统：小程序可以使用mpvue , 公众号H5可以使用vux，app开发可以使用weex，PC端可以用nuxt.js，UI框架可以使用elementUI，以上框架都基于vue开发做到了跨平台，有更好的代码复用性，做到了开发习惯的统一；</li></ul><h3>二. React</h3><p>选React的主要考虑包括：</p><ul><li>原生应用：React的思想不局限于前端领域，它还有React Native、React VR等，它们可以在不同的平台之上运行类React的View层。使用与React语法类似的React Native，我们可以编写出原生的移动应用。此外，我们还可以在Web应用程序与iOS、Android应用程序之间，共享大部分业务逻辑。</li><li>更适用于更大型、复杂的系统开发</li></ul>",8);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},c612:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,[Object(t["g"])("在JS中，"),Object(t["h"])("code",null,"call"),Object(t["g"])("、"),Object(t["h"])("code",null,"apply"),Object(t["g"])("和"),Object(t["h"])("code",null,"bind"),Object(t["g"])("都是为了改变函数运行时的上下文而存在的，换句话说，是为了改变函数体内部的"),Object(t["h"])("code",null,"this"),Object(t["g"])("的指向。举一个例子：")],-1),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" color = "),Object(t["h"])("span",{class:"hljs-string"},"'green'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"fruits"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{}\nfruits.prototype = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"color"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'red'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"say"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'color is: '"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".color)\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" apple = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" fruits\napple.say() "),Object(t["h"])("span",{class:"hljs-comment"},"// color is: red"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" banana = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"color"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'yellow'"),Object(t["g"])("\n}\napple.say.apply(banana) "),Object(t["h"])("span",{class:"hljs-comment"},"// color is: yellow"),Object(t["g"])("\n")])],-1),a=Object(t["f"])("<p>可以看出<code>apple.say</code>在第一次执行的时候，<code>this</code>指向<code>fruits</code>本身，第二次执行的时候，<code>this</code>指向<code>banana</code></p><h2>一. apply、call</h2><p><code>call</code>和<code>apply</code>都用于改变函数执行的上下文，用法只有一个区别<code>call</code>方法接受的是一个参数列表，而<code>apply</code>方法接受的是一个数组</p><h3>1. apply</h3><p>apply的语法是<code>func.apply(thisArg, [argsArray])</code>，对参数的讲解是：</p><ul><li><strong>thisArg</strong>：必选的。在<code>func</code>函数运行时指定使用的<code>this</code>值。如果没传，或者是指定为<code>null</code>或<code>undefined</code>时会自动替换为指向全局对象。</li><li><strong>argsArray</strong>：可选的。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给<code>func</code>函数。如果这个参数没传，或者是指定为<code>null</code>或<code>undefined</code>时就不会传递参数给<code>func</code></li></ul><p>那手写<code>apply</code>的时候，应该如何改变<code>func</code>执行的上下文呢，我们可以将<code>func</code>赋值给一个对象的属性，这样<code>func</code>的上下文就是所属的对象了。</p>",7),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(".prototype._apply = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"context, args"),Object(t["g"])(") ")]),Object(t["g"])("{\n    context = context || "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])("\n    context.fn = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" res\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (!args || !args.length) {\n        res = context.fn()\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        res = context.fn(...args)\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"delete"),Object(t["g"])(" context.fn\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" res\n}\n")])],-1),b=Object(t["f"])("<h3>2. call</h3><p>call的语法是<code>function.call(thisArgs, arg1, arg2, ...)</code>， 对参数的解读是：</p><ul><li><strong>thisArg</strong>：必选的。在<code>func</code>函数运行时指定使用的<code>this</code>值。如果没传，或者是指定为<code>null</code>或<code>undefined</code>时会自动替换为指向全局对象。</li><li><strong>arg1, arg2, ...</strong>：可选的，指定的参数列表</li></ul>",3),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(".prototype._call = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"context"),Object(t["g"])(") ")]),Object(t["g"])("{\n    context = context || "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])("\n    context.fn = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" args = [...arguments].slice("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" res = context.fn(args)\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"delete"),Object(t["g"])(" context.fn\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" res\n}\n")])],-1),o=Object(t["f"])("<p>总结一下<code>call</code>和<code>apply</code>的区别：</p><ul><li>相同点是二者都用于改变函数的执行上下文，并且调用的时候会立即执行函数。</li><li>区别是，<code>call</code>传入的参数是一个参数列表，<code>apply</code>传入的参数是一个数组，数组内包含多个参数。就性能而言，<code>apply</code>可能稍好一些，理解是少了一层传入参数的结构和判断过程</li></ul><h2>二. bind</h2><p>bind会创建一个绑定上下文的函数，需要手动调用，可以在调用中传入参数，也就是说调用<code>bind</code>的函数不会立即执行，<code>bind</code>有几个特点：</p><ul><li><strong>函数不会立即执行</strong></li><li><strong>函数柯里化</strong>：<code>bind</code>后面传入的参数列表，可以分多次传入</li><li><strong>做构造函数</strong>：可以通过<code>new</code>创建对象，此时提供的<code>this</code>值被忽略，但传入的参数会被提供给模拟函数</li></ul><p>首先，我们给出最简单的<code>bind</code>的实现，<strong>调用<code>bind</code>的函数不会立即执行</strong>，也就是说会返回一个函数，等待手动执行。</p>",6),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(".prototype._bind = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"context"),Object(t["g"])(") ")]),Object(t["g"])("{\n    context = context || "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        self.apply(context)\n    }\n}\n")])],-1),r=Object(t["h"])("p",null,[Object(t["g"])("我们再来看"),Object(t["h"])("code",null,"bind"),Object(t["g"])("传参的问题，"),Object(t["h"])("strong",null,[Object(t["h"])("code",null,"bind"),Object(t["g"])("的传参可以分多次传入")]),Object(t["g"])("，举个例子")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 函数柯里化的应用示例"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" max = "),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".max.bind("),Object(t["h"])("span",{class:"hljs-literal"},"null"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(max("),Object(t["h"])("span",{class:"hljs-number"},"4"),Object(t["g"])(")) "),Object(t["h"])("span",{class:"hljs-comment"},"// 12"),Object(t["g"])("\n")])],-1),p=Object(t["h"])("p",null,"那我们的手动实现上就是：",-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(".prototype._bind = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"context"),Object(t["g"])(") ")]),Object(t["g"])("{\n    context = context || "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" outerArgs = [...arguments].slice("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" innerArgs = [...arguments]\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" allArgs = outerArgs.concat(innerArgs)\n        self.apply(context, allArgs)\n    }\n}\n")])],-1),d=Object(t["h"])("p",null,[Object(t["g"])("我们再来看"),Object(t["h"])("code",null,"bind"),Object(t["g"])("在构造函数的方面，可以"),Object(t["h"])("strong",null,[Object(t["g"])("通过"),Object(t["h"])("code",null,"new"),Object(t["g"])("来创建实例，此时提供的"),Object(t["h"])("code",null,"this"),Object(t["g"])("将被忽略，但参数还是传递下去继续进行执行")]),Object(t["g"])("，举个例子：")],-1),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" value = "),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" foo = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"value"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n}\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"bar"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"name, age"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".habit = "),Object(t["h"])("span",{class:"hljs-string"},"'shopping'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".value)\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(name)\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(age)\n}\nbar.prototype.friend = "),Object(t["h"])("span",{class:"hljs-string"},"'kevin'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" bindFoo = bar.bind(foo, "),Object(t["h"])("span",{class:"hljs-string"},"'daisy'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" obj = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" bindFoo("),Object(t["h"])("span",{class:"hljs-string"},"'18'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// undefined"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// daisy"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 18"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(obj.habit)\n"),Object(t["h"])("span",{class:"hljs-comment"},"// shopping"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(obj.friend)\n"),Object(t["h"])("span",{class:"hljs-comment"},"// kevin"),Object(t["g"])("\n")])],-1),m=Object(t["h"])("p",null,[Object(t["g"])("可以看到"),Object(t["h"])("code",null,"bind"),Object(t["g"])("返回的函数可以当做一个构造函数，使用"),Object(t["h"])("code",null,"new"),Object(t["g"])("来创建实例的时候"),Object(t["h"])("code",null,"this"),Object(t["g"])("已经指向了"),Object(t["h"])("code",null,"obj"),Object(t["g"])("，而不是已经绑定的"),Object(t["h"])("code",null,"foo"),Object(t["g"])("。在手动实现上：")],-1),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(".prototype._bind = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"context"),Object(t["g"])(") ")]),Object(t["g"])("{\n    context = context || "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" outerArgs = [...arguments].slice("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ffound = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" innerArgs = [...arguments]\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" allArgs = outerArgs.concat(innerArgs)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ctx = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(" self ? "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(" : context\n        self.apply(context, allArgs)\n    }\n    ffound.prototype = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".prototype\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" ffound\n}\n")])],-1),f=Object(t["h"])("p",null,[Object(t["g"])("但如果我们这样"),Object(t["h"])("code",null,"ffound.prototype"),Object(t["g"])("改写的方式来写的话，会直接修改函数的"),Object(t["h"])("code",null,"prototype"),Object(t["g"])("，可以通过一个空函数进行中转")],-1),w=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-built_in"},"Function"),Object(t["g"])(".prototype._bind = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"context"),Object(t["g"])(") ")]),Object(t["g"])("{\n    context = context || "),Object(t["h"])("span",{class:"hljs-built_in"},"window"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" self = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" outerArgs = [...arguments].slice("),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ffound = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"args"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" innerArgs = [...arguments]\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" allArgs = outerArgs.concat(innerArgs)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" ctx = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"instanceof"),Object(t["g"])(" self ? "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(" : context\n        self.apply(context, allArgs)\n    }\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" fNop = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(" {}\n    fNop.prototype = "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".prototype\n    ffound.prototype = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" fNop()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" ffound\n}\n")])],-1),k=Object(t["f"])("<p>总结一下<code>bind</code>和<code>call/apply</code>的区别：</p><ul><li><strong>执行</strong>：<code>bind</code>返回一个函数，不会立即执行，需要手动调用；<code>call/apply</code>会立即执行</li><li><strong>参数</strong>：<code>bind</code>的参数可以多次传入；<code>call/apply</code>需要一次性传入所有的参数</li><li><strong>构造函数</strong>：<code>bind</code>返回的函数可以当做构造函数来用，<code>this</code>指向不会是最初传入的<code>this</code>，这个能力是<code>call/apply</code>不具备的</li></ul>",2);function v(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k])}const x={};x.render=v;s["default"]=x},cd49:function(e,s,c){"use strict";c.r(s);c("e260"),c("e6cf"),c("cca6"),c("a79d");var t=c("7a23"),n={class:"m-page"};function l(e,s){var c=Object(t["x"])("Nav"),l=Object(t["x"])("router-view");return Object(t["q"])(),Object(t["d"])("div",n,[Object(t["h"])(c),Object(t["h"])(l)])}c("d55a");const a={};a.render=l;var j=a,b=(c("d3b7"),c("3ca3"),c("ddb0"),c("6c02")),h=Object(t["E"])("data-v-3408c6b9");Object(t["t"])("data-v-3408c6b9");var o={class:"home"};Object(t["r"])();var O=h((function(e,s,c,n,l,a){var j=Object(t["x"])("Block"),b=Object(t["x"])("Pagination");return Object(t["q"])(),Object(t["d"])("div",o,[(Object(t["q"])(!0),Object(t["d"])(t["a"],null,Object(t["w"])(e.postList,(function(e,s){return Object(t["q"])(),Object(t["d"])(j,{key:s,post:e},null,8,["post"])})),128)),Object(t["h"])(b,{total:e.total,onPageChange:e.onPageChange},null,8,["total","onPageChange"])])})),r=c("5530"),g=c("597d"),p=c("5c40"),i=c("2efe"),d=Object(t["E"])("data-v-d6a35aac");Object(t["t"])("data-v-d6a35aac");var u={key:0,class:"pagination"},m={class:"pagination-title"},y={class:"pagination-main"};Object(t["r"])();var f=d((function(e,s,c,n,l,a){return e.total>e.pageSize?(Object(t["q"])(),Object(t["d"])("div",u,[Object(t["h"])("div",m,"共计"+Object(t["z"])(e.total)+"篇文章，"+Object(t["z"])(e.pageCount)+"页",1),Object(t["h"])("div",y,[Object(t["h"])("div",{class:["pagination-main-item break start",{disable:1===e.curPage}],onClick:s[1]||(s[1]=function(){return e.toPre&&e.toPre.apply(e,arguments)})},null,2),(Object(t["q"])(!0),Object(t["d"])(t["a"],null,Object(t["w"])(e.pageLine,(function(s){return Object(t["q"])(),Object(t["d"])("div",{class:["pagination-main-item",{active:s===e.curPage,empty:"..."===s}],key:s,onClick:function(c){return e.toJump(s)}},Object(t["z"])(s),11,["onClick"])})),128)),Object(t["h"])("div",{class:["pagination-main-item break",{disable:e.curPage===e.pageCount}],onClick:s[2]||(s[2]=function(){return e.toNext&&e.toNext.apply(e,arguments)})},null,2)])])):Object(t["e"])("",!0)})),w=(c("a9e3"),c("a630"),c("d81d"),c("a7bb")),k=Object(t["i"])({props:{total:{type:Number,default:0},onPageChange:{type:Function,default:function(){return function(){}}}},setup:function(e){var s=w["b"].PageSie,c=6,n=Object(t["v"])(1),l=Object(t["u"])({pageLine:[]}),a=function(){if(j.value<=c){var e=Array.from(new Array(j.value).keys());return e.map((function(e){return e+1}))}var s=[];return n.value-1>1&&s.push(n.value-1),s.push(n.value),n.value+1<j.value&&s.push(n.value+1),s[0]>2&&s.unshift("..."),1!=s[0]&&s.unshift(1),s[s.length-1]<j.value-1&&s.push("..."),s[s.length-1]!=j.value&&s.push(j.value),s},j=Object(t["b"])((function(){return Math.ceil(e.total/s)}));l.pageLine=a(),Object(t["C"])((function(){return n.value}),(function(){l.pageLine=a();var c=(n.value-1)*s,t=c+s;e.onPageChange&&e.onPageChange(c,t)})),Object(t["C"])((function(){return j.value}),(function(){l.pageLine=a()}));var b=function(){var e=n.value-1;n.value=e>=1?e:n.value},h=function(){var e=n.value+1;n.value=e<=j.value?e:n.value},o=function(e){"string"!==typeof e&&(n.value=e>=1&&e<=j.value?e:n.value)};return Object(r["a"])(Object(r["a"])({curPage:n,pageCount:j,pageSize:s},Object(t["A"])(l)),{},{toPre:b,toNext:h,toJump:o})}});c("256c");k.render=f,k.__scopeId="data-v-d6a35aac";var v=k,x=Object(p["l"])({setup:function(){var e=g["a"].listCompiler(),s=function(s,c){Object(w["f"])(),e.reloadList({startIndex:s,endIndex:c})};return Object(r["a"])(Object(r["a"])({},e),{},{onPageChange:s})},components:{Block:i["a"],Pagination:v}});c("b419");x.render=O,x.__scopeId="data-v-3408c6b9";var S=x,P=(c("b0c0"),Object(t["E"])("data-v-712f90fa"));Object(t["t"])("data-v-712f90fa");var _={class:"list"},C={class:"list-tag"},T={class:"list-main"},I={class:"date"},E={class:"title"};Object(t["r"])();var A=P((function(e,s,c,n,l,a){return Object(t["q"])(),Object(t["d"])("div",_,[Object(t["h"])("div",C,[Object(t["h"])("div",{class:["blog-tag",{selected:!e.selectedTags.length}],onClick:s[1]||(s[1]=function(){return e.tapAll&&e.tapAll.apply(e,arguments)})},"All",2),(Object(t["q"])(!0),Object(t["d"])(t["a"],null,Object(t["w"])(e.tagList,(function(s){return Object(t["q"])(),Object(t["d"])("div",{class:["blog-tag",{selected:e.selectedTags.indexOf(s)>=0}],key:s,onClick:function(c){return e.tapTag(s)}},Object(t["z"])(s),11,["onClick"])})),128))]),Object(t["h"])("div",T,[(Object(t["q"])(!0),Object(t["d"])(t["a"],null,Object(t["w"])(e.postList,(function(s,c){return Object(t["q"])(),Object(t["d"])("div",{class:"list-main-item",key:c,onClick:function(c){return e.tapPost(s.name)}},[Object(t["h"])("span",I,Object(t["z"])(s.date),1),Object(t["h"])("span",E,Object(t["z"])(s.title),1)],8,["onClick"])})),128))])])})),D=(c("a434"),Object(t["i"])({setup:function(){var e=Object(b["d"])(),s=Object(t["u"])({tagList:[],selectedTags:[]}),c=g["a"].listCompiler({banPagination:!0});s.tagList=g["a"].getAllPostTag();var n=function(e){if(e){var t=s.selectedTags.indexOf(e);t>=0?s.selectedTags.splice(t,1):s.selectedTags.push(e),c.reloadList({tags:s.selectedTags})}},l=function(){s.selectedTags=[],c.reloadList()},a=function(s){s&&(Object(w["f"])(),e.push("/post?file=".concat(s)))};return Object(r["a"])(Object(r["a"])(Object(r["a"])({},Object(t["A"])(s)),c),{},{tapPost:a,tapTag:n,tapAll:l})}}));c("3f9c");D.render=A,D.__scopeId="data-v-712f90fa";var M=D,N=[{path:"/",name:"Home",component:S},{path:"/list",name:"List",component:M},{path:"/cv",name:"CV",component:function(){return c.e("chunk-14436ac0").then(c.bind(null,"3f23"))}},{path:"/post",name:"Post",component:function(){return c.e("chunk-50f5b2d6").then(c.bind(null,"37d3"))}},{path:"/tag",name:"Tag",component:function(){return c.e("chunk-a7c54b84").then(c.bind(null,"8ea7"))}}],F=Object(b["a"])({history:Object(b["b"])(),routes:N}),R=F,V=c("cf05"),B=c.n(V),L=Object(t["E"])("data-v-31190f33");Object(t["t"])("data-v-31190f33");var z={class:"header"},q={class:"header-inner-logo"},H=Object(t["h"])("img",{src:B.a},null,-1),G=Object(t["g"])("Gemma's Blog"),J={class:"header-inner-nav"},U=Object(t["g"])("主页"),$=Object(t["g"])("归档"),W=Object(t["g"])("CV");Object(t["r"])();var K=L((function(e,s,c,n,l,a){var j=Object(t["x"])("router-link");return Object(t["q"])(),Object(t["d"])("div",z,[Object(t["h"])("div",{class:["header-inner clearfix",{"larger-nav":e.isPost}]},[Object(t["h"])("div",q,[H,Object(t["h"])(j,{class:["title home",{active:"Home"===e.routeName}],to:"/"},{default:L((function(){return[G]})),_:1},8,["class"])]),Object(t["h"])("div",J,[Object(t["h"])(j,{class:["title",{active:"Home"===e.routeName}],to:"/"},{default:L((function(){return[U]})),_:1},8,["class"]),Object(t["h"])(j,{class:["title",{active:"List"===e.routeName}],to:"/list"},{default:L((function(){return[$]})),_:1},8,["class"]),Object(t["h"])(j,{class:["title",{active:"CV"===e.routeName}],to:"/cv"},{default:L((function(){return[W]})),_:1},8,["class"])])],2)])})),X=Object(t["i"])({setup:function(){var e=Object(t["v"])(""),s=Object(t["v"])(!1),c=Object(b["c"])();return Object(t["C"])((function(){return c.name}),(function(){e.value=c.name,s.value="Post"===c.name})),{routeName:e,isPost:s}}});c("c1e3");X.render=K,X.__scopeId="data-v-31190f33";var Y=X,Q=(c("de77"),c("2c43"),c("9f21"),Object(t["c"])(j));Q.component("Nav",Y),Q.use(R).mount("#app")},ce75:function(e,s,c){},cf05:function(e,s,c){e.exports=c.p+"img/logo.cfd07c7f.png"},cff1:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,[Object(t["g"])("Proxy可以理解为，在目标对象之前架设一层"),Object(t["h"])("code",null,"拦截"),Object(t["g"])("，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。下面的例子中，"),Object(t["h"])("code",null,"Proxy"),Object(t["g"])("实际上重载了点运算符，即用自己的定义覆盖了原始定义。")],-1),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" obj = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Proxy"),Object(t["g"])("({}, {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"get"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target, propKey, receiver"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`getting "),Object(t["h"])("span",{class:"hljs-subst"},"${propKey}"),Object(t["g"])("!`")]),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Reflect"),Object(t["g"])(".get(target, propKey, receiver)\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"set"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"target, propKey, value, receiver"),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`setting "),Object(t["h"])("span",{class:"hljs-subst"},"${propKey}"),Object(t["g"])("!`")]),Object(t["g"])(")\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"Reflect"),Object(t["g"])(".set(target, propKey, value, receiver)\n    }\n})\n")])],-1),a=Object(t["h"])("p",null,"输出结果是：",-1),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("obj.count = "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// setting count!"),Object(t["g"])("\n++obj.count\n"),Object(t["h"])("span",{class:"hljs-comment"},"// getting count!"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// setting count!"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 2"),Object(t["g"])("\n")])],-1);function b(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j])}const h={};h.render=b;s["default"]=h},d558:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>JavaScript模块化从一开始定位为简单的网页脚本语言，到如今可以开发复杂交互的前端，模块化的发展自然而然，目的无非是为了代码的组织重用性、隔离性、可维护性、版本管理和依赖管理等。</p><h3>一. CommonJS</h3><p>CommonJS能够实现前端代码模块化，在使用规范下，具有几个显著的特点：</p><ul><li>在<code>CommonJS</code>中每一个<code>js</code>文件都是一个单独的模块，我们可以称之为<code>Module</code></li><li>该模块中，包含<code>CommonJS</code>的核心变量<code>exports</code>、<code>module.exports</code>和<code>require</code></li><li><code>exports</code>和<code>module.exports</code>可以负责对模块中的内容进行导出</li><li><code>require</code>函数可以帮助我们导入其他的模块中的内容</li></ul><p>简单的使用案例：</p>",5),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// hello.js"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" name = "),Object(t["h"])("span",{class:"hljs-string"},"'Hello, Gemma'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"sayName"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" name\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// home.js"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" sayName = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'./hello.js'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"say"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": sayName(),\n        "),Object(t["h"])("span",{class:"hljs-attr"},"author"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\n    }\n}\n")])],-1),a=Object(t["f"])("<p>下面我们来针对三个关键字分别详细了解：</p><h4>1. require</h4><p>require就是导入具体的模块，有两个比较关键的点：</p><ul><li>路径查找：模块的路径也叫加载标识符，包含文件模块和自定义模块两部分 <ul><li>文件模块：以<code>./</code>、<code>../</code>、<code>/</code>开始的标识符，会被当做文件模块处理。<code>require()</code>方法会将路径转换成真实路径，并以真实路径作为索引，将编译后的结果缓存起来，第二次加载的时候会更快。</li><li>自定义模块：会在当前目录下<code>node_modules</code>目录查找；如果没有就在父层<code>node_modules</code>中查找，逐层向上递归查找</li></ul></li><li>循环引用：CommonJS在加载的时候，针对每个<code>Module</code>都会标注是否被加载，<code>false</code>表示还没有加载，<code>true</code>表示已经加载，并且加载某个模块的时候，会将编译结果缓存起来。所以循环引用相同模块的时候，并不会出现循环加载的情况。</li></ul><h4>2. exports</h4><p>exports是导出模块的一种方式</p>",6),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// hello.js"),Object(t["g"])("\nexports.name = "),Object(t["h"])("span",{class:"hljs-string"},"'《进阶指南》'"),Object(t["g"])("\nexports.author = "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\nexports.say = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"666"),Object(t["g"])(")\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// home.js"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'./hello.js'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(a)\n"),Object(t["h"])("span",{class:"hljs-comment"},"// {name: '《进阶指南》', author: 'Gemma', say: [Function]}"),Object(t["g"])("\n")])],-1),b=Object(t["h"])("p",null,[Object(t["g"])("但如果我们在"),Object(t["h"])("code",null,"Hello.js"),Object(t["g"])("中改变写法")],-1),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("exports = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'《进阶指南》'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"author"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'Gemma'"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"say"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-number"},"666"),Object(t["g"])(")\n    }\n}\n")])],-1),o=Object(t["h"])("p",null,[Object(t["g"])("最后的输出结果是空，这是因为 "),Object(t["h"])("strong",null,[Object(t["h"])("code",null,"require"),Object(t["g"])("作为形参的方式传入js模块中")]),Object(t["g"])("，我们直接"),Object(t["h"])("code",null,"exports={}"),Object(t["g"])("修改"),Object(t["h"])("code",null,"exports"),Object(t["g"])("，等于重新赋值了形参是无效的，是创建了新的引用，只有在原来的引用上修改单个属性时有效的")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"wrap"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"myExports"),Object(t["g"])(") ")]),Object(t["g"])("{\n    myExports = {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'我不是外星人'"),Object(t["g"])("\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" myExports = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'alient'"),Object(t["g"])(" }\nwrap(myExports)\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(myExports) "),Object(t["h"])("span",{class:"hljs-comment"},"// { name: 'alient' }"),Object(t["g"])("\n")])],-1),r=Object(t["h"])("p",null,"但",-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"wrap"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"myExports"),Object(t["g"])(") ")]),Object(t["g"])("{\n    myExports.name = "),Object(t["h"])("span",{class:"hljs-string"},"'我不是外星人'"),Object(t["g"])("\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" myExports = { "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'alient'"),Object(t["g"])(" }\nwrap(myExports)\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(myExports) "),Object(t["h"])("span",{class:"hljs-comment"},"// { name: '我不是外星人' }"),Object(t["g"])("\n")])],-1),p=Object(t["h"])("h4",null,"3. module.exports",-1),i=Object(t["h"])("p",null,[Object(t["g"])("我们都知道"),Object(t["h"])("code",null,"exports"),Object(t["g"])("会被初始化成一个对象，"),Object(t["h"])("code",null,"module.exports"),Object(t["g"])("与"),Object(t["h"])("code",null,"exports"),Object(t["g"])("的区别是，如果我们不想导出对象，而是导出一个类或一个函数，或是其他的一些属性的时候，就应该用"),Object(t["h"])("code",null,"module.exports")],-1),d=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = a\n"),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = ["),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(","),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("]\n"),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{}\n")])],-1),u=Object(t["f"])("<p>但是加载模块是同步的，因此在浏览器中会造成阻塞，白屏时间过长，用户体验不够友好。因此，从<code>CommonJS</code>中逐渐产生一些分支，也就是业内熟知的<code>AMD</code>、<code>CMD</code>等</p><ul><li><strong>RequireJS遵循的是AMD(异步模块定义)规范</strong></li><li><strong>SeaJS遵循的是CMD(通用模块定义)规范</strong></li></ul><h3>二. AMD</h3><p>AMD规范是非同步加载模块，允许指定回调函数。Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以<code>CommonJS</code>比较适用。但是，浏览器环境下，要从服务器加载模块，就必须使用非同步模式，因此浏览器端一般采用<code>AMD</code>规范。</p><p>AMD规范用<code>require.config()</code>指定引用路径，用<code>define()</code>定义模块，用<code>require()</code>加载模块，采用异步方式加载，模块的加载不影响后面语句的运行，所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成后，这个回调函数才会执行。</p>",5),m=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// a.js"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// []内相当于声明并初始化了要用到的所有模块"),Object(t["g"])("\ndefine(["),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'require'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'exports'"),Object(t["g"])("], "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"b, require, exports"),Object(t["g"])(")")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'a.js 执行'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(b)\n    exports.a = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])(")\n    }\n})\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// b.js"),Object(t["g"])("\ndefine("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'b.js 执行'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(exports)\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])("\n})\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// index.js"),Object(t["g"])("\ndefine("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"require, exports, module"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'index.js 执行'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'a'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" b = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])(")\n})\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// index.js"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("(["),Object(t["h"])("span",{class:"hljs-string"},"'a'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])("], "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"a,b"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'index.js 执行'"),Object(t["g"])(")\n})\n")])],-1),y=Object(t["h"])("h3",null,"三. CMD",-1),f=Object(t["h"])("p",null,[Object(t["g"])("CMD是另一种"),Object(t["h"])("code",null,"JS"),Object(t["g"])("模块化方案，与"),Object(t["h"])("code",null,"AMD"),Object(t["g"])("很类似，不同点在于："),Object(t["h"])("code",null,"AMD"),Object(t["g"])("推崇依赖前置、提前执行，"),Object(t["h"])("code",null,"CMD"),Object(t["g"])("推崇依赖就近、延迟执行。")],-1),w=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// AMD 写法"),Object(t["g"])("\ndefine(["),Object(t["h"])("span",{class:"hljs-string"},"'a'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'c'"),Object(t["g"])("], "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"a, b, c"),Object(t["g"])(") ")]),Object(t["g"])("{\n    a.doSomething()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(") {\n        b.doSomething() "),Object(t["h"])("span",{class:"hljs-comment"},"// 虽然b没被用到，但b还是提前执行了"),Object(t["g"])("\n    }\n})\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// CMD写法"),Object(t["g"])("\ndefine("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"a, b, c"),Object(t["g"])(")")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" a = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'a'"),Object(t["g"])(")\n    a.doSomething()\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" b = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])(")\n        b.doSomething()\n    }\n})\n")])],-1),k=Object(t["h"])("h3",null,"四. UMD",-1),v=Object(t["h"])("p",null,[Object(t["g"])("是一种通用的模块化的写法，适用于两端。会对系统支持的方法进行判断，支持"),Object(t["h"])("code",null,"define"),Object(t["g"])("时使用"),Object(t["h"])("code",null,"AMD"),Object(t["g"])("引入模块，否则继续判断是否支持"),Object(t["h"])("code",null,"exports"),Object(t["g"])("，支持则使用"),Object(t["h"])("code",null,"CommonJS"),Object(t["g"])("，否则使用浏览器全局变量来引入")],-1),x=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"root, factory"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" define == "),Object(t["h"])("span",{class:"hljs-string"},"'function'"),Object(t["g"])(" && define.amd) {\n        "),Object(t["h"])("span",{class:"hljs-comment"},"// AMD"),Object(t["g"])("\n        define(["),Object(t["h"])("span",{class:"hljs-string"},"'jquery'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-string"},"'underscore'"),Object(t["g"])("], factory)\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" ("),Object(t["h"])("span",{class:"hljs-keyword"},"typeof"),Object(t["g"])(" exports == "),Object(t["h"])("span",{class:"hljs-string"},"'object'"),Object(t["g"])(") {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports  = factory("),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'jquery'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'underscore'"),Object(t["g"])(")))\n    } "),Object(t["h"])("span",{class:"hljs-keyword"},"else"),Object(t["g"])(" {\n        root.return Exports = factory(root.jQuery, root._)\n    }\n})("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"$, _"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" PI = "),Object(t["h"])("span",{class:"hljs-built_in"},"Math"),Object(t["g"])(".PI\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"a"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{} "),Object(t["h"])("span",{class:"hljs-comment"},"// 私有方法，因为它没有被返回"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"b"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{ "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" a() } "),Object(t["h"])("span",{class:"hljs-comment"},"// 公共方法，因为被返回了"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"c"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"x,y"),Object(t["g"])(") ")]),Object(t["g"])("{ "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" x + y } "),Object(t["h"])("span",{class:"hljs-comment"},"// 公共方法，因为被返回了"),Object(t["g"])("\n\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"ip"),Object(t["g"])(": PI,\n        "),Object(t["h"])("span",{class:"hljs-attr"},"b"),Object(t["g"])(": b,\n        "),Object(t["h"])("span",{class:"hljs-attr"},"c"),Object(t["g"])(": c\n    }\n})\n")])],-1),S=Object(t["h"])("h3",null,"五. ES6 Module",-1),P=Object(t["h"])("p",null,[Object(t["g"])("ES6在语言标准的层面上，实现了模块功能，旨在为浏览器和服务器提供通用的模块解决方案，模块功能有两个主要命令构成："),Object(t["h"])("code",null,"export"),Object(t["g"])("和"),Object(t["h"])("code",null,"import"),Object(t["g"])("，"),Object(t["h"])("code",null,"export"),Object(t["g"])("命令用于规定模块的对外接口，"),Object(t["h"])("code",null,"import"),Object(t["g"])("用于输入其他模块提供的功能")],-1),_=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// math"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" basicNum = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" add = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"a, b"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" a + b\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(" {\n    basicNum,\n    add\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 引用"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" { basicNum, add } "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'./math'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"test"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"ele"),Object(t["g"])(") ")]),Object(t["g"])("{\n    ele.textContent = add("),Object(t["h"])("span",{class:"hljs-number"},"99"),Object(t["g"])(" + basicNum)\n}\n")])],-1),C=Object(t["h"])("p",null,[Object(t["g"])("同时"),Object(t["h"])("code",null,"ES6 Module"),Object(t["g"])("的"),Object(t["h"])("code",null,"import"),Object(t["g"])("也支持分模块导入、混合导入、重署名导入")],-1),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" { a, b } "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'./index1'"),Object(t["g"])("     "),Object(t["h"])("span",{class:"hljs-comment"},"// 分模块导入"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" { a, b }, c "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'./index2'"),Object(t["g"])("  "),Object(t["h"])("span",{class:"hljs-comment"},"// 混合导入"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" { a "),Object(t["h"])("span",{class:"hljs-keyword"},"as"),Object(t["g"])(" a_d } "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'./index3'"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-comment"},"// 重署名导入"),Object(t["g"])("\n")])],-1),I=Object(t["f"])("<p>此外ES6 Module也有一些要求</p><ul><li><code>import</code>会自动提升到代码顶层，所以<code>import</code> / <code>export</code> 不能放在块级作用域内</li><li><code>import</code> 和 <code>export</code> 不能放在条件语句内</li><li><code>import</code> 和 <code>export</code> 也不能进行运算</li><li><code>import</code>可以实现动态加载和懒加载</li></ul>",2),E=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 动态加载"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (isRequire) {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" res = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'./b'"),Object(t["g"])(")\n}\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 懒加载"),Object(t["g"])("\n{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"path"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'/home'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"name"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'home'"),Object(t["g"])(",\n    "),Object(t["h"])("span",{class:"hljs-attr"},"component"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-params"},"()"),Object(t["g"])(" =>")]),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'./home'"),Object(t["g"])(")\n}\n")])],-1),A=Object(t["f"])("<h3>六. 几种模块化的区别</h3><h4>1. AMD与CMD</h4><ul><li>AMD是RequireJS在推广过程中对模块定义的规范化产出</li><li>CMD是SeaJS在推广过程中对模块定义的规范化产出</li><li>AMD推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行。</li></ul><h4>2. CommonJS与AMD/CMD</h4><ul><li>AMD/CMD是CommonJS浏览器端的解决方案</li><li>CommonJS是同步加载的，代码在本地，加载时间基本等于硬盘读取时间</li><li>AMD/CMD是异步加载的，代码在服务端</li></ul><h4>3. UMD与AMD/CMD</h4><ul><li>UMD是AMD和CommonJS的糅合，跨平台的解决方案</li><li>AMD模块以浏览器第一的原则发展，异步加载模块</li><li>CommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装</li><li>UMD先判断是否支持Node.js的模块exports是否存在，存在则使用Node.js模块模式，再判断是否支持AMD（define是否支持），存在则使用AMD方式加载模块</li></ul><h4>4. CommonJS和ES6 Module</h4><ul><li><strong>模块加载</strong>：<code>CommonJS</code>是在运行时加载，并确定模块引用关系的，<code>ES6 Module</code>是在编译时加载，并确定模块引用关系的</li><li><strong>模块形态</strong>：<strong>CommonJS加载的是一个对象，这个对象只有在脚本运行时才会生成，而且只会生成一次。但ES6 Module模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成，各种工具就可以对JS模块进行模块分析，优化代码</strong>。<code>webpack</code>中的<code>tree shaking</code>和<code>scope hosting</code>实际上是依赖ES6 Module</li><li><strong>同步与异步</strong>：<code>CommonJS</code>是同步加载的，<code>ES6 Module</code>是异步加载的</li><li><strong>应用场景</strong>：<code>CommonJS</code>大多用于服务端，由于服务端大多是从本地读取文件，不用考虑异步的情况，<code>ES6 Module</code>用于浏览器和服务器</li><li><strong>命令提升</strong>：<code>import</code>会提升到头部，会首先执行，因此在块级作用域、运算、条件下会报错，并且<code>ES6 Module</code>支持混合导入、重命名导入、分模块导入等，导入更灵活</li><li><strong>动态更新</strong>：**CommonJS模块输出的是一个值的拷贝，ES6模块输出的是值得引用。**CommonJS一旦输出了一个值，如果模块内部后序的变化，不会影响外部对这个值得使用。而ES6 Module是在JS引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用，等到脚本真正执行的时候，再根据这个只读引用，到被加载的那个模块里去取值，引用后是可以感受到值得改变的。这可能也是因为<code>CommonJS</code>在引用时会生成缓存，而<code>ES6 Module</code>在引用时不会生成缓存，真正取值的时候就能渠道最终的值</li></ul>",9),D=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// lib.js"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" counter = "),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-title"},"inc"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    counter++\n}\n"),Object(t["h"])("span",{class:"hljs-built_in"},"module"),Object(t["g"])(".exports = {\n    counter,\n    inc\n}\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// CommonJS"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" mod = "),Object(t["h"])("span",{class:"hljs-built_in"},"require"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-string"},"'./lib'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(mod.counter) "),Object(t["h"])("span",{class:"hljs-comment"},"// 3"),Object(t["g"])("\nmod.inc()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(mod.counter) "),Object(t["h"])("span",{class:"hljs-comment"},"// 3"),Object(t["g"])("\n\n"),Object(t["h"])("span",{class:"hljs-comment"},"// ES6 Module"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" { inc, counter } "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'./lib'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(counter) "),Object(t["h"])("span",{class:"hljs-comment"},"// 3"),Object(t["g"])("\ninc()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(counter) "),Object(t["h"])("span",{class:"hljs-comment"},"// 4"),Object(t["g"])("\n")])],-1);function M(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E,A,D])}const N={};N.render=M;s["default"]=N},d55a:function(e,s,c){"use strict";c("353e")},da8c:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>互联网的信息传输依赖于各种协议，不同的环节遵循不同的协议，这些协议分布在不同层级共同实现了网络功能，这些层级结构的模型组成常见的有三种说法，分别是TCP/IP的五层模型和OSI的七层模型。</p><h2>一. OSI模型</h2><p>OSI(Open Systems Interconnection, 开放系统互联参考模型)，是ISO在20世纪80年代提出的，将计算机网络通信协议分为七层。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/2.jpg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>我们以公司A和公司B的一次商业报价单发送为例子进行每个层的功能的解释：</p><h3>1. 应用层</h3><p>给用户提供网络服务，包含FTP（文件）、SMTP（邮件）、HTTP、DNS、TFTP、SNMP协议。许多大家熟悉的基于Internet的应用实现都离不开这些协议，最常见的，进行万维网(WWW)的访问用到了HTTP协议，文件传输用FTP，电子邮件发送用SMTP，域名解析用DNS，远程登录用TELNET等。</p><ul><li><strong>HTTP(Hypertext Transfer Protocol, 超文本传输协议)</strong>: 是请求-响应的协议，主要服务的场景是web服务，就是网页的传输，默认使用TCP的80端口，更详细的关于HTTP的解释可以看看另外一篇文章<a href="https://zhangmingemma.github.io/#/post?file=2022-10-14-HTTP">《计算机网络系列之HTTP基础》</a></li><li><strong>HTTPS</strong>：是以安全为目标的HTTP通道，在HTTP基础上通过传输加密和身份认证保证了传输过程的安全性，默认使用TCP的443端口</li><li><strong>DNS(Domain Name System, 域名系统)</strong>: 将域名和IP地址进行相互映射，默认使用UDP的53端口，更详细的介绍可以看<a href="https://zhangmingemma.github.io/#/post?file=2022-10-16-DNS">《计算机网络系列之DNS以及网络域名解析》</a></li><li><strong>FTP(File Transfer Protocol, 文件传输协议)</strong>: FTP允许用户以文件操作的方式与另一主机进行相互通信，用户并不是真正登录到想要存取的计算机上面成为完全用户，而是通过FTP程序访问远程资源，实现用户往返传输文件、目录管理以及访问电子邮件等，默认使用TCP的20/21端口</li><li><strong>TFTP(Trivival File Transer Protocol, 简单文件传输协议)</strong>: 提供不复杂、开销不大的文件传输服务，默认使用UDP的69端口</li><li><strong>SNMP(Simple Network Management Protocol, 简单网络管理协议)</strong>: 原来的名字叫简单网管监控协议，专门设计用于在IP网格管理网络节点的一种标准协议，使网络管理员能够管理网格效能，发现并解决网络问题以及规划网络增长，默认使用UDP的161端口</li><li><strong>TELNET</strong>: 是Internet远程登录服务的标准协议和主要方式，为用户提供了在本地计算机完成远程主机工作的能力，默认使用TCP的23端口</li><li><strong>SSH(Secure Shell)</strong>: 较可靠的，专为远程登录会话和网络服务提供安全性的协议，默认使用TCP的22端口</li></ul><p>在我们的例子中，公司A老板就是我们的用户，发送商业报价单就是一种网络服务，类比发送商业合同也是一个网络服务。</p><h3>2. 表示层</h3><p>表示层提供各种应用于应用层的数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别，将接收到的数据转换为计算机二进制数据。数据的压缩和加密也是表示层可提供的功能之一。在我们的例子中，公司A在中国，公司B在英国，要商定英文作为交流的语言，那次是表示层也就是公司的文秘员，就需要将商业报价单翻译为英文，同时为了防止泄密，还会对报价单进行加密处理，这就是表示层的作用。</p><h3>3. 会话层</h3><p>会话层负责建立、管理和终止表示层实体之间的通信对话，该层的通信由不同设备中的应用程序之间的服务请求和响应组成，在我们的例子中，会话层的同事拿到表示层的同事转换后的资料，会话层同事将记录本次会话，找到公司B的地址和联系方式，将整份资料装进信封，写上地址和联系方式，交由传输层将快递寄出，等到公司B接收成功，会话就算结束，会话层的同事就会终止此次会话。</p><h3>4. 传输层</h3><p>为应用层实体提供主机端到端的通信能力，包括处理差错控制和流量控制等问题，保证了数据包的顺序传送及数据的完整性。由于一台主机可以运行多个进程，因此运输层有复用和分用两种能力，复用就是多个应用层进程可以同时使用传输层的服务，分用是指运输层把收到的信息分别交付给应用层的不同进程。运输层包含TCP、UDP两大协议，更细节的分析及两者的区别，可以看看另一篇文章<a href="https://zhangmingemma.github.io/#/post?file=2022-10-15-TCP%26UDP">《计算机网络系列之TCP与UDP》</a></p><ul><li><strong>TCP(Transmission Control Protocol, 传输控制协议)</strong>: 面向连接的、可靠的、基于字节流的传输层通信协议</li><li><strong>UDP(User Datagram Protocol, 用户数据协议)</strong>: 为应用程序提供了一种无需建立连接就可以发送封装的IP数据包的方法，是一种无连接的、不可靠的、快速传输的通信协议。</li></ul><p>在我们的例子中，传输层就是相当于公司服务快递邮件收发的人，负责将上层要寄出的资料投送到快递公司或者邮局</p><h3>5. 网络层</h3><p>主要解决主机到主机的通信问题，网络层包含的协议涉及数据包在整个网络中的逻辑传输，通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。在发送数据时，网络层把传输层产生的报文段或用户数据封装成分组或包进行传送，也就是IP数据报。IP协议是Internet的基础，我们常见的路由器就属于网络层。该层主要包含IP、ICMP、IGMP三个主要协议。</p><ul><li><strong>ICMP(Internet Control Message Protocol, 控制报文协议)</strong>: 用于在IP主机、路由器之间传递控制消息，控制消息包含网络是否连通、主机是否可达、路由是否可用等网络本身的消息，例如ping</li><li><strong>IGMP(Internet Group Management Protocol, 组管理协议)</strong>: 主机和组播路由器间运行的协议。其中单播是1对1发送消息，组播是1对N发送消息，广播是1对全部发送消息</li><li><strong>ARP(Address Resolution Protocol, 地址解析协议)</strong>: 是根据IP协议获取物理地址的一个协议。主机发送消息时将包含目标IP地址的ARP请求广播到局域网络中的所有主机，并接受返回消息，以此确定目标的物理地址。收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。</li><li><strong>RARP(Reverse Address Resolution Protocol, 逆地址解析协议)</strong>: 允许局域网的物理机器从网关服务器的ARP表或者缓存上请求其IP协议。</li></ul><p>在我们的例子中，网络层就是相当于快递公司的庞大网络、全国不同的集散中心，比如深圳发往北京的快递，首先要到深圳集散中心，再到武汉集散中心，再去北京集散中心，每个集散中心就相当于网络中的一个IP节点。</p><h3>6. 数据链路层</h3><p>负责监视数据在主机和网络之间的交换，在两个邻近节点进行数据传送的时候，将网络层交来的IP数据报组装成帧，每一帧包含数据和必要的控制信息（地址信息、同步信息、差错控制等），其中的控制信息使接收端能够知道一个帧从哪个比特开始，到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错，如果发现差错，数据链路层就会丢弃这个出现差错的帧，如果需要改正数据，则需要采用可靠传输协议来纠正出现的错误。数据链路层又分为2个子层：逻辑链路控制子层(LLC)和媒体访问控制子层(MAC)。常见的网卡就是属于数据链路层的。</p><h3>7. 物理层</h3><p>网络实际最终信号的传输是通过物理层实现的，通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用的设备有集线器、中继器、网线、同轴电缆等。</p><h2>二. TCP/IP参考模型</h2><p>TCP/IP（Transmission Control Protocol / Internet Protocol，传输控制协议/网际协议）不是指这两个具体的协议，其中包含了多种协议类型，如IP、ICMP、TCP、UDP、TELNET、FTP以及HTTP，是网际协议族，只是因为TCP和IP两个协议比较具有代表性，所以叫TCP/IP协议。TCP/IP参考模型的诞生起源于担心珍贵的主机、路由器和互联网关可能会突然崩溃，但不想网络受子网硬件损失的影响，已经建立的会话不会被取消，想要整个网络体系较为灵活。TCP/IP参考模型自上而下包含应用层、传输层、网络层、网络接口四层。其中数据链接层和物理层合并成为网络接口层，应用层对应OSI模型中的应用层、表示层和会话层。但后来为了更方便地描述，并综合OSI和TCP/IP的优点，采用的都是五层网络模型，包含应用层、传输层、网络层、数据链路层、物理层。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/1.jpeg" style="display:inline-block;margin-bottom:16px;"></div><p>在实际应用中，OSI模型常被作为理论的参考模型被广泛讨论和使用，而TCP/IP协议紧密结合实际已经作为网络互连的事实标准。</p><h3>数据传输过程</h3><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/3.jpg"><p>假定主机1的应用进程AP1，想要跟主机2的应用进程AP2进行通信，整个通信过程可以概括为：</p><ul><li>应用层：AP1将数据交给本主机的第5层应用层，应用层加上必要的控制信息，并将数据转换为二进制数据，转换后交给传输层</li><li>传输层：第4层传输层收到数据单元后，加上本层的控制信息，TCP头部报文(TCP头部的关键信息 - 端口号)，再交给网络层</li><li>网络层：第3层网络层收到上一层的数据包后，加上本层控制信息，即IP头部(IP头部的关键信息 - IP地址)，在交给数据链路层</li><li>数据链路层：第2层数据链路层收到数据包后，加上本层的控制信息，即MAC头部(MAC头部的关键信息 - MAC地址)，再交给物理层</li><li>物理层：将二进制数据组成比特流转换为电信号，通过传输介质到达目的主机2</li></ul><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/4.jpg"><p>到达目的主机2后，就从目的主机2的物理层逐次上升到应用层，</p><ul><li>物理层：将电信号转换为二进制数据</li><li>数据链路层：查看目标MAC地址，吻合则拆掉MAC头部，否则丢弃数据</li><li>网络层：查看目标IP地址，吻合就拆掉IP头部，否则丢弃数据</li><li>传输层：根据TCP头部判断数据段运送到哪里，之后将被分组的数据段重组，运送到应用层</li><li>应用层：将二进制数据还原成原始信息交给目的进程AP2</li></ul><h2>四. 小结</h2><p>总结一下OSI七层模型，每层的主要作用</p><ol><li>应用层：网络服务与最终用户的一个接口</li><li>表示层：数据的表示、安全和压缩</li><li>会话层：建立、管理和终止会话</li><li>传输层：定义传输数据的协议端口号，以及控流</li><li>网络层：定义逻辑地址、实现的不同</li><li>数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等</li><li>物理层：建立、维护、断开物理连接</li></ol><p>参考文献： [1] <a href="https://juejin.cn/post/7049265346296938504">《OSI七层模型与TCP/IP五层模型》</a> [2] 《计算机网络》谢希仁著</p>',40);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},dda5:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>文本分类是一项系统的工程，所涉及的技术很多，按流程可以将文本分类分为:文本预处理阶段、训练阶段、分类阶段、评价四个阶段，其中预处理阶段要文本处理成计算机能识别的格式，首先对文本进行分词处理，中文文本和英文文本组织形式不同，中文文本的分词过程比英文分词要复杂得多。分词后文本的特征词非常多，而我们需要的只是少数有使用价值的特征词，因此分词后的文本要进行特征选择，并将特征选择后的特征项加权，最后将文本表示成向量空间模型(VSM)，经过预处理后的文本才能进行分类。分类算法是文本分类的核心技术。评估阶段是对文本分类的效果进行评价，常用的指标有:准确率、召回率、以及综合这两个指标的评价方法一F1值等。</p><h3>文档表示方法</h3><p>文档集划分为训练集和测试集两个部分，训练集用于分类模型的学习，一般占整个文档集的70%;测试集用于评价分类模型，一般占整个文档集的30%。开放的英文文档集Reuters-21578和20NewsGroups。前者比后者更为常用。</p><p>经过半个世纪的发展，在文本处理领域，研究者提出了一些文本表示模型，主要有：布尔模型、向量空间模型、概率检索模型、n-Gram模型等，其中使用最广、效果最好的是向量空间模型。</p><p><strong>向量空间模型</strong></p><p>20世纪60年代，Salton G等人提出了向量空间模型，并成功应用于SMART文本检索系统，其基本思想是:将文本表征成由特征项(词)构成的向量空间中的一个点，（W1,W2,…,Wi），其中Wi为第i个特征项的权重，然后通过计算空间两点之间的相似度来表示两个文本的相关程度，相似度计算一般采用欧氏距离或向量夹角的余弦值。向量空间模型在实际使用中取得了很好的效果，常用的文本分类算法中，支持向量机、K近邻、和NB都是基于向量空间模型的。</p><p><strong>布尔模型</strong></p><p>布尔模型可以看作是向量模型的一种特例，根据特征是否在文档中出现，特征的权值只能取1或0。许多时候，使用二值特征的分类效果结果并不比考虑特征频率的差。决策树方法、关联规则方法和Boosting方法就是基于布尔模型。</p><p><strong>概率模型</strong></p><p>我们可以用该流程的思想来解决出现在文档检索中的不确定性和找寻的不清楚性。概率模型的理论是基于概率排队的：如果文件是按相关概率递减方向排队时，那么就会出现最大的检索性能。选用此种模型可以克服BM和SVM中的不足，此种模型根据词与词间和文档间与词条的概率关联性进行搜索。设文档d和顾客查询c都用（a1,a2,…an）表示，当词条ti∈d时，有ai=1.否则ai=0,这种关系可数学表示为： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image1.png" class="center"> 其中 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image2.png" class="center"> 　　f是所有参加训练的文档的总和，r则为顾客查询与文档集中相关的文档数，fi则表示训练文档集中有ti的文档数，ri则表示r个相关文档中有ti的文档数，模型的有点是有着非常严谨的数学理论基础，解决了不确定性推理的缺点，但是它的不足在于参数估计方面很困难，在文件和查询的表达方面也是很困难</p><h3>文档分词</h3><p>词是文本中最小的具有意义的语言成分，是构造向量空间模型的基础，文本分词的效果直接影响到文本分类的结果。在文本的组织上，中文与以英语为代表的欧美语言有着很大的不同，在西方语言中，词与词是使用空格隔开的，因此不需要进行分词处理，而在中文文本中，字、词是连在一起的，一个语句就是一连串的字、词组合，词与词之间没有明显界限，因此，分词的难度较大。常用的分词算法主要有:基于词典的分词方法、基于理解的分词方法、基于统计的分词方法。</p><p><strong>基于词典的分词方法</strong></p><p>基于词典的分词方法又叫做机械分词方法，它是按照一定的策略将待切分的字符串与词典中的词条进行匹配，若在词典中找到某个字符串，则匹配成功(即识别出一个词)。按照扫描方向的不同，基于词典的分词方法可以分为正向匹配和逆向匹配;按照不同长度优先匹配的情况，可以分为最大匹配和最小匹配;按照是否与词性标注过程相结合，又可以分为单纯分词方法和分词与标注相结合的一体化方法，常用的几种基于词典分词方法如下:正向最大匹配法(由左到右的方向)、逆向最大匹配法(由右到左的方向)、逐词遍历法。</p><p>在实际应用中，常常将上述方法结合起来。例如，可以将正向最大匹配方法和逆向最大匹配方法结合起来构成双向匹配法。由于汉语单字成词的特点，正向最小匹配和逆向最小匹配一般很少使用。一般说来，逆向匹配的切分精度略高于正向匹配，遇到的歧义现象也较少。</p><p>再一种方法是改进扫描方式，称为特征扫描或标志切分，优先在待分析字符串中识别和切分出一些带有明显特征的词，以这些词作为断点，可将原字符串分为较小的串再来进行机械分词，从而减少匹配的错误率。还有一种方法是将分词和词类标注结合起来，利用丰富的词类信息对分词决策提供帮助，并且在标注过程中又反过来对分词结果进行检验、调整，从而极大地提高切分的准确率。目前实用的自动分词系统基本上都是以采用机械分词为主，辅以少量的词法、语法和语义信息的分词系统。该方法的优点是易于实现，但精度较低，远远不能满足实际的需要。实际使用的分词系统，都是把机械分词作为一种初分手段，再利用各种其它的语言信息来进一步提高切分的准确率。</p><p><strong>基于理解的分词方法</strong></p><p>又称人工智能分词法，这种分词方法是通过让计算机模拟人对句子的理解，达到识别词的效果。其基本思想就是在分词的同时进行句法、语义分析，利用句法信息和语义信息来处理歧义现象。它通常包括三个部分:分词子系统、句法语义子系统、总控部分。在总控部分的协调下，分词子系统可以获得有关词、句子等的句法和语义信息来对分词歧义进行判断，即它模拟了人对句子的理解过程。这种分词方法需要使用大量的语言知识和信息。由于汉语语言知识的笼统、复杂性，难以将各种语言信息组织成机器可直接读取的形式，因此目前基于理解的分词系统还处在试验阶段。</p><p><strong>基于统计的分词方法</strong></p><p>基于统计的分词算法的思想是:找出输入字符串的所有可能的切分结果，对每种切分结果利用能够反映语言特征的统计数据计算它的出现概率，然后从结果中选取概率最大的一种。词是稳定的字的组合，因此在上下文中，如果相邻的字共现的次数越多，就越有可能构成一个词。因此字与字相邻出现的频率或概率能够较好的反映成词的可信度。通过对语料中相邻共现的各个字的组合频度进行统计，计算它们的互现信息。互现信息体现了汉字之间结合关系的紧密程度。当紧密程度高于某一个阈值时，便可认为此字组可能构成了一个词。这种方法只需对语料中的字组频度进行统计，不需要切分词典，因而又叫做无词典分词法或统计取词方法。但这种方法也有一定的局限性，会经常抽出一些共现频度高、但并不是词的常用字组，并且对常用词的识别精度差，时空开销大。实际应用的统计分词系统都要使用一部基本的分词词典进行串匹配分词，同时使用统计方法识别一些新的词，即将串频统计和串匹配结合起来，既发挥匹配分词切分速度快、效率高的特点，又利用了无词典分词结合上下文识别生词、自动消除歧义的优点。</p><p>对于任何一个成熟的中文分词系统来说，不可能单独依靠某一种算法来实现，需要 综合不同的算法来处理不同的问题。</p><h3>停用词处理技术</h3><p>经过分词处理的文本，并不是所有的特征都对构造向量空间模型和分类有帮助，相反，将对文本分类没有帮助的词作为特征项，会对分类的精度造成很大的影响，特别对于使用文档频率(DF)进行特征选择的分类方法，影响更大。另外，去停用词可以很大程度上减小特征项的数量，对文本降维具有很大帮助，所以在构造向量空间模型前，要对分类无帮助的词进行尽可能彻底的清理。去停用词在技术上实现并不复杂，只需建立一个停用词词典停用词词典内的词条进行匹配，如果匹配成功，则将该词去掉。</p><h3>特征选择方法</h3><p>在经过文本分类系统的分词、去停用词处理后，文本的特征维数仍然很高，这里所指的特征维数是指要构造VSM空间的所有文本的特征之和，一个文本集合很可能包含十几万个特征词，而每篇文本包含的特征词却很少，这样构造的向量空间模型是一个高维的稀疏矩阵，会对分类算法的时间复杂度和空间复杂度造成很大的影响。实验显示，当向量空间的特征维度达到一定值时就可以实现很高的分类性能，随着特征维度的增加，分类性能反而会下降。因此，必须对特征项进行有效的筛选。常用的文本特征选择方法有:文档频率(DF)、信息增益(IG)、互信息(MI)、X2统计量(CHI)、期望交叉嫡等，这些方法的基本思想都是对每一个特征(在这里是中文词)，计算某种统计度量值，然后设定一个阈值T，把度量值小于T的那些特征过滤掉，剩下的即认为是有效特征。</p><p><strong>文档频率（DF）</strong></p><p>DF值低于某个阈值的词条是低频词，它们不含或含有较少的类别信息。将这样的词条从原始特征空间中移除，不但能够降低特征空间的维数，而且还有可能提高分类的精度。DF高于某个阈值的词为中、高频词，这些词被认为对分类的影响较大，应该保留。在英文环境中，当IG和CHI等统计方法的计算复杂度太高时，DF可以代替它们被使用。</p><p><strong>互信息（MI）</strong></p><p>如果用A表示包含词条t且属于类别c的文档频数，B为包含t但不属于c的文档频数，C表示属于c但是不包含t的文档频数，N表示语料中的文档总数，t和c的互信息由下式计算： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image3.png" class="center"></p><p>如果t和c无关（即P(tc)=P(t)*P(c)），I(t,c)值自然为零。为了将互信息应用于多个类别，由下式计算t对于c的互信息： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image4.png" class="center"></p><p>其中m为类别数，将低于特定阈值的词条从原始特征空间中移除，降低特征空间的维数，保留高于阈值的词条</p><p><strong>信息增益（IG）</strong></p><p>表示文档包含某一特征时文档类的平均信息量，定义为某一特征在文档中出现前后的信息熵之差。假定c为文本类变量，C为文本类的集合，d为文本，f为特征。对于特征f其信息增益记为IG(f)，计算公式 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image5.png" class="center"></p><p><strong>X2统计（CHI）</strong></p><p>CHI统计方法度量词条t和文档类别c之间的相关程度，并假设t和c之间符合具有一阶自由度的x2分布，词条对于某类的x2统计值越高，它与类之间的相关性越大，携带的类别信息也较多，令N表示训练语料中的文档总数，c为某一特定类别，t表示特定的词条，A表示属于c类且包含t的文档频数，B表示不属于c类但包含t的文档频数，C表示属于c类但不包含t的文档频数，D表示既不属于c也不包含t的文档频数，则t对于c的CHI值计算公式： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image6.png" class="center"></p><p>对于多类问题，分别计算t对于每个类别的CHI值，可以用下面两种标准计算t对整个训练集的CHI： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image7.png" class="center"></p><p>其中m为类别数，从原始特征空间中移除低于特定阈值的词条，保留高于该阈值的词条作为文档表示的特征</p><h3>特征权重计算方法</h3><p><strong>布尔权重</strong></p><p>均权，布尔权重是最最简单的一种赋权方法，这种方法将所有特征同等看待，既不突出又不抑制任何一个特征。特征项的权值或者等于1，或者等于0,计算公式为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image8.png" class="center"></p><p>其中Wi为特征项i的权重，TF为特征项i出现的次数，这种方法的缺点就是无法体现一个词在文本中的重要程度。</p><p><strong>TF权重</strong></p><p>TF权重(Term Frequency)又称词频权重，或称特征项频率。不同类别的文档，在特征项的出现频率上有很大差异，因此特征项频率信息是文本分类的重要参考之一，一般较大的特征项在该类文档中具有较高的权重。它的计算公式为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image9.png" class="center"></p><p>实际应用中各类别文本的长度很难一致，各类文本包含的字数、词数可能差别会很大，这对词频会造成直接影响，因此通常对词频作归一化处理。另外，如果特征选择后的特征项中含有较多的非名词(如代词、数词、连词)，而这些词出现的概率非常高，如果使用TF权重加权，会赋值给这些词较高的权重，这势必对分类结果产生不利影响，因此，TF权重对去停用词的效果具有较强依赖性。</p><p><strong>IDF权重</strong></p><p>IDF越大，此特征项在文档中的的分布越集中，说明它在区分该文档内容属性方面的能力越强。反文档频率是特征项在文档集分布情况的量化。该方法以出现特征词的文本数为参数构建的函数代表特征项的权重。这体现了信息论中集中度的思想，具有一定的合理性，但忽略了分散度和频度两个因素，因此具有片面性，公式如下: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image11.png" class="center"></p><p><strong>TFIDF权重</strong></p><p>TFIDF(Term Frequency-Inverse Document Frequency)是由是由Salton在1988年提出的，TFIDF权重综合考虑了TF权重和IFD权重的优点和不足，是目前加权效果最好的权重计算方法，广泛应用于文本处理领域。其基本思想是:如果特征项t在一类文档的出现的次数越多，而在整个文档集中出现的频率越低，那么t对分类的作用越大，应该赋予越高的权重，例如，助词“的”几乎在每篇文档中都出现，因此它的TF值非常高，相反，IDF值却非常低，综合考虑TF和IDF，该词将被赋予很低的权重。TFIDF权重，即TF权重和IDF权重的组合，利用了词频和文本频率两种信息，公式如下: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image12.png" class="center"></p><p>式中TF为第k个特征词在第1篇文本中出现次数，N为训练集中总文本数，nk为出 现第k个特征词的文本数，a为一个经验值，一般取0. 01, 0. 1或者1</p><h3>相似度计算</h3><p><strong>向量夹角的余弦</strong></p><p>设文档A在VSM空间中的向量形式为a(x1,x2,…,xa)，文档B在VSM空间中向量形式为b(y1,y2,…,yb),则A,B文本的向量夹角的余弦表示为 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image13.png" class="center"></p><p>两个向量夹角的余弦值越大，表示这两个向量的相似度越高</p><p><strong>欧氏距离</strong></p><p>欧式距离是通过空间向量点之间的距离来表示文本的相关程度，具体的形式为： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image14.png" class="center"></p><p>其中d(x,y)是样本x和y的欧式距离，m是样本属性总数，两个向量点之间的欧式距离越小，表示两个向量的相似度越高，在文本分类领域，使用向量夹角余弦计算文本相似度的效果，要好于欧式距离</p><h3>文本分类方法</h3><p>从文本分类的方法来看，现有的文本分类技术主要采用三种类型的方法:基于统计的方法，基于连接的方法和基于规则的方法。</p><p><strong>基于连结的方法</strong></p><p>即人工神经网络，是设计来模拟人脑神经网络的，并期望其能像大脑一样地运作，像大脑一样地学习，从而产生智慧。这种方法具有信息分布存放、运算全局并行、处理的非线性、容错性等特点，适用于学习一个复杂的非线性映射。但是使用它学习所形成的知识结构是人所难以理解的，系统本身对于使用的人来说就象是一个变魔术的黑盒子，根据输入给出输出，答案正确但不知道是怎么算出来的。</p><p><strong>基于规则的方法</strong></p><p>一种唯理主义方法，本质上是一种确定性的演绎推理方法，优点在于根据上下文对确定性事件进行定性描述，能充分利用现有的语言学成果。它成立的前提是有大量的知识，而这些知识是人类专家总结出来的，至少解释这些知识的各种“事实”以及对事实的解释“规则”是专家总结归纳的。由于必须有人的参与，所以对于知识的可理解性，可读性非常重视。同时，在不确定性事件的描述，规则之间的相容性等方面存在一些缺陷和限制。该算法在领域专家的知识上具有依赖性，分类体系好，错误率低，but在专业领域的知识组织和管理中比较实用，实现困难，成本高，没有普遍性，不容易移植等缺点。但是，有些统计方法无法解决的问题，利用规则却很容易解决。常用的基于规则的方法有决策树、关联规则等。</p><p><strong>基于统计的方法</strong></p><p>本质上是一种非确定性的定量推理方法，定量是基于概率的，因此其必然会掩盖小概率事件的发生。基于统计的方法是一种经验主义方法，其优势在于它的全部知识是通过对大规模语料库分析得到的，可以取得很好的一致性和非常高的覆盖率，对语言处理提供了比较客观的数据依据和可靠的质量保证。常用的基于统计的方法有Naive Bayes , KNN等。</p><p><strong>NaiveBayes算法</strong></p><p>贝叶斯分类是统计学分类方法，它是一类利用概率统计知识进行分类的算法。在许多场合，朴素贝叶斯(NaiveBayes, NB)分类算法可以与决策树和神经网络分类算法相媲美，该算法能运用到大型数据库中，且方法简单、分类准确率高、速度快。由于贝叶斯定理假设一个属性值对给定类的影响独立于其它属性的值，而此假设在实际情况中经常是不成立的，因此其分类准确率可能会下降。具体地，设每个数据样本用一个n维特征向量来描述n个属性的值，即:X={X1,X2,…,Xn}假定有m个类，分别用C1,C2,…,Cm表示。给定一个未知的数据样本X,若朴素贝叶斯分类法将未知的样本X分配给类C，则一定是: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image15.png" class="center"></p><p>根据贝叶斯定律： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image16.png" class="center"></p><p>由于P(X)对于所有类为常数，最大化后验概率P(Ci |x)可转化为最大化先验概率P(x|Ci)P(Ci)。如果训练数据集中有许多属性和元组，计算P(x|Ci)的开销可能非常大，为此，通常假设各属性的取值相互独立，这样 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image17.png" class="center"></p><p>先验概率可以从训练数据集中求得。根据此方法，对于一个位置类别的样本X，可以分别计算出X属于每一个类别Ci的概率然后选择其中概率最大的类别作为其类别。</p><p>Naive Bayes方法分为最大似然模型(Maximum Likelihood Model )、多项式模型(Multinomial Model )、泊松模型(PoisonModel)等。朴素贝叶斯算法的主要优点是：对于文本数据和数值数据的分类效果较好，与其他算法相比易于实现和计算。主要缺点：朴素贝叶斯算法成立的前提是各属性之间相互独立 ，当数据集满足这种独立性假设时，分类的准确度较高，否则可能较低。</p><p><strong>KNN算法</strong></p><p>KNN算法最初由Cover和Hart于1986年提出，该算法的基本思想：根据传统的向量空间模型，文本内容被形式化为特征空间中的加权特征向量，即D=D(T1,W1;T2,W2;…;Tm,Wm)。对于测试文本，计算它与训练样本集中每个文本的相似度，找出K个最相似的文本，根据加权距离和判断测试文本所属的类别。具体算法步骤如下：</p><ul><li><p>对于一个测试文本，根据特征词形成测试文本向量</p></li><li><p>计算该测试文本与训练集中每个文本的文本相似度： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image18.png" class="center"></p></li></ul><p>式中di为测试文本的特征向量，dj为第j类的中心向量；M为特征向量的维数；Wk为向量的第k维。k的值的确定一般先采用一个初始值，然后根据实验测试K的结果调整K值，一般初值设定为几十到几百</p><ul><li><p>按照文本相似度，在训练文本集中选出与测试文本最相似的k个文本</p></li><li><p>在测试文本的k个近邻中，依次计算每类的权重，计算公式 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image19.png" class="center"></p></li></ul><p>x为测试文本的特征向量；Sim(x,di)为相似度计算公式；b为阈值，有嗲与优化选择；而y(di,cj)的取值为1或者0，如果di属于cj，则函数值为1，否则为0</p><ul><li>比较类的权重，将文本分到权重最大的那个类别 也就是说，如果在这k个文档中，有多个文档同属于一个类，则该类的分值为这些文档与测试文档之间的相似度之和。对这k个文档所属类的分值统计完毕后，即按分值进行排序。</li></ul><p><strong>类中心向量法</strong></p><p>类中心向量法的算法思想非常简单：将每一类别文本训练后得到该类别的中心向量Cj(W1,W2,…,Wj)分类时，将待分类文本T表示成n维向量的形式T(W1,W2,…,Wn)然后，计算文本T与每类中心向量的相似度，相似度计算可以采用向量夹角的余弦或是欧氏距离表示，将T归类为与其相似度最大的类中： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image20.png" class="center"></p><p>类中心的选择有三种方式：平均中心、和平均、归一化平均。和中心是某一类别中所有向量相加之和： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image21.png" class="center"></p><p>将和中心与该类向量的个数相除得到类别的平均中心： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image22.png" class="center"></p><p>而采用二范数对平均中心归一化处理得到归一化中心： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image23.png" class="center"></p><p>类中心向量法的优点是对训练集进行了最大程度的裁剪，待分类文本只需与极少的类中心向量对比，就可以将其分类，因此训练和分类速度很快。缺点是分类精度受类别的分布影响较大，当类别分布均匀，边界清晰时，分类精度较高;当类别分布不平衡，边界模糊时，分类的效果不好。</p><p><strong>SVM算法</strong></p><p>支持向量机SVM(Support Vector Machines)是Vapnik等人提出的一种基于统计学习理论的机器学习方法。SVM建立在统计学理论的VC理论和结构风险最小化原理基础上，其基本思想是:使用简单的线形分类器划分样本空间，如果一个训练集中的矢量被一个超平面正确地线性分割，且距离超平面最近的矢量之间的距离最大，则称该超平面为最佳超平面，其中距离超平面最近的对决策面设计起作用的点称为支持向量(Support Verctors)。支持向量机在解决小样本，非线性及高维模式识别问题等方面表现出明显的优势。</p><p>SVM的基本思想可用图3-1的两维情况来说明。图中，实心点和空心点代表两类样本，H为分类线，H1, H2分别为过各类中离分类线最近的样本且平行于分类线的直线，它们之间的距离叫做分类间隔(margin)。所谓最优分类线就是要求分类线不但能将两类正确分开(训练错误率为0)，而且使分类间隔最大。 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image24.png" class="center"></p><p>支持向量机主要优点：对高维、稀疏数据不敏感，更好的捕捉了数据的内在特征，准确率高；缺点：对于非线性问题，核函数选择较为困难，分类结果召回率较低</p><p>训练样本在各个类别中分布的不均匀性对许多分类器会形成噪声。例如:在Bayes模型中，如果先验分布无法确定，“均匀分布”是符合信息论的最大嫡原则( Maximum Entropy)的;对于KNN和SVM分类器，远离类别边界的样本往往对分类没有什么作用，KNN分类器还会因为类别边界部分样本分布的不均匀而造成测试样本的错分。从候选训练样本集中选择合适的训练样本子集，不仅可以减少分类器的学习时间，甚至可以提高分类器的准确性。四种方法的实验结果比较： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image25.png" class="center"> 　 　　可以看出支持向量机具有最好的分类效果，各项指标全面领先于其他分类算法。KNN分类效果仅次于支持向量机，而类中心向量法也有很好的分类表现，贝叶斯的分类效果最差，与其它三种算法相比有较大差距。在追求分类效率而对分类精度要求不高的领域，可以考虑使用类中心向量分类法，可以极大提高分类的效率;在对对分类精度要求较高时，可以采用SVM或KNN分类法。</p><h3>分类结果评估</h3><p><strong>单标注分类问题</strong></p><p>文档分类中普遍使用的性能评估指标有查全率(Recall，简记为:r)、查准率（C Precision， 简记为P)。对于文档类中的每一个类别，使用列联表(Contingency Table )来计算查全率和查准率。</p><table><thead><tr><th>Tables</th><th>真正属于该类的文档数</th><th>真正不属于该类的文档数</th></tr></thead><tbody><tr><td>判断为属于该类的文档数</td><td>a</td><td>b</td></tr><tr><td>判断为不属于该类的文档数</td><td>c</td><td>d</td></tr></tbody></table><p>这时，r和P分别定义为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image26.png" class="center"></p><p><strong>宏平均and微平均</strong></p><p>用列联表只能评价单个类的分类性能，如果要对分类的整体性能进行评价，通常使用宏 平均 &lt; Macro-Averaging)和微平均 ( Micro-Averaging )。宏观平均是先对每一个类统计r、p值，然后对所有的类求r、P的平均值，即 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image27.png" class="center"></p><p>微观平均是先建立一个全局列联表，然后根据这个全局列联表进行计算，即: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image28.png" class="center"></p><p>显然，宏平均是对类的平均，所以容易受小类的影响，而微平均则是对文档的平均，容易受到大类的影响。</p><p><strong>平衡点(Break-even Point )</strong></p><p>对于分类系统来说，r和p值是互相影响的。提高r会引起p的减小，反之亦然。因此， 为了更全面地反映分类系统的性能，一种做法是选取和p相等时的值来表征系统性能，这个值叫做平衡点(Break-even Point，简称BEP)值。当然，有时通过测试可能得不到和p相等的值。这时取最接近的和p值的平均值作为BEP值，称为插值BEP</p><p><strong>F值(F-measure )</strong></p><p>另一种常用的将查全率和查准率结合起来的性能评价方法是F测量，其计算公式为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image29.png" class="center"></p><p>其中，β是一个用来调节查全率和查准率权重的参数。β一般取值为1,公式转化为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image30.png" class="center"></p><p>显然，BEP是F1的特殊形式，因为当r=p时，有F1 =BEP</p><p><strong>多标注分类问题</strong></p><p>每一个输入的测试文档，都会返回一个排序后的文档类列表。这时，两个指标分别定为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image31.png" class="center"></p><p>整个分类器的评估应该是对所有测试文档的这两个指标的统计平均。通常使用的统计平均为11点插值平均查准率(Interpolated 11-point Average Precision )</p><h3>文本可视化</h3><ul><li><p>标签云：经典的静态可视化分析，Wordle：将关键词或者标签生成为一个可视化的词云</p></li><li><p>ThemeRiver：动态文本可视化，TIARA：参考了wordle的源码实现了系统中的文本静态可视化</p></li><li><p>CiteSpace：以可视化技术针对科学论文以及引文进行网络分析的软件</p></li></ul>',108);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},de77:function(e,s,c){},deab:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>我们在<a href="https://zhangmingemma.github.io/#/post?file=2022-10-14-HTTP">《计算机网络系列之HTTP基础》</a>那一篇中讲到了传输层有两个代表性的协议就是TCP和UDP，接下来主要讲二者的概念以及主要区别。</p><h2>一. UDP</h2><p>用户数据报协议（User Datagram Protocol，UDP）的主要特点包含：</p><ul><li><strong>无连接</strong>，即发送数据之前无需建立连接，减少了建立连接的时延和开销。在发送端，应用层将数据传递给传输层的UDP协议，UDP只会给数据加一个UDP头标识，就传递给网络层了</li><li>尽最大努力交付，即<strong>不保证可靠交付</strong>。收到什么传递什么，也不会备份数据，也不关心对方是否正确接收到数据</li><li>支持一对一、一对多、多对一和多对多的交互通信</li><li><strong>面向报文</strong>，发送方的UDP对应用层传来的报文，直接添加首部就会交给IP层，既不合并，也不拆分，保留报文的边界。接收方收到IP层传来的报文，直接拆分首部就会返回给应用层，因此应用层必须选择合适大小的报文</li><li><strong>没有拥塞控制</strong>，当实时视频会议要求源主机以恒定的频率发送数据，并且允许在网络发生拥塞的时候丢失一部分数据，UDP就很适合</li><li><strong>UDP首部开销比较小</strong>，只有8个字节，包含4个字段，源端口、目的端口、长度和检验和，长度为数据报文的长度，检验和为数据报文是否出错，出错则会丢弃</li></ul><h2>二. TCP</h2><p>传输控制协议(Transmission Control Protocol, TCP)的主要特点包含：</p><ul><li><strong>面向连接</strong>，即应用程序在传送数据前，必须要先建立TCP连接，在传送完数据之后，必须释放已经建立的连接</li><li><strong>提供可靠交付的服务</strong>，通过TCP传送的数据，无差错、不丢失、不重复，并且按序到达。TCP判断丢包、误码靠的是TCP的段编号以及确认号，为了保证可靠传输，给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。</li><li><strong>一对一交互通信</strong></li><li><strong>全双工通信</strong>，TCP允许通信双方的应用进程在任何时候都能发送数据，两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。</li><li><strong>面向字节流</strong>，虽然应用程序和TCP的交互是一次一个数据块，但TCP把应用程序交下来的数据当做一连串无结构的字节流，TCP并不理解字节流的含义。TCP不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系(例如，发送方应用程序交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块就把收到的字节流交付上层的应用程序)，但接收方应用程序收到的字节流必须和发送方应用程序发送的字节流完全一样。</li><li><strong>有拥塞控制</strong>，当网络出现拥塞的时候，TCP能够减少向网络中注入数据的速率和数量，缓解拥塞</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/1.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h3>1. TCP报文首部格式</h3><p>TCP是面向字节流的，但TCP传送的数据单元却是报文段，一个报文段分为首部和数据两部分，TCP报文首部的前20个字节是固定的，后面4n个字节就是根据需求增加的。固定部分的字段及其含义分别是：</p><ul><li><strong>源端口和目的端口</strong>：各占<code>2字节</code></li><li><strong>报文段序号SEQ</strong>：占<code>4字节</code>，TCP是面向字节流的，传输的每个字节都会有自己的顺序编号，整个要传输的字节流的起始序号必须要在建立连接的时候设置，首部中的序号字段指的是本报文段所发送的数据的第一个字节的序号。例如，一个报文段的序号字段值是301，报文长度为100，那最后一个字节的序号是400，下一个报文段的序号字段值应该就是401</li><li><strong>确认号ACK</strong>：占<code>4字节</code>，是期望收到对方下一个报文段的第一个数据字节的序号。例如，B正确收到了来自A的一个报文段，报文段序号值为501，数据长度为200，最后一个字节的序号为700，那么B期望收到的下一个数据序号就是701，于是B在发送给A的确认报文段中把确认号设为701。</li><li><strong>数据偏移</strong>：占<code>4位</code>，TCP报文段的首部长度，数据偏移的最大值为60字节。</li><li><strong>保留</strong>：占<code>6位</code>，保留为今后所用 <ul><li><strong>URG</strong>：紧急，当<code>URG = 1</code>时，表明紧急指针字段有效，它告诉系统此报文段中有紧急数据，应该尽快传送。例如命令中的ctrl+c</li><li><strong>ACK</strong>：确认，当<code>ACK = 1</code>时，确认号有效，在连接建立后ACK都要为1</li><li><strong>PSH</strong>：推送，当两个应用进程进行交互通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这种情况下TCP就可以使用推送操作，当接收方收到PSH = 1的报文段，就尽快交付，而不是等缓存满了之后再交付</li><li><strong>RST</strong>：复位，当<code>RST = 1</code>时，表明TCP出现差错，必须释放连接，重新建立连接。<code>RST = 1</code>也可以用来拒绝一个非法报文段或者拒绝打开一个连接</li><li><strong>SYN</strong>：同步，在建立连接时用来同步序号。当<code>SYN = 1</code>而<code>ACK = 0</code>时，表明这是一个连接请求报文段，如果同意则会时<code>SYN = 1</code>和<code>ACK = 1</code>。SYN置为1就标识这是一个连接请求，或是连接接受报文</li><li><strong>FIN</strong>：终止，当<code>FIN = 1</code>标识发送方已发完数据，要求释放连接</li></ul></li><li><strong>窗口</strong>：占<code>2字节</code>，是指发送本报文段的一房的接收窗口，窗口值告诉对方，从本报文段首部中的确认号算起，接收方允许发送的数据量。</li><li><strong>检验和</strong>：占<code>2字节</code>，检验范围包含首部和数据两部分</li><li><strong>紧急指针</strong>：占<code>2字节</code>，紧急指针仅在<code>URG = 1</code>时有效，指出本报文段中的紧急数据的字节数。窗口值为0也可以发送紧急报文</li></ul><p>选项部分唯一定义的字段是最大报文字节数，就是MSS</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/5.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h3>2. TCP连接</h3><p>应用程序在传送数据前，必须要先建立TCP连接，在传送完数据之后，必须释放已经建立的连接。像下图描述的一样，A要与B建立连接，需要经过<strong>三次握手</strong>：</p><ul><li>A首先向B发出连接请求报文段，首部中的同步位<code>SYN=1</code>，同时选择一个厨师序号<code>seq = x</code>，不能携带数据</li><li>B收到连接请求报文段后，如同意建立连接，则向A发送确认。在确认报文中<code>SYN = 1</code>且<code>ACK = x + 1</code>，同时也为自己选择一个<code>seq = y</code>，也不能携带数据</li><li>A收到B的确认后，给出应答，<code>SYN = 1</code>且<code>ACK = y + 1</code>，且<code>seq = x + 1</code>，此时A进入<code>ESTABLISHED</code>状态，B收到A的确认后，也进入<code>ESTABLISHED</code>状态，连接已建立完成</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/4.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p><strong>为什么A还要发送一次确认？</strong> 为了避免建立无效连接。例如A发出连接请求，但因网络延迟没有收到确认，于是A重传连接请求，B发回了确认，此时延迟的连接到达了B，此时B会认为是新的请求，就会再次发出确认，如果没有三次握手，那这里就会建立两条连接，但其中一条是无效的连接</p><p>应用程序在传输完数据之后，要释放建立的连接，像下图描述的一样，<code>ESTABLISHED</code>状态的A和B要释放连接，要经历<strong>4次挥手</strong>：</p><ul><li>A首先向B发出释放连接报文，并停止发送数据，主动关闭TCP连接，A的报文首部<code>FIN = 1</code>，序号位置为<code>seq = u</code>，此报文不能携带数据，会消耗掉一个序号</li><li>B收到连接释放报文之后立即发出确认，确认号是<code>ACK = u + 1</code>，这个报文段自己的<code>seq = v</code>，等于B前面已传送的数据最后一个字节的序号+1，此时连接处于半关闭状态，此时A已经没有数据要发送了，但B如果还要发送，A还是要继续接收的。</li><li>A收到B的确认之后，等待B发送的释放报文段，如果B没有数据继续发送，就会发送连接释放报文段，<code>FIN = 1</code>，<code>ACK = u + 1</code>，<code>seq = w</code>，B就等待A的确认</li><li>A收到B的释放连接报文后，对此发出确认，在确认报文段内<code>ACK = w + 1</code>，自己的序号<code>seq = u + 1</code>，此时连接等待时间等待计时器计时结束就可以彻底释放了，时间计时器的时间设置根据当前的网络状态的具体情况来确定，这个计时是为了等待B收到ACK确认报文</li></ul><p><strong>如果客户端宕机，服务端是否持续保持连接？</strong> 会有保活机制，如果服务端没收到客户端一次报文数据，就设置新的计时器，一般为2小时，若2小时没有收到客户端的数据时，就发送一个探测报文段，之后每隔75分钟发送一次，连发10次都没有回应，就会自动断开连接</p><p><strong>套接字</strong> TCP把连接作为最基本的抽象，每条连接唯一地被通信两端的两个端点所确定。TCP连接的两个端点叫做套接字/插口，即端口号拼接到IP地址即形成了套接字。套接字的表示方法就是在点分十进制的IP地址后面写上端口号，中间用冒号隔开。例如<code>192.3.4.5:8080</code>就是一个套接字</p><h3>3. 可靠传输</h3><h4>可靠传输的原理</h4><p>TCP之后的网络都是不可靠传输，TCP的可靠传输的工作原理是：</p><ul><li><strong>停止等待</strong>：每发送完一个分组就停止发送，等待对方的确认通知，在收到确认通知后再发送下一个分组</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/2.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><ul><li><strong>超时重传</strong>：如果设计A发送数据给B，A只要超过一段时间仍然没有收到确认，就认为刚刚发送的分组丢失了，会重传前面发送的分组。要实现超时重传，首先需要发送数据的副本，以备重传之需；发送的数据的seq，能够标识报文段；超时的倒计时计时器应当大于正常数据往返时间。</li><li><strong>确认丢失和确认迟到</strong>：上面图片中，A发送数据给B，A超过一段时间没有收到确认，此时有A-B数据传送延迟/丢失，或是B-A确认传送延迟/丢失。如果是前者，A重发之后，B会丢弃重复数据，用最新的数据，并发送确认；如果是后者，A重发之后，收到确认之后又收到了确认，则会什么都不做</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/3.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>TCP需要等待请求确认，需要长时占用通信成本，因此TCP采用流水线传输，发送方可连续发送多个分组，不必每发完一个分组就等待确认。</p><h4>可靠传输中的滑动窗口</h4><p>假设A收到B的确认报文，窗口值为20字节，<code>ACK = 31</code>，表示30及之前的数据都收到了，此时A就会调整其发送窗口为31 - 50，滑动窗口的设置有几个要点：</p><ul><li>在没有收到确认之前，A可以连续把窗口内的数据都发送出去，在未收到确认前这些数据都必须保留，以便超时重传</li><li>没有按序到达的字节，接受方收到之后会暂存在接收窗口，等待缺少的字节全部收到后，再交付应用层。接收方也可在首部定义SACK选项去说明缺失的片段边界，让发送方重传缺失的片段。</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/6.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>同时滑动窗口也是TCP实现流量控制的关键核心，发送方发送的数据长度不能超过接收方给出的接收的窗口值，接收方可以通过窗口值控制接收数据的大小，实现流量控制。</p><h3>4. 拥塞控制</h3><p>网络拥塞往往是许多因素引起的，网络拥塞的监测指标有很多：由于缺少缓存空间而被丢失的分组的百分比，平均队列长度，超时重传的分组数，平均分组时延，分组时延的标准差等。控制拥塞是一个动态的过程，非常复杂，1999年公布的因特网建议标准RFC 2581定义了进行拥塞控制的四种算法：慢开始、拥塞避免、快重传和快恢复。为更好的解释拥塞控制的算法原理，我们先假定数据单方向传输，并且接收方具备足够大的缓存空间，发送窗口的大小由网络的拥塞程度决定</p><h4>（1）慢开始和拥塞避免</h4><p>发送方维持一个叫拥塞窗口的状态变量，拥塞窗口的大小取决于网络的拥塞程度并且动态地在变化，发送方让自己的发送窗口等于拥塞窗口。当发送方没有按时收到确认报文，就推测可能出现网络拥塞，此时发送方就可以将拥塞窗口调整小，减轻网络负担。</p><p><strong>慢开始算法</strong>减小拥塞窗口的思路是：最开始我们不知道网络的负荷情况，可以从小到大逐渐增大拥塞窗口数值(cwnd)，所谓的“慢”就是指最开始发送方只发一个报文段，拥塞窗口值设为1，之后每收到一次确认报文，就把cwnd加倍，逐次增大（这个1是指1个报文段，报文段的最大字节数就是MSS，在TCP首部中有对应的定义）。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/7.png" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p><strong>拥塞避免算法</strong>的思路是让拥塞窗口缓慢增大，没经过一个往返时间就把发送方的拥塞窗口cwnd加1，而不是加倍，这样拥塞窗口cwnd就是线性增长，比慢开始算法的增长速率更为缓慢</p><p><strong>实际应用</strong>中通常会设置一个慢开始门限，拥塞窗口小于慢开始门限时，采用慢开始算法逐次增大拥塞窗口值；等于慢开始门限时，两种方法都可以使用；大于慢开始门限时，采用拥塞避免算法增大拥塞门限。当遇到网络拥塞时，将慢开始门限设置为出现拥塞时发送方窗口值的一半，然后拥塞窗口值重置为1，继续采用前面的方法进行稳步增大拥塞窗口值。能够迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器能够有足够的时间处理积压的分组</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/8.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h4>（2）快重传和快恢复</h4><p>如下图的描述，<strong>快重传</strong>的过程举例是发送方按序发送M1、M2、M3之后，M3丢失了，发送方继续发送M4~M6，接收方没收到一次就会重复发送M2的确认报文，提示发送方M3丢失，发送方连续三次收到相同的确认后，就会立即发送M3的重传，而不必等待超时重传的倒计时，可以使吞吐量提高20%。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/9.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>与快重传搭配的还有<strong>快恢复</strong>，当发送方连续收到三个相同的确认之后，就会将慢开始门限减半，预防网络拥塞，但不会执行慢开始算法，因为连续收到确认报文，代表网络没有发生拥塞，而是会把拥塞窗口设为慢开始门限减半后的数值后开始执行拥塞避免算法。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/10.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p><strong>额外知识点</strong></p><ul><li><strong>发送窗口值</strong>取决于拥塞窗口和接收窗口，一般取二者的最小值</li><li><strong>流量控制和拥塞控制的区别</strong>：流量控制仅为端到端，是说控制发送方发送数据的大小和速度，减小网络负荷，而拥塞控制则比较复杂，是设计网络的各个环节，我们常探讨的拥塞控制不仅包含发送方发送数据的机制调整，也包含接收方的接收确认的机制</li></ul>',51);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},e007:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])('<p>Vue3是Vue2重构后的版本，有很多地方都是不同的，这篇文章主要分析Vue2和Vue3的区别：</p><h3>一. 生命周期</h3><p>二者的生命周期大致的方法和功能是相同的，只是有一部分会存在差异</p><ul><li><code>beforeCreate</code>和<code>created</code>被<code>setup</code>取代</li><li><code>beforeMount</code>更名为<code>onBeforeMount</code></li><li><code>mounted</code>更名为<code>onMounted</code></li><li><code>beforeUpdate</code>更名为<code>onBeforeUpdate</code></li><li><code>updated</code>更名为<code>onUpdated</code></li><li><code>beforeDestroy</code>更名为<code>onBeforeUnmount</code></li><li><code>destroyed</code>更名为<code>onUnmounted</code></li><li><code>onRenderTracked</code>，状态跟踪，是Vue3新引入的钩子函数，只有在开发环境有用，用于跟踪所有的响应式变量和方法，一旦页面有update，就会跟踪他们并返回一个event对象</li><li><code>onRenderTriggered</code>，状态触发，是Vue3新引入的钩子函数，只有在开发环境有用，用于跟踪发生改变的数据，同样返回一个event对象</li></ul><h3>二. 响应式原理</h3><p>Vue2是使用<code>发布-订阅式</code> + <code>Object.defineProperty</code>实现的，存在的缺点就每次渲染是将<code>data</code>中的数据通过<code>Object.defineProperty</code>进行响应式或者双向绑定上，之后加的属性时不会被绑定上的，不会触发更新渲染。</p><p>Vue3是使用<code>发布-订阅式</code> + <code>Proxy</code>实现的，<code>Object.defineProperty</code>只能响应首次渲染时的属性，<code>Proxy</code>需要的是整体，不需要关心里面有什么属性，可以做更细致的事情，是<code>defineProperty</code>无法达到的。</p><p><strong>兼容性</strong></p><ul><li><code>vue2.x</code>之所以只能兼容到IE8就是因为<code>defineProperty</code>无法兼容IE8,其他浏览器也会存在轻微兼容问题</li><li><code>proxy</code>的话除了IE，其他浏览器都兼容，这次vue3还是使用了它，说明vue3直接放弃了IE的兼容考虑，个人感觉已经没人用IE了</li></ul><h3>三. diff算法的提升</h3><h4>1. 静态节点</h4><p>在没有动态改变节点结构的模板指令（例如<code>v-if</code>和<code>v-for</code>）的情况下，节点结构保持完全静态。如果我们将一个模板分成由这些结构指令分隔的嵌套“块”，则每个块中的节点结构将再次完全静态。当我们更新块中的节点时，我们不再需要递归遍历DOM树 - 该块内的动态绑定可以在一个平面数组中跟踪。这种优化通过将需要执行的树遍历量减少一个数量级来规避虚拟DOM的大部分开销。</p><p>编译器积极地检测模板中的静态节点、子树甚至数据对象，并在生成的代码中将它们提升到渲染函数之外。这样可以避免在每次渲染时重新创建这些对象，从而大大提高内存使用率并减少垃圾回收的频率。</p><h4>2. 具体diff算法</h4><p><strong>Vue2的diff算法</strong>的详细步骤在<a href="https://zhangmingemma.github.io/#/post?file=2022-11-13-View%20Render">《Vue基础系列之视图渲染》</a>中有详细的介绍。大概可以分为4种情况：更新节点、新增节点、删除节点、移动节点位置。对比新老两个虚拟DOM，通过循环，每循环到一个新节点，，就去老节点列表里面找到和当前新节点相同的旧节点。如果在旧节点列表中找不到，说明当前节点是需要新增的节点，我们就需要进行创建节点并插入视图的操作；如果找到了，就做更新操作；如果找到的旧节点与新节点位置不同，则需要移动节点等。为了加快对比过程，有4种优化策略：</p><ul><li>老数组的开始与新数组的开始</li><li>老数组的结尾与新数组的结尾</li><li>老数组的开始与新数组的结尾</li><li>老数组的结尾与新数组的开始</li></ul><p><strong>Vue3的diff算法</strong>的整体概念是首先从左往右进行比对，如果是相同的就进行更新比对，如果不相同则停止比对，并且记录停止的下标。再从右往左进行比对，如果是相同的就进行更新比对，如果不相同也停止比对，也进行记录停止的下标。通过这样左右进行比对，最后就可以把真正复杂部分进行范围锁定了。左右比对完之后，如果新节点已经比对完了，老节点列表还存在节点未比对，则删除老节点列表上的未比对的节点，如果老节点已经比对完了，新节点列表还存在未比对的节点则进行创建。如果新节点未比对完，老节点也未比对完，则进行最后最复杂的处理。</p><ul><li>先把剩下的新节点处理成节点的 key 为 key, 节点下标为 value 的 Map；接着初始化一个长度为剩下未比对的新节点的长度的数组 newIndexToOldIndexMap，初始化每个数组的下标的默认值为 0。再循环剩下的旧节点，通过旧节点的 key 去刚刚创建的 Map 中查找，看看旧节点有没有在新节点中，如果旧节点没有 key 则需要通过循环剩下的新节点进行查找。如果旧节点在新节点中没找到，则说明该旧节点需要进行删除。如果找到了，则把找到的新节点的下标对应存储到上述的数组 newIndexToOldIndexMap 中，然后更新比对匹配到的新老节点。</li><li>把所有的旧节点比对完成后，就会得到一个刚刚收集的新节点的下标数组，然后对这个新节点的下标数组进行进行<strong>最长递增子序列</strong>查找得到一个最长递增子序列的下标数据。然后再进行循环左右对比完之后剩余新节点的下标，然后判断循环的下标是否被上述的数组newIndexToOldIndexMap 进行收集了，如果没被收集到则说明这个新节点需要进行创建，如果已经被收集了则判断该循环的下标是否在上面计算得到的最长递增子序列中，如果不在则需要对该循环节点进行移动操作。</li></ul><p>因此Vue3相比Vue2的<code>diff</code>算法效率更高，速度更快</p><h4>3. typescript的支持</h4><p>vue3提出<code>Composition API</code>不需要通过指定一长串选项来定义组件，允许用户像编写函数一样自由地表达、组合和重用有状态的组件逻辑，同时提供出色的<code>ts</code>支持</p><h4>4. 编译包的大小</h4><p>vue2官方说的运行时打包师23k，但这只是没安装依赖的时候，随着依赖包和框架特性的增多，有时候不必要的，未使用的代码文件都被打包了进去，所以后期项目大了，打包文件会特别多还很大。在Vue 3中，我们通过将大多数全局API和内部帮助程序移动到Javascript的module.exports属性上实现这一点。这允许现代模式下的module bundler能够静态地分析模块依赖关系，并删除与未使用的module.exports属性相关的代码。模板编译器还生成了对<code>tree shaking</code>友好的代码，只有在模板中实际使用某个特性时，该代码才导入该特性的帮助程序。尽管增加了许多新特性，但Vue 3被压缩后的基线大小约为10 KB，不到Vue 2的一半。</p><h4>5. 响应式</h4><p>Vue3定义响应式变量需要了解几个关键词，<code>ref</code>、<code>reactive</code>、<code>toRefs</code>、<code>toRef</code>。</p><ul><li><code>ref</code>：当做简单的响应式变量</li><li><code>toRef</code>：把不是响应的对象转化为响应式</li><li><code>toRefs</code>：把响应式的<code>reactive</code>对象，分解成无数的响应式<code>Ref</code></li></ul>',26);function l(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n])}const a={};a.render=l;s["default"]=a},ea27:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["f"])("<p>Generator是一个状态机，封装了多个内部状态，执行<code>Generator</code>函数会返回一个遍历器对象，返回的遍历器对象可以依次遍历<code>Generator</code>函数内部的每一个状态。<code>Genrator</code>函数有两个特征：</p><ul><li>函数体内部使用<code>yield</code>表达式，定义不同的内部状态</li><li><code>function</code>关键字和函数名之间有一个星号</li></ul>",2),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("* "),Object(t["h"])("span",{class:"hljs-title"},"helloWorldGenerator"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'hello'"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'1'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'world'"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'2'"),Object(t["g"])(")\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'ending'"),Object(t["g"])(";\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" hw = helloWorldGenerator()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(hw.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// {value:hello, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(hw.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// 1 {value:world, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(hw.next()) "),Object(t["h"])("span",{class:"hljs-comment"},"// 2 {value:end, done:true}"),Object(t["g"])("\n")])],-1),a=Object(t["f"])('<p>像上面的例子，<code>Generator</code>函数的调用方法与普通函数一样，可以在函数名后面加一对圆括号。不同的是，调用<code>helloWorldGenerator</code>之后，该函数并不执行，返回的也不是函数的执行结果，而是一个指向内部状态的指针对象，也就是我们在之前的<a href="https://zhangmingemma.github.io/#/post?file=2022-10-20-Iterator" target="_blank">《ES6系列之Iterator》</a>文章中介绍的遍历器。下一步必须要调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态，也就是调用<code>next</code>方法，内部指针就从函数头部或者上一次停下来的地方开始执行，直到遇到下一个<code>yield</code>表达式/<code>return</code>表达式。</p><h3>1. Generator与Iterator</h3><p>我们在之前的<a href="https://zhangmingemma.github.io/#/post?file=2022-10-20-Iterator" target="_blank">《ES6系列之Iterator》</a>文章中说过任意一个对象的<code>System.iterator</code>方法，等于该对象的遍历器生成函数，调用该函数会返回对象的一个遍历器对象。<code>Genrator</code>函数就是遍历器生成函数，因此可以把<code>Generator</code>赋值给对象的<code>Symbol.iterator</code>属性，从而使得该对象具有<code>Iterator</code>接口。</p>',3),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" myIterable = {}\nmyIterable["),Object(t["h"])("span",{class:"hljs-built_in"},"Symbol"),Object(t["g"])(".iterator] = "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("* ("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"1"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"2"),Object(t["g"])(";\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-number"},"3"),Object(t["g"])(";\n}\n[...myIterable] "),Object(t["h"])("span",{class:"hljs-comment"},"// 1, 2, 3"),Object(t["g"])("\n")])],-1),b=Object(t["h"])("h3",null,"2. next",-1),h=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"yield"),Object(t["g"])("表达式本身没有返回值，或者说总是返回"),Object(t["h"])("code",null,"undefined"),Object(t["g"])("，"),Object(t["h"])("code",null,"next"),Object(t["g"])("方法可以带一个参数，该参数就会被当做上一个"),Object(t["h"])("code",null,"yield"),Object(t["g"])("的返回值")],-1),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("* "),Object(t["h"])("span",{class:"hljs-title"},"f"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"for"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" i = "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("; "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])("; i++) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" reset = "),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])(" i\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'reset'"),Object(t["g"])(", reset)\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"if"),Object(t["g"])(" (reset) i = "),Object(t["h"])("span",{class:"hljs-number"},"-1"),Object(t["g"])("\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" g = f()\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(g.next()) \n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(g.next())\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(g.next("),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")) \n"),Object(t["h"])("span",{class:"hljs-comment"},"// {value:0, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// reset undefined"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// {value:1, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// reset true"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// {value:0, done:false}"),Object(t["g"])("\n")])],-1),O=Object(t["f"])("<p>上面的例子中定义了一个会无限循环的<code>Generator</code>函数<code>f</code>，如果<code>next</code>方法没有参数，每次运行到<code>yield</code>，变量<code>reset</code>的值总是<code>undefined</code>，当<code>next</code>带一个参数<code>true</code>时，将上一次<code>yield</code>表达式，也就是变量<code>reset</code>的值设为<code>true</code>，那么<code>i=-1</code>，执行<code>i++</code>之后，下一次就是返回<code>0</code>了。</p>",1),r=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("* "),Object(t["h"])("span",{class:"hljs-title"},"dataConsumer"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"}),Object(t["g"])(") ")]),Object(t["g"])("{\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'Started'"),Object(t["g"])(");\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`1. "),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])("}")]),Object(t["g"])("`")]),Object(t["g"])(");\n  "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},[Object(t["g"])("`2. "),Object(t["h"])("span",{class:"hljs-subst"},[Object(t["g"])("${"),Object(t["h"])("span",{class:"hljs-keyword"},"yield"),Object(t["g"])("}")]),Object(t["g"])("`")]),Object(t["g"])(");\n  "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'result'"),Object(t["g"])(";\n}\n\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" genObj = dataConsumer();\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(genObj.next())\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(genObj.next("),Object(t["h"])("span",{class:"hljs-string"},"'a'"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log(genObj.next("),Object(t["h"])("span",{class:"hljs-string"},"'b'"),Object(t["g"])("))\n"),Object(t["h"])("span",{class:"hljs-comment"},"// Started"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// {value:undefined, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 1. a"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// {value:undefined, done:false}"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 2. b"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// {value:result, done:true}"),Object(t["g"])("\n")])],-1);function g(e,s){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r])}const p={};p.render=g;s["default"]=p},ef34:function(e,s,c){"use strict";c.r(s);var t=c("f23d"),n=c("9460");for(var l in n)["default"].indexOf(l)<0&&function(e){c.d(s,e,(function(){return n[e]}))}(l);n["default"].render=t["a"],s["default"]=n["default"]},f23d:function(e,s,c){"use strict";c.d(s,"a",(function(){return N}));var t=c("7a23"),n=Object(t["f"])("<p>事件发生时会在元素节点与根节点之间按照特定的顺序传播，路径所经过的所有节点都会收到该事件，这个传播过程就是<strong>DOM事件流</strong></p><h3>1. 事件流</h3><p><strong>事件流是事件在目标元素和顶层元素间的触发顺序</strong>，事件流包含两种方式：</p><ul><li><strong>事件捕获</strong>：事件由最顶层逐级向下传播，直至到达目标元素</li><li><strong>事件冒泡</strong>：事件由第一个被触发的元素接收，然后逐级向上传播</li></ul><p>W3C采用的是折中的方式，规定先捕获再冒泡，一个事件就此分为了三个阶段：</p><ul><li><strong>捕获阶段</strong>：事件从最顶层元素<code>window</code>一直传递到目标元素的父元素</li><li><strong>目标阶段</strong>：事件到达目标元素，如果事件指定不冒泡，那就会在这里终止</li><li><strong>冒泡阶段</strong>：事件从目标元素父元素向上逐级传递直到最顶层window</li></ul><p>那事件是不是在路径上每个元素都会触发两次，<code>DOM</code>的<code>addEventListener()</code>中第三个参数就决定了事件是在捕获阶段生效，还是在冒泡阶段生效。</p>",7),l=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("element.addEventListener(event, "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-title"},"useCapture"),Object(t["g"])(")\n")])])],-1),a=Object(t["f"])("<ul><li><strong>event</strong>：必须，字符串，指定事件名</li><li><strong>function</strong>：必须，指定事件触发时的执行函数</li><li><strong>useCapture</strong>：可选，布尔值，指定事件是否在捕获或冒泡阶段执行，true在捕获阶段执行，false是在冒泡阶段执行，也是默认值</li></ul><h3>2. 事件冒泡与事件捕获</h3><p>下面的例子中有三层嵌套的节点，分别是<code>container</code>、<code>container1</code>、<code>container11</code></p>",3),j=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-html"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"c"'),Object(t["g"])(">")]),Object(t["g"])("\n    container\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"c1"'),Object(t["g"])(">")]),Object(t["g"])("\n        container1\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"c11"'),Object(t["g"])(">")]),Object(t["g"])("11"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"script"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"javascript"},[Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" container = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'c'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" c1 = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'c1'"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" c11 = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},"'c11'"),Object(t["g"])(")\n\ncontainer.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c1被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c11被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"script"),Object(t["g"])(">")]),Object(t["g"])("\n")])],-1),b=Object(t["f"])('<div style="display:flex;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-26/1.png" style="display:inline-block;margin-bottom:16px;width:80%;"></div><p>当三层节点的<code>useCapture</code>参数都为<code>false</code>，点击<code>c11</code>，三个节点的事件都在冒泡阶段触发，因此事件捕获阶段从<code>c</code>直到<code>c11</code>，到<code>c11</code>触发事件，再冒泡至<code>c</code>，逐次执行，则最终的输出是</p>',2),h=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},"c11被点击\nc1被点击\ncontainer被点击\n")],-1),o=Object(t["h"])("p",null,[Object(t["g"])("当只有"),Object(t["h"])("code",null,"c11"),Object(t["g"])("的"),Object(t["h"])("code",null,"useCapture"),Object(t["g"])("参数都为"),Object(t["h"])("code",null,"true"),Object(t["g"])("，最终的输出与上述一致")],-1),O=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("container.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c1被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c11被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c11被点击"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c1被点击"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// container被点击"),Object(t["g"])("\n")])],-1),r=Object(t["h"])("p",null,[Object(t["g"])("当只有"),Object(t["h"])("code",null,"c1"),Object(t["g"])("的"),Object(t["h"])("code",null,"useCapture"),Object(t["g"])("参数都为"),Object(t["h"])("code",null,"true"),Object(t["g"])("，最终的输出与为")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("container.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c1被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c11被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c1被点击"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c11被点击"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// container被点击"),Object(t["g"])("\n")])],-1),p=Object(t["h"])("p",null,[Object(t["g"])("当只有"),Object(t["h"])("code",null,"c"),Object(t["g"])("的"),Object(t["h"])("code",null,"useCapture"),Object(t["g"])("参数都为"),Object(t["h"])("code",null,"true"),Object(t["g"])("，最终的输出与为")],-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("container.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c1被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c11被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// container被点击"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c1被点击"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c11被点击"),Object(t["g"])("\n")])],-1),d=Object(t["f"])("<h3>3. 阻止事件</h3><p><strong>阻止冒泡</strong>，阻止冒泡的原因是因为点击当前元素时以冒泡的方式传递事件，如果上级元素绑定了同样的事件，就会因为冒泡传递导致触发。<strong>阻止冒泡的方法</strong>是<code>event.stopPropagation()</code>和<code>event.stopImmediatePropagation()</code>。下面的例子中，<code>c11</code>阻止冒泡，因此最后只触发了<code>c11</code>绑定的事件。</p>",2),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("container.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'container被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c1被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c11被点击'"),Object(t["g"])(")\n    e.stopImmediatePropagation()\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c11被点击"),Object(t["g"])("\n")])],-1),m=Object(t["f"])("<p><strong>阻止捕获</strong>，阻止捕获的原因也是因为点击当前元素时在捕获阶段触发事件，可能会穿透导致上级或者子级绑定相同事件的元素同时触发。<strong>阻止捕获的方法</strong>是<code>event.stopPropagation()</code>和<code>event.stopImmediatePropagation()</code>且<code>addEventListener</code>的<code>useCapture</code>参数都为<code>true</code>。下面的例子中<code>c1</code>阻止了捕获，因此只触发<code>c1</code>绑定的事件。</p>",1),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("container.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'container被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c1被点击'"),Object(t["g"])(")\n    e.stopImmediatePropagation()\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-function"},[Object(t["h"])("span",{class:"hljs-keyword"},"function"),Object(t["g"])("("),Object(t["h"])("span",{class:"hljs-params"},"e"),Object(t["g"])(") ")]),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'c11被点击'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// c1被点击"),Object(t["g"])("\n")])],-1),f=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"stopImmediatePropagation和stopPropagation的区别")],-1),w=Object(t["h"])("ul",null,[Object(t["h"])("li",null,"共同点是都可以阻止事件冒泡，父节点无法接收到事件"),Object(t["h"])("li",null,[Object(t["g"])("不同点是"),Object(t["h"])("code",null,"stopPropagation"),Object(t["g"])("可以阻止事件冒泡，但不会影响事件的其他监听方法执行，"),Object(t["h"])("code",null,"stopImmediatePropagation"),Object(t["g"])("不仅阻止事件冒泡，还会阻止该监听函数之后注册的监听函数")])],-1),k=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("container.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'捕获: container'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\ncontainer.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'冒泡: container'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'捕获: c1'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\n\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'冒泡: c1'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'捕获: c11'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"true"),Object(t["g"])(")\n\nc11.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'冒泡: c11'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 点击节点c11执行顺序是："),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：container"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：c1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：c11"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：c11"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：c1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：container"),Object(t["g"])("\n")])],-1),v=Object(t["h"])("p",null,[Object(t["g"])("如果我们在"),Object(t["h"])("code",null,"c1"),Object(t["g"])("阻止冒泡")],-1),x=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("c1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    e.stopPropagation()\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'冒泡: c1'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'冒泡：c1，第二个绑定的事件'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 点击节点c11执行顺序是："),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：container"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：c1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：c11"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：c11"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：c1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：c1，第二个绑定的事件"),Object(t["g"])("\n")])],-1),S=Object(t["h"])("p",null,[Object(t["g"])("如果我们用"),Object(t["h"])("code",null,"stopImmediatePropagation"),Object(t["g"])("，则")],-1),P=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("c1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    e.stopImmediatePropagation()\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'冒泡: c1'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\nc1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},"'click'"),Object(t["g"])(", (e) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'冒泡：c1，第二个绑定的事件'"),Object(t["g"])(")\n}, "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(")\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 点击节点c11执行顺序是："),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：container"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：c1"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 捕获：c11"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：c11"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 冒泡：c1"),Object(t["g"])("\n")])],-1),_=Object(t["h"])("h3",null,"4. 事件委托",-1),C=Object(t["h"])("p",null,[Object(t["h"])("strong",null,"事件委托就是利用事件冒泡，可以只使用一个事件处理程序来管理一种类型的事件"),Object(t["g"])("，例如说")],-1),T=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["g"])("<ul id="),Object(t["h"])("span",{class:"hljs-string"},'"myLinks"'),Object(t["g"])(">\n    "),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"goSomewhere"'),Object(t["g"])(">")]),Object(t["g"])("Go somewhere"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")])]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"doSomething"'),Object(t["g"])(">")]),Object(t["g"])("Do something"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")])]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"id"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"sayHi"'),Object(t["g"])(">")]),Object(t["g"])("Say hi"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"li"),Object(t["g"])(">")])]),Object(t["g"])("\n<"),Object(t["h"])("span",{class:"hljs-regexp"},"/ul>\n")])],-1),I=Object(t["h"])("p",null,"上面的列表中如果要监听三个元素，并执行事件",-1),E=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" item1 = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},'"goSomewhere"'),Object(t["g"])(");\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" item2 = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},'"doSomething"'),Object(t["g"])(");\n"),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" item3 = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},'"sayHi"'),Object(t["g"])(");\nitem1.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},'"click"'),Object(t["g"])(", (event) => {\n    location.href = "),Object(t["h"])("span",{class:"hljs-string"},'"http://www.wrox.com "'),Object(t["g"])(";\n});\nitem2.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},'"click "'),Object(t["g"])(", (event) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".title = "),Object(t["h"])("span",{class:"hljs-string"},'"I changed the document \'s title"'),Object(t["g"])(";\n});\nitem3.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},'"click"'),Object(t["g"])(", (event) => {\n    "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},'"hi"'),Object(t["g"])(");\n});\n\n")])],-1),A=Object(t["h"])("p",null,[Object(t["g"])("但会有大量的雷同，去指定事件处理程序的代码，"),Object(t["h"])("strong",null,"使用事件委托，只要给所有元素共同的祖先节点添加一个事件处理程序，就可以解决问题。")],-1),D=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" list = "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".getElementById("),Object(t["h"])("span",{class:"hljs-string"},'"myLinks"'),Object(t["g"])(");\nlist.addEventListener("),Object(t["h"])("span",{class:"hljs-string"},'"click"'),Object(t["g"])(", (event) => {\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"let"),Object(t["g"])(" target = event.target;\n    "),Object(t["h"])("span",{class:"hljs-keyword"},"switch"),Object(t["g"])(" (target.id) {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"case"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},'"doSomething"'),Object(t["g"])(":\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"document"),Object(t["g"])(".title = "),Object(t["h"])("span",{class:"hljs-string"},'"I changed the document\'s title"'),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"break"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"case"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},'"goSomewhere"'),Object(t["g"])(":\n            location.href = "),Object(t["h"])("span",{class:"hljs-string"},'"http:// www.wrox.com"'),Object(t["g"])(";\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"break"),Object(t["g"])(";\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"case"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},'"sayHi"'),Object(t["g"])(":\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},'"hi"'),Object(t["g"])(");\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"break"),Object(t["g"])(";\n    }\n});\n")])],-1),M=Object(t["f"])("<p><strong>事件委托的优势</strong>是：</p><ul><li><code>document</code>对象随时可用，任何时候都可以给它添加事件处理程序，这意味着只要页面渲染出可点击的元素，就可以无延迟起作用</li><li>节省花在设置页面事件处理程序上的事件，只指定一个事件处理程序既可以节省DOM引用，也可以节省事件</li><li>减少整个页面所需的内存，提升整体性能</li></ul><p><strong>e.target和e.currentTarget</strong></p><ul><li><code>e.target</code> 指向的是触发事件监听的对象（事件源）</li><li><code>e.currentTarget</code> 指向添加监听事件的对象（绑定事件的dom元素）</li></ul>",4);function N(e,s,c,N,F,R){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x,S,P,_,C,T,I,E,A,D,M])}},f891:function(e,s,c){"use strict";c.r(s);var t=c("7a23"),n=Object(t["h"])("p",null,"Vue的组件通信通常包含以下三类：父子组件通信、隔代组件通信和兄弟组件通信。",-1),l=Object(t["h"])("h3",null,"一. 父子组件通信",-1),a=Object(t["h"])("h4",null,"1. props和$emit",-1),j=Object(t["h"])("p",null,[Object(t["g"])("父组件向子组件传递数据是通过"),Object(t["h"])("code",null,"props"),Object(t["g"])("传递的，子组件传递数据给父组件是通过"),Object(t["h"])("code",null,"$emit"),Object(t["g"])("来触发事件做到的")],-1),b=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 父组件"),Object(t["g"])("\n<heading :title="),Object(t["h"])("span",{class:"hljs-string"},'"title"'),Object(t["g"])(" @update="),Object(t["h"])("span",{class:"hljs-string"},'"updateTitle"'),Object(t["g"])("><"),Object(t["h"])("span",{class:"hljs-regexp"},"/heading>\nexport default {\n    components: { heading },\n    data() {\n        return {\n            title: '标签'\n        }\n    },\n    methods: {\n        updateTitle(data) {\n            this.title = data\n        }\n    }\n}\n/"),Object(t["h"])("span",{class:"hljs-regexp"},"/ 子组件\nexport default {\n    props: ['title'],\n    methods: {\n        emitData() {\n            this.$emit('update', '新标签')\n        }\n    }\n}\n")])],-1),h=Object(t["f"])("<h4>2. $parent和$children</h4><p>可以通过<code>$parent</code>和<code>$children</code>访问父组件和子组件。但需要注意的是<strong>Vue3.0已经移除了<code>$children</code>这个特性</strong>，不过即使是<code>Vue2.0</code>也建议通过 <code>$children</code> 的方式来获取子组件，<strong>因为$children不保证执行顺序，也不是响应式的</strong></p>",2),o=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 父组件"),Object(t["g"])("\n<children><"),Object(t["h"])("span",{class:"hljs-regexp"},"/children>\nexport default {\n    components: { children },\n    data() {\n        return {\n            parentKey: 'value'\n        }\n    },\n    mounted() {\n        this.$children[0].childrenSay('yes')\n    },\n    methods: {\n        parentSay(value) {\n            console.log('parent say', value)\n        },\n        saySelf() {\n            console.log('parent say self', this.parentKey)\n        }\n    }\n}\n/"),Object(t["h"])("span",{class:"hljs-regexp"},"/ 子组件\nexport default {\n    mounted() {\n        this.$parent.parentSay('no')\n        this.$parent.parentKey = 'children parent'\n        this.$parent.saySelf()\n    },\n    methods: {\n        childrenSay(value) {\n            console.log('children say', value)\n        }\n    }\n}\n")])],-1),O=Object(t["h"])("h4",null,"3. $refs",-1),r=Object(t["h"])("p",null,[Object(t["g"])("如果在普通"),Object(t["h"])("code",null,"DOM"),Object(t["g"])("元素上使用，引用指向的就是"),Object(t["h"])("code",null,"DOM"),Object(t["g"])("元素，如果用在子组件上，引用就是指向组件实例")],-1),g=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 父组件"),Object(t["g"])("\n<children ref="),Object(t["h"])("span",{class:"hljs-string"},'"childrenRef"'),Object(t["g"])("><"),Object(t["h"])("span",{class:"hljs-regexp"},"/children>\nexport default {\n    mounted() {\n        this.$refs.childrenRef.childrenSay('yes')\n    }\n}\n/"),Object(t["h"])("span",{class:"hljs-regexp"},"/ 子组件\nexport default {\n    methods: {\n        childrenSay(value) {\n            console.log('children say', value)\n        }\n    }\n}\n")])],-1),p=Object(t["h"])("h4",null,"4. 生命周期监听",-1),i=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 父组件"),Object(t["g"])("\n<children @hook:mounted="),Object(t["h"])("span",{class:"hljs-string"},'"doSomething"'),Object(t["g"])("><"),Object(t["h"])("span",{class:"hljs-regexp"},"/children>\nexport default {\n    methods: {\n        doSomething() {\n            console.log('父组件监听到子组件的mounted')\n        }\n    }\n}\n/"),Object(t["h"])("span",{class:"hljs-regexp"},"/ 子组件\nexport default {\n    mounted() {\n        console.log('子组件触发mounted')\n    }\n}\n/"),Object(t["h"])("span",{class:"hljs-regexp"},"/ 输出\n/"),Object(t["h"])("span",{class:"hljs-regexp"},"/ 子组件触发mounted\n/"),Object(t["h"])("span",{class:"hljs-regexp"},"/ 父组件监听到子组件的mounted\n")])],-1),d=Object(t["f"])("<h3>二. 隔代组件通信</h3><h4>1. $attrs和$listeners</h4><p>可以通过<code>this.$attrs</code>访问父作用域传递给组件的属性，<code>this.$listeners</code>访问负作用域传递给组件的事件监听器。具体的特征包含：</p><ul><li><strong>this.$attrs</strong>：访问组件传递给子组件的属性，但这些属性中不包含<code>props</code>中已经声明的属性，<code>props</code>声明的属性不再通过<code>attrs</code>传递。父组件通过<code>v-bind=&#39;$attrs&#39;</code> 传入内部组件，可以将属性绑定继续向下传递。如果中间层组件想要添加其他属性，可以继续绑定属性，但如果与$attr重复，则继续绑定的属性优先</li><li><strong>this.$listeners</strong>：访问父作用域传递给组件的事件监听器。也可以通过<code>v-on=&quot;$listeners&quot;</code>传入内部组件，将事件监听器继续向下传递。如果想要添加其他事件监听器，可以继续绑定事件，同样的，如果有重读，不会被覆盖，重复绑定的事件都会被执行。</li></ul>",4),u=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// test1"),Object(t["g"])("\n<template>\n    "),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("我是test1组件"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"test2"),Object(t["g"])(" \n            "),Object(t["h"])("span",{class:"hljs-attr"},":foo"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"foo"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":boo"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"boo"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":coo"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"coo"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":doo"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"doo"'),Object(t["g"])(" \n            "),Object(t["h"])("span",{class:"hljs-attr"},"@log1"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"log1"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@log2"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"log2"'),Object(t["g"])("\n        >")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"test2"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")])]),Object(t["g"])("\n<"),Object(t["h"])("span",{class:"hljs-regexp"},"/template>\n<script>\nexport default{\n    components: { test2 },\n    data() {\n        return {\n            foo: 'foo',\n            boo: 'boo',\n            coo: 'coo',\n            doo: 'doo'\n        }\n    },\n    methods: {\n        log1(val) {\n            console.log('我是test1中的log1方法', val)\n        },\n        log2(val) {\n            console.log('我是test1的log2方法', val)\n        }\n    }\n}\n</"),Object(t["g"])("script>\n"),Object(t["h"])("span",{class:"hljs-comment"},"// test2"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("我是test2组件"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"button"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@click"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"toParent1()"'),Object(t["g"])(">")]),Object(t["g"])("触发log1方法"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"button"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"test3"),Object(t["g"])(" \n            "),Object(t["h"])("span",{class:"hljs-attr"},"v-bind"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"$attrs"'),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},":coo"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"coo"'),Object(t["g"])("\n            "),Object(t["h"])("span",{class:"hljs-attr"},"v-on"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"$listeners"'),Object(t["g"])("\n        >")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"test3"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(">")])]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"script"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"javascript"},[Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"components"),Object(t["g"])(": { test3 },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"inheritAttrs"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-literal"},"false"),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-comment"},"// 关闭自动挂在在组件根元素上的没有在props声明的属性"),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-attr"},"props"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'foo'"),Object(t["g"])("],\n    data() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-attr"},"coo"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'test2的coo'"),Object(t["g"])("\n        }\n    },\n    created() {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},'"test2组件this.$attrs:"'),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$attrs); "),Object(t["h"])("span",{class:"hljs-comment"},"// {boo:'boo', coo:'coo', doo:'doo'}"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},'"test2组件this.$props:"'),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$props); "),Object(t["h"])("span",{class:"hljs-comment"},"// {foo:'foo'}"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"methods"),Object(t["g"])(": {\n        toParent1(val) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$listeners.log1("),Object(t["h"])("span",{class:"hljs-string"},'"test2组件 $listeners执行 log1方法"'),Object(t["g"])(");\n        }\n    }\n}\n")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"script"),Object(t["g"])(">")])]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-comment"},"//test3"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("我是test3组件"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"h1"),Object(t["g"])(">")]),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"button"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-attr"},"@click"),Object(t["g"])("="),Object(t["h"])("span",{class:"hljs-string"},'"toParent1()"'),Object(t["g"])(">")]),Object(t["g"])("触发log1方法"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"button"),Object(t["g"])(">")]),Object(t["g"])("\n    "),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"div"),Object(t["g"])(">")]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"template"),Object(t["g"])(">")])]),Object(t["g"])("\n"),Object(t["h"])("span",{class:"xml"},[Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("<"),Object(t["h"])("span",{class:"hljs-name"},"script"),Object(t["g"])(">")]),Object(t["h"])("span",{class:"javascript"},[Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])("{\n    "),Object(t["h"])("span",{class:"hljs-attr"},"props"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'boo'"),Object(t["g"])("],\n    created() {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},'"test2组件this.$attrs:"'),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$attrs); "),Object(t["h"])("span",{class:"hljs-comment"},"// {coo:'test2的coo', doo:'doo'}"),Object(t["g"])("\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},'"test2组件this.$props:"'),Object(t["g"])(", "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$props); "),Object(t["h"])("span",{class:"hljs-comment"},"// {boo:'boo'}"),Object(t["g"])("\n    },\n    "),Object(t["h"])("span",{class:"hljs-attr"},"methods"),Object(t["g"])(": {\n        toParent1(val) {\n            "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".$listeners.log1("),Object(t["h"])("span",{class:"hljs-string"},'"test3组件 $listeners执行 log1方法"'),Object(t["g"])(");\n        }\n    }\n}\n")]),Object(t["h"])("span",{class:"hljs-tag"},[Object(t["g"])("</"),Object(t["h"])("span",{class:"hljs-name"},"script"),Object(t["g"])(">")])]),Object(t["g"])("\n")])],-1),m=Object(t["f"])("<h4>2. provide和inject依赖注入</h4><p>这对选项要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次多深，在其上下游关系成立的时间里始终生效，<code>provide</code>和<code>inject</code>是两个钩子，和<code>data</code>、<code>methods</code>是同级的，<code>provide</code>用来发送数据或方法，<code>inject</code>用来接收数据和方法。<strong>provide和inject的绑定并不是可响应的，如果传入了一个可监听的对象，其对象的property还是可响应的</strong></p>",2),y=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// 父组件"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" Provider = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"provide"),Object(t["g"])(": {\n        "),Object(t["h"])("span",{class:"hljs-attr"},"foo"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-string"},"'bar'"),Object(t["g"])("\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 子组件"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"var"),Object(t["g"])(" Child = {\n    "),Object(t["h"])("span",{class:"hljs-attr"},"inject"),Object(t["g"])(": ["),Object(t["h"])("span",{class:"hljs-string"},"'foo'"),Object(t["g"])("],\n    created() {\n        "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".foo) "),Object(t["h"])("span",{class:"hljs-comment"},"// bar"),Object(t["g"])("\n    }\n}\n")])],-1),f=Object(t["h"])("h3",null,"三. 任何组件通信",-1),w=Object(t["h"])("h4",null,"1. eventBus",-1),k=Object(t["h"])("p",null,[Object(t["g"])("这个方法就是通过一个空的"),Object(t["h"])("code",null,"Vue"),Object(t["g"])("实例作为中央事件总线，用它来触发事件和监听事件，从而实现任何组件之间的通信，包括父子、隔代、兄弟组件。")],-1),v=Object(t["h"])("pre",null,[Object(t["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(t["h"])("span",{class:"hljs-comment"},"// eventBus.js"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"import"),Object(t["g"])(" Vue "),Object(t["h"])("span",{class:"hljs-keyword"},"from"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-string"},"'vue'"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"const"),Object(t["g"])(" eventBus = "),Object(t["h"])("span",{class:"hljs-keyword"},"new"),Object(t["g"])(" Vue()\n"),Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(" eventBus\n"),Object(t["h"])("span",{class:"hljs-comment"},"// 父组件"),Object(t["g"])("\n<first-comm><"),Object(t["h"])("span",{class:"hljs-regexp"},"/first-comm>\n<second-comm></"),Object(t["g"])("second-comm>\n"),Object(t["h"])("span",{class:"hljs-comment"},"// first-comm"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(" {\n    data() {\n        "),Object(t["h"])("span",{class:"hljs-keyword"},"return"),Object(t["g"])(" {\n            "),Object(t["h"])("span",{class:"hljs-attr"},"num"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-number"},"0"),Object(t["g"])("\n        }\n    },  \n    "),Object(t["h"])("span",{class:"hljs-attr"},"methods"),Object(t["g"])(": {\n        add() {\n            eventBus.$emit("),Object(t["h"])("span",{class:"hljs-string"},"'addition'"),Object(t["g"])(", {\n                "),Object(t["h"])("span",{class:"hljs-attr"},"num"),Object(t["g"])(": "),Object(t["h"])("span",{class:"hljs-keyword"},"this"),Object(t["g"])(".num++\n            })\n        }\n    }\n}\n"),Object(t["h"])("span",{class:"hljs-comment"},"// second-comm"),Object(t["g"])("\n"),Object(t["h"])("span",{class:"hljs-keyword"},"export"),Object(t["g"])(),Object(t["h"])("span",{class:"hljs-keyword"},"default"),Object(t["g"])(" {\n    created() {\n        eventBus.$on("),Object(t["h"])("span",{class:"hljs-string"},"'addition'"),Object(t["g"])(", params => {\n            "),Object(t["h"])("span",{class:"hljs-built_in"},"console"),Object(t["g"])(".log("),Object(t["h"])("span",{class:"hljs-string"},"'children'"),Object(t["g"])(", params)\n        })\n    }\n}\n")])],-1),x=Object(t["f"])("<h4>2. Vuex</h4><p>Vuex是一个专为<code>Vue.js</code>应用程序开发的状态管理模式，每一个<code>Vuex</code>的核心就是<code>store</code>，<code>store</code>基本上就是一个容器，包含着应用中大多数公共的状态，状态的存储就是响应的，所有引入<code>vuex</code>的组件都可以拿到最新的数据，唯一改变公共数据的方式就是调用<code>vuex</code>的<code>mutation</code>显式地提交修改。</p>",2);function S(e,s,c,S,P,_){return Object(t["q"])(),Object(t["d"])("section",null,[n,l,a,j,b,h,o,O,r,g,p,i,d,u,m,y,f,w,k,v,x])}const P={};P.render=S;s["default"]=P},f9bb:function(e,s){alert(1)}});
//# sourceMappingURL=app.b6db3103.js.map