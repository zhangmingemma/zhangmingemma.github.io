(function(t){function e(e){for(var c,a,j=e[0],b=e[1],h=e[2],g=0,i=[];g<j.length;g++)a=j[g],Object.prototype.hasOwnProperty.call(n,a)&&n[a]&&i.push(n[a][0]),n[a]=0;for(c in b)Object.prototype.hasOwnProperty.call(b,c)&&(t[c]=b[c]);O&&O(e);while(i.length)i.shift()();return l.push.apply(l,h||[]),s()}function s(){for(var t,e=0;e<l.length;e++){for(var s=l[e],c=!0,a=1;a<s.length;a++){var j=s[a];0!==n[j]&&(c=!1)}c&&(l.splice(e--,1),t=b(b.s=s[0]))}return t}var c={},a={app:0},n={app:0},l=[];function j(t){return b.p+"js/"+({}[t]||t)+"."+{"chunk-0180f20d":"02b60cdf","chunk-14436ac0":"e30d94bc","chunk-a7c54b84":"425d2af2"}[t]+".js"}function b(e){if(c[e])return c[e].exports;var s=c[e]={i:e,l:!1,exports:{}};return t[e].call(s.exports,s,s.exports,b),s.l=!0,s.exports}b.e=function(t){var e=[],s={"chunk-0180f20d":1,"chunk-14436ac0":1,"chunk-a7c54b84":1};a[t]?e.push(a[t]):0!==a[t]&&s[t]&&e.push(a[t]=new Promise((function(e,s){for(var c="css/"+({}[t]||t)+"."+{"chunk-0180f20d":"18481ac6","chunk-14436ac0":"a31b550a","chunk-a7c54b84":"1cd6b4ec"}[t]+".css",n=b.p+c,l=document.getElementsByTagName("link"),j=0;j<l.length;j++){var h=l[j],g=h.getAttribute("data-href")||h.getAttribute("href");if("stylesheet"===h.rel&&(g===c||g===n))return e()}var i=document.getElementsByTagName("style");for(j=0;j<i.length;j++){h=i[j],g=h.getAttribute("data-href");if(g===c||g===n)return e()}var O=document.createElement("link");O.rel="stylesheet",O.type="text/css",O.onload=e,O.onerror=function(e){var c=e&&e.target&&e.target.src||n,l=new Error("Loading CSS chunk "+t+" failed.\n("+c+")");l.code="CSS_CHUNK_LOAD_FAILED",l.request=c,delete a[t],O.parentNode.removeChild(O),s(l)},O.href=n;var r=document.getElementsByTagName("head")[0];r.appendChild(O)})).then((function(){a[t]=0})));var c=n[t];if(0!==c)if(c)e.push(c[2]);else{var l=new Promise((function(e,s){c=n[t]=[e,s]}));e.push(c[2]=l);var h,g=document.createElement("script");g.charset="utf-8",g.timeout=120,b.nc&&g.setAttribute("nonce",b.nc),g.src=j(t);var i=new Error;h=function(e){g.onerror=g.onload=null,clearTimeout(O);var s=n[t];if(0!==s){if(s){var c=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;i.message="Loading chunk "+t+" failed.\n("+c+": "+a+")",i.name="ChunkLoadError",i.type=c,i.request=a,s[1](i)}n[t]=void 0}};var O=setTimeout((function(){h({type:"timeout",target:g})}),12e4);g.onerror=g.onload=h,document.head.appendChild(g)}return Promise.all(e)},b.m=t,b.c=c,b.d=function(t,e,s){b.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},b.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},b.t=function(t,e){if(1&e&&(t=b(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(b.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var c in t)b.d(s,c,function(e){return t[e]}.bind(null,c));return s},b.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return b.d(e,"a",e),e},b.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},b.p="/dist/",b.oe=function(t){throw console.error(t),t};var h=window["webpackJsonp"]=window["webpackJsonp"]||[],g=h.push.bind(h);h.push=e,h=h.slice();for(var i=0;i<h.length;i++)e(h[i]);var O=g;l.push([0,"chunk-vendors"]),s()})({0:function(t,e,s){t.exports=s("cd49")},"0ed1":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["h"])("h2",null,"认识HTTP",-1),n=Object(c["h"])("p",null,"HTTP(Hypertext Transfer Protocol)，超文本传输协议，Web使用HTTP规范从客户端到服务端等一系列运转流程。HTTP协议定义了Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。",-1);function l(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n])}const j={};j.render=l;e["default"]=j},"0f04":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["h"])("p",null,"元素是CSS文档流的组成单元和基础，我们常见的元素包含有行内元素、块级元素和替换元素等，不同的元素具有不同的样式规则。",-1),n=Object(c["h"])("h3",null,"块级元素",-1),l=Object(c["h"])("p",null,"块级元素，顾名思义呈现块状，有自己的高度和宽度，可以自定义width、height，独自占据一行，之后的邻接节点只能另起一行排布，可以作为其他容器使用，容纳行内元素和块级元素，具体特点是：",-1),j=Object(c["h"])("ul",null,[Object(c["h"])("li",null,"独占一行"),Object(c["h"])("li",null,"高度、宽度、行高、内外边距、边框都可定义，不设置宽度时，宽度为父元素的宽度"),Object(c["h"])("li",null,"多个块级元素在同一容器内，自上而下排布")],-1),b=Object(c["h"])("p",null,"常见的块级元素标签包含有：",-1),h=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"address"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"p"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-comment"},"\x3c!--标题--\x3e"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"h1"),Object(c["g"])(">")]),Object(c["g"])("..."),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"h5"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-comment"},"\x3c!--列表--\x3e"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"ol"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-comment"},"\x3c!--表格--\x3e"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"th"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"tbody"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"tr"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"td"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"thead"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"form"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"table"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),g=Object(c["h"])("h3",null,"行内元素",-1),i=Object(c["h"])("p",null,"行内元素，顾名思义可以在同一行内展示，具体样式特点是：",-1),O=Object(c["h"])("ul",null,[Object(c["h"])("li",null,"不会独占一行，相邻的元素会展示在同一行内，直至放不下会换行，宽度随内容的变化而变化"),Object(c["h"])("li",null,"高宽无效，内外边距仅水平方向有效，垂直方向无效"),Object(c["h"])("li",null,"元素的宽度就是内容物的宽度，不可改变"),Object(c["h"])("li",null,"行内元素内不可再放置块级元素，a链接内不可再防止链接")],-1),r=Object(c["h"])("p",null,"常见的行内元素包含：",-1),p=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"b"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"em"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"strong"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"br"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"textarea"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"input"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"button"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"img"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),o=Object(c["f"])("<blockquote><p>其中<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>这样的元素，他们的展示并不是css控制的，而是根据元素的<code>type</code>、<code>src</code>等属性来控制，这种元素又被称为替换元素</p></blockquote><h3>行内块级元素</h3><p>行内元素和块级元素可以通过<code>display</code>来进行相互转换，<code>display:block</code>为块级元素，<code>display:inline</code>为行内元素，当<code>display:inline-block</code>时，为行内块级元素，此时</p><ul><li>不会独占一行，与相邻元素在同一行内，与相邻元素之间有空隙，可以通过设置<code>font-size:0</code>来消除</li><li>可以设置宽度、高度和内外边距</li><li>元素的宽度就是内容物的宽度</li></ul>",4);function d(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n,l,j,b,h,g,i,O,r,p,o])}const u={};u.render=d;e["default"]=u},"256c":function(t,e,s){"use strict";s("ce75")},2863:function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<h3>聚类算法介绍</h3><p>聚类是将数据对象的集合分成相似的对象类的过程。使得同一个簇（或类）中的对象之间具有较高的相似性，而不同簇中的对象具有较高的相异性。按照聚类的尺度，聚类方法可被分为以下三种：基于距离的聚类算法、基于密度的聚类方法、基于互连性的聚类算法。其中基于距离的聚类算法是用各式各样的距离来衡量数据对象之间的相似度。基于密度的聚类算法主要是依据合适的密度函数等。基于互连性的聚类算法通常基于图或超图模型，将高度连通的对象聚为一类。</p><p>本文介绍的是Alex Rodriguez和Alessandro Laio在Science上发表的<a href="http://science.sciencemag.org/content/344/6191/1492" target="_blank">《Clustering by fast search and find of density peaks》</a>所提出的一种新型的基于密度的聚类算法。</p><h3>算法思想</h3><p>该算法的假设类簇的中心由一些局部密度比较低的点围绕, 并且这些点距离其他有高局部密度的点的距离都比较大.首先定义两个值：局部密度ρi以及到高局部密度点的距离δi，这两个值仅仅取决于两点之间的距离dij，且该距离满足三角不等式<br><img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image1.png" alt></p><p>其中dc是一个截断距离, 是一个超参数.所以ρi相当于距离点i的距离小于dc的点的个数.由于该算法只对ρi的相对值敏感, 所以对dc的选择比较鲁棒, δi用于描述点i到其他较高密度点之间的最小距离：<br><img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image2.png" alt></p><p>对于密度最大的点, 设置δi=maxj(dij).只有那些密度是局部或者全局最大的点才会远大于正常的相邻点间距.因此聚类中心被视为是δi值异常最大的点。</p><h3>聚类过程</h3><p>那些有着比较大的局部密度ρi和很大的δi的点被认为是类簇的中心. 局部密度较小但是δi较大的点是异常点.在确定了类簇中心之后, 所有其他点属于距离其最近的类簇中心所代表的类簇.具体的聚类过程可以从图1中看到，A图标识二维空间内的28个点，可以看到1和10两个点的密度最大，因此1和10被定义为聚类中心。右图是以ρi和为横坐标, 以δi为纵坐标, 这种图称作决策图。其中9和10两个点ρi值相似，但δi值却差异很大，因此9被归为点1的类簇，而10被归为另一类簇。所以，只有较高δi值和相对较高ρi值的点才会被视为聚类中心。26, 27, 28三个点的δi也比较大, 但是ρi较小, 所以是异常点. <img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image3.png" alt></p><p>聚类中心确定之后，剩余点被分配给与其具有较高密度的最近邻居相同的类簇。与其他迭代优化的聚类算法不同，类簇分配在单个步骤中执行。在聚类分析中, 通常需要确定每个点划分给某个类簇的可靠性. 在该算法中, 可以首先为每个类簇定义一个边界区域(border region), 亦即划分给该类簇但是距离其他类簇的点的距离小于dc的点. 然后为每个类簇找到其边界区域的局部密度最大的点, 令其局部密度为 . 该类簇中所有局部密度大于 的点被认为是类簇核心的一部分(亦即将该点划分给该类簇的可靠性很大), 其余的点被认为是该类簇的光晕, 亦即可以认为是噪音 <img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image4.png" alt></p><p>图A表示点分布，其中包含非球形点集和双峰点集。B和C分别表示4000和1000个点按照A中模式的分布，其中点根据其被分配的不同类簇着色，黑色的点属于类簇光晕。D和E是对应的决策图，而F表示的是不同点量下不正确聚类点的比率，误差线代表平均值的标准差</p><h3>聚类结果</h3><p>图3是分别利用点集和Olivetti脸部图片集的聚类结果 <img src="https://zhangmingemma.github.io/dist/images/2016-11-20/image5.png" alt></p><h3>算法特点</h3><p>算法具有以下特点：</p><p>A． 该算法是一种基于密度的聚类算法，核心思想是认为类簇的中心由一些局部密度比较低的点围绕, 并且这些点距离其他有高局部密度的点的距离都比较大。</p><p>B． 该算法将非聚类中心点的聚类过程分离成一个单独的进程。使得聚类中心的选择和非聚类点的归类分离开来，增大了聚类精度。</p><p>C． 该算法适用于图片、非球形点集的聚类。</p>',18);function n(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a])}const l={};l.render=n;e["default"]=l},"2efe":function(t,e,s){"use strict";s("b0c0");var c=s("7a23"),a=Object(c["E"])("data-v-075ec1b1");Object(c["t"])("data-v-075ec1b1");var n={key:0},l={class:"abstract"},j={class:"footer"},b={class:"footer-tags"};Object(c["r"])();var h=a((function(t,e,s,a,h,g){return t.post?(Object(c["q"])(),Object(c["d"])("article",n,[Object(c["h"])("h1",{onClick:e[1]||(e[1]=function(e){return t.tapPost(t.post.name)})},Object(c["z"])(t.post.title),1),Object(c["h"])("div",l,Object(c["z"])(t.post.abstract),1),Object(c["h"])("a",{onClick:e[2]||(e[2]=function(e){return t.tapPost(t.post.name)})},"点我阅读更多..."),Object(c["h"])("div",j,[Object(c["h"])("div",b,[(Object(c["q"])(!0),Object(c["d"])(c["a"],null,Object(c["w"])(t.post.tags,(function(e){return Object(c["q"])(),Object(c["d"])("div",{class:"blog-tag",key:e,tag:e,onClick:function(s){return t.tapTag(e)}},Object(c["z"])(e),9,["tag","onClick"])})),128))]),Object(c["h"])("span",null,Object(c["z"])(t.post.date),1)])])):Object(c["e"])("",!0)})),g=s("a7bb"),i=s("6c02"),O=Object(c["i"])({props:["post"],setup:function(){var t=Object(i["d"])(),e=function(e){e&&(Object(g["f"])(),t.push("/post?file=".concat(e)))},s=function(e){e&&(Object(g["f"])(),t.push("/tag?tag=".concat(e)))};return{tapTag:s,tapPost:e}}});s("5765");O.render=h,O.__scopeId="data-v-075ec1b1";e["a"]=O},"32d2":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p><span style="color:blue;">|导语</span> 微信小程序生态日益完善，小程序提供的功能服务越来越多，类目覆盖面越来越广，服务共享成为小程序生态中必不可少的一环。小程序自 1.9.6 基础库版本开始支持插件支持服务功能的封装和共享，在小程序官方文档中，给出了插件的具体定义：</p><blockquote><p>插件是一组对js接口、自定义组件或页面的封装，用于嵌入到小程序中使用。</p></blockquote><p>对于开发者，插件调用方在使用插件时，无法看到插件的代码，插件能够用来封装功能或服务，提供给第三方小程序进行展示或者使用，扩大服务使用场景和受众范围。对于使用者，无需特殊申请类目资质，或搭建全套服务架构，就能够通过插件调用开发者所提供的服务丰富自身能力，例如接入好物推荐，在线客服，名片分享，接入WIFI等插件服务。那么开发者又该如何着手插件的开发，开发中又有什么地方需要特别关注呢？</p><h3>一. 插件的开发</h3><h4>1. 插件的开发</h4><p>开发者开发插件前需要在已经注册号的小程序管理后台开通插件功能，填写插件基本信息、插件开发信息后，在开发者工具“开发类型”中选择“插件”即可创建插件项目<a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6" target="_blank">[插件开通及创建项目指引]</a>，新建后的插件项目将包含三个目录，以好物圈提供的“好物推荐”插件为例，创建的插件项目包含的目录及主要内容如下图所示：</p><p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image1.png" alt="好物推荐插件 (2)"></p><p>可以看到插件项目包含<code>doc</code>、<code>miniProgram</code>、<code>plugin</code>三个目录：</p><ul><li><p><code>doc</code>目录：插件开发文档</p><ul><li>插件文档必须放置在插件项目根目录中的 <code>doc</code> 目录下，入口文件是 <code>doc/README.md</code></li><li>插件开发文档需要详细列明插件使用者需知的内容，对插件申请条件、插件提供的自定义组件、页面、接口等进行必要的描述和解释，方便第三方小程序正确使用插件；</li><li>插件引用到的图片资源不能是网络图片，且必须放到doc目录下，同时为保证插件安全，文档中的链接只能链接到微信开发者社区、微信公众平台、GitHub。</li></ul></li><li><p><code>miniProgram</code>目录：示例小程序，方便调试插件、预览和审核</p><ul><li>示例小程序中需要引用插件，并在页面中引用插件中的组件来调用插件提供的能力服务；</li><li>除非<code>miniprogramRoot</code>指定目录为miniProgram，否则miniProgram中的文件内容不会上传</li></ul></li><li><p><code>plugin</code>目录：插件代码目录</p><ul><li>插件中组件和页面的编写方式与自定义组件相同，包含<code>json</code>、<code>js</code>、<code>wxss</code>、<code>wxml</code>四个文件组成；</li><li>插件中可以定义任意数量的自定义组件，这些组件在插件内可以相互引用，但提供给第三方小程序使用的组件必须在配置文件中给出；</li><li>插件也可以export一些js接口，但提供给第三方小程序使用的接口也必须在配置文件中给出；</li><li><strong>插件开发者需要提供插件调用失败、插件调用参数错误、插件调用参数疏漏等特殊情况的错误码和错误信息，以便插件使用者正确使用插件</strong>。</li><li>插件包会计入小程序总包的大小，所以插件开发者需要尽量控制插件的大小，避免不必要的逻辑和样式</li></ul></li><li><p><code>project.config.json</code>文件：</p><ul><li><code>miniprogramRoot</code>中指定的目录内容将会在插件上传时作为插件使用Demo一起上传，这个Demo会覆盖到插件的所有使用场景，便于插件的审核</li><li><code>compileType</code>字段表示项目编译类型，只有当<code>compileType == &#39;plugin&#39;</code> 时才能正常使用插件项目，<code>miniProgram</code>中引用的<code>plugin.version</code>才可以等于<code>dev</code></li></ul></li></ul><p>针对具体功能的开发实现，插件有其局限性，具体内容将在<span style="color:blue;">三. 插件的限制</span>中详细介绍。此外，插件的开发也有其需要特殊注意的地方，特别是在基础库版本、页面跳转、网络请求三个方面：</p><p><strong>1）基础库版本</strong></p><p>目前基础调试库版本已经更新至2.8.0，微信开发者工具针对2.2.2以下的版本会报错提示“🔥请将调试基础库上调到2.2.2以上”，因此插件的开发需要选择基础库 &gt; 2.2.2。</p><p><strong>2）页面跳转</strong></p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image2.png" style="height:450px;text-align:center;"><p>在插件的开发中常常会涉及到三种情况下的跳转，插件内跳转、插件间跳转和插件与小程序间跳转，都可以使用<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html"><code>navigator</code></a>组件和<a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html"><code>wx.navigateTo</code></a>API来实现，但<strong>只有页面栈顶是插件页面的时候才可以调用<code>wx.navigateTo</code>来实现，且页面栈内不得高于10层</strong></p>',15),n=Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["h"])("p",null,"插件内跳转："),Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["h"])("p",null,"基础库版本 < 2.1.0，插件内不支持使用页面")]),Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["g"])("基础库版本 2.1.0 ~ 2.2.2，插件内页面跳转需要设置目标页面的url，例如 "),Object(c["h"])("code",null,"plugin-private://PLUGIN_APPID/PATH_TO/PAGE")]),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["g"])("wx.navigateTo({\n    "),Object(c["h"])("span",{class:"hljs-attr"},"url"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},[Object(c["g"])("`plugin-private://"),Object(c["h"])("span",{class:"hljs-subst"},[Object(c["g"])("${"),Object(c["h"])("span",{class:"hljs-keyword"},"this"),Object(c["g"])(".data.pluginAppid}")]),Object(c["g"])("/pages/about/about`")]),Object(c["g"])(",\n})\n")])])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,"基础库版本 > 2.2.2，插件内页面跳转可以使用相对路径作为目标页面的url"),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["g"])("wx.navigateTo({\n    "),Object(c["h"])("span",{class:"hljs-attr"},"url"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"`../about/about`"),Object(c["g"])(",\n})\n")])])])])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,"插件间跳转"),Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["h"])("p",null,"插件不能直接引用其他插件，也不能直接跳转至其他插件，但当小程序同时引用了插件A和插件B，插件A、B可以互相跳转与引用，使用方法如下："),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-json"},[Object(c["h"])("span",{class:"hljs-comment"},"// 小程序app.json引用两个插件"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-string"},'"plugins"'),Object(c["g"])(":  {\n  "),Object(c["h"])("span",{class:"hljs-attr"},'"APlugin"'),Object(c["g"])(": {\n    "),Object(c["h"])("span",{class:"hljs-attr"},'"version"'),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},'"dev"'),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},'"provider"'),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},'"wx046..."'),Object(c["g"])("\n  },\n  "),Object(c["h"])("span",{class:"hljs-attr"},'"BPlugin"'),Object(c["g"])(": {\n    "),Object(c["h"])("span",{class:"hljs-attr"},'"version"'),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},'"1.1.0"'),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},'"provider"'),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},'"wx047..."'),Object(c["g"])(" \n  }\n}\n\n"),Object(c["h"])("span",{class:"hljs-comment"},"// 插件A页面index要跳转到插件B pages/test/test，首先要在插件A index.json中定义"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-string"},'"usingComponents"'),Object(c["g"])(": {\n  "),Object(c["h"])("span",{class:"hljs-attr"},'"test"'),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},'"plugin-private://BPlugin_APPID/pages/test/test"'),Object(c["g"])("\n}\n")])]),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["g"])("// 插件A页面index中定义\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"navigator"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"url"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"plugin-private://BPlugin_APPID/pages/test/test"'),Object(c["g"])(" >")]),Object(c["g"])("跳转"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"navigator"),Object(c["g"])(">")]),Object(c["g"])("\n")])])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["h"])("code",null,"navigator"),Object(c["g"])("组件和"),Object(c["h"])("code",null,"usingComponents"),Object(c["g"])("定义中必须严格指定插件页面的路径，否则将会报错"),Object(c["h"])("code",null,'Component is not found in path "plugin-private://BPlugin_APPID/pages/test/test"')])])])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,"插件与小程序间跳转："),Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["g"])("小程序跳转至插件：小程序页面的页面栈顶不是插件页面，不满足插件页面跳转的必要条件，因此无法调用"),Object(c["h"])("code",null,"wx.navigateTo"),Object(c["g"])("跳转至插件页面，可以使用"),Object(c["h"])("code",null,"navigator"),Object(c["g"])("组件实现跳转")]),Object(c["h"])("li",null,[Object(c["g"])("插件跳转至小程序：鉴于插件API的限制，不能调用"),Object(c["h"])("code",null,"wx.navigateToMiniProgram"),Object(c["g"])("实现插件跳转至小程序，可以使用"),Object(c["h"])("code",null,"navigator"),Object(c["g"])("组件或"),Object(c["h"])("code",null,"wx.navigateTo"),Object(c["g"])("实现跳转，若使用"),Object(c["h"])("code",null,"wx.navigateTo"),Object(c["g"])(" API时同样需要满足"),Object(c["h"])("strong",null,"页面栈顶是插件页面"),Object(c["g"])("的条件。")])])])],-1),l=Object(c["h"])("p",null,[Object(c["h"])("strong",null,"3） 网络请求")],-1),j=Object(c["h"])("p",null,[Object(c["g"])("插件在使用"),Object(c["h"])("a",{href:"https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html"},[Object(c["h"])("code",null,"wx.request")]),Object(c["g"])("API发送网络请求时，将会额外携带一个签名"),Object(c["h"])("code",null,"HostSign"),Object(c["g"])("，用于验证请求来源于小程序插件，这个签名位于请求头中，形如：")],-1),b=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-json"},[Object(c["g"])("X-WECHAT-HOSTSIGN: {\n  "),Object(c["h"])("span",{class:"hljs-attr"},'"noncestr"'),Object(c["g"])(":"),Object(c["h"])("span",{class:"hljs-string"},'"NONCESTR"'),Object(c["g"])(", \n  "),Object(c["h"])("span",{class:"hljs-attr"},'"timestamp"'),Object(c["g"])(":"),Object(c["h"])("span",{class:"hljs-string"},'"TIMESTAMP"'),Object(c["g"])(", \n  "),Object(c["h"])("span",{class:"hljs-attr"},'"signature"'),Object(c["g"])(":"),Object(c["h"])("span",{class:"hljs-string"},'"SIGNATURE"'),Object(c["g"])("\n}\n")])],-1),h=Object(c["h"])("p",null,[Object(c["g"])("其中，"),Object(c["h"])("code",null,"NONCESTR"),Object(c["g"])("是一个随机字符串，"),Object(c["h"])("code",null,"TIMESTAMP"),Object(c["g"])("是生成这个随机字符串和"),Object(c["h"])("code",null,"SIGNATURE"),Object(c["g"])("的UNIX时间戳，他们是生成"),Object(c["h"])("code",null,"SIGNATURE"),Object(c["g"])("的参数，签名算法为：")],-1),g=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["g"])("SIGNATURE = sha1([APPID, NONCESTR, TIMESTAMP, TOKEN].sort().join("),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])("))\n")])],-1),i=Object(c["f"])('<p>其中，主要参数：</p><ul><li><p><code>APPID</code>是所在小程序的AppId，可以从请求头的referrer中获得：</p><p>网络请求的referrer格式固定为<code>https://servicewechat.com/{appid}/{version}/page-frame.html</code>，其中{appid}为小程序的appid，{version}为小程序的版本号，版本号为0表示为开发版、体验版以及审核版本，版本号为<code>devtools</code>表示为开发者工具，其余为正式版本。</p></li><li><p><code>TOKEN</code>是插件TOKEN，可以在小程序插件 --&gt; 基本设置中找到。</p></li><li><p>自基础库版本 2.0.7 开始，小程序运行期间，网络状况正常时，<code>NONCESTR</code>和<code>TIMESTAMP</code>每10分钟变更一次，如有必要，可以通过判断<code>TIMESTAMP</code>判断当前的签名是否有效。</p></li></ul><p>插件开发者可以在服务器上按照以下步骤校验签名：</p><ul><li><code>sort</code>对<code>APPID</code>、<code>NONCESTR</code>、<code>TIMESTAMP</code>、<code>TOKEN</code>四个值表示成字符串形式，按照字典序排序</li><li><code>join</code>将排好序的四个字符串直接连接在一起</li><li>对连接结果使用<code>sha1</code>算法，结果即为<code>SIGNATURE</code></li></ul><p>插件开发者为保证插件的安全性，可以按照以下步骤校验调用方：</p><ul><li>服务器依据使用者小程序AppId判别是否具备插件调用权限，如不具备则拒绝调用</li><li>服务器依据签名判别请求签名是否有效，无效则拒绝返回错误码</li></ul><h4>2. 插件的发布</h4><p>通过微信开发者工具预览验证后即可准备发布，可以按照以下步骤上传和发布插件：</p><ul><li>**选择上传配置：**在微信开发者工具中配置&quot;上传代码时自动压缩混淆&quot;、“上传代码时进行代码保护”等项目，以压缩插件代码，及保护插件代码安全（TODO）</li><li>**上传代码：**在微信开发者工具中点击“上传”，填写版本号（即为使用者可以指定的插件版本号），即可上传插件代码</li><li>**上传开发文档：**在“编辑器”中打开开发文档，编辑完成后，可以使用编辑器底部的上传入口上传插件文档，上传后的文档不会立刻发布，需要使用账号密码登录插件管理后台，在 小程序插件 &gt; 基本设置 中预览、发布插件文档，文档发布后，可多次更新修改。</li><li>**提交审核：**上传后即可提交审核，提交审核时需要填写准确的插件服务类目、标签及功能描述，同时服务类目需要满足<a href="https://developers.weixin.qq.com/miniprogram/introduction/plugin.html#开放范围及服务类目" target="_blank">[官方开放的类目范围]</a>，审核周期一般为7个工作日，审核结果将会通过模板消息、站内信通知管理员。</li><li>**发布新版本：**审核通过后即可发布，发布时需要填写准确的版本更新信息，和支持的最低版本库</li></ul><p>需要注意的是插件没有体验版，可以发布多个线上版本，由使用者决定具体使用的版本号。上传后的插件由小程序框架对每个插件进行数据安全保护，保证他们之间不能窃取其他任何一方的数据，同时插件的逻辑代码也无法被使用方看法，这些都依赖于插件的安全隔离机制（TODO，安全隔离机制具体是啥，是否存在代码加密？）</p><h4>3. 插件的更新</h4><p>按照上一节插件的发布中的步骤，即可发布更新后的插件代码，需要特别注意的是，在发布时，需要关注选项“快速更新”，勾选快速更新后，系统会为插件使用者管理员统一下发模板消息，模板消息中包含快速更新的链接，支持插件版本的快速更新，该次快速更新免审核。</p><p>此外，在插件的更新中需要特别注意的是，为了保证插件更新的稳定性，插件开发者需要保持版本迭代过程中插件所调用数据接口的稳定性。</p><h3>二. 插件的使用</h3><h4>1. 插件的申请</h4><p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image3.png" alt="图片 2"></p><p><strong>任何注册的小程序</strong>都可以在小程序后台申请插件，申请后需要等待插件开发者小程序管理员通过后，方可使用插件，如果调用没有通过申请的插件，则使用者小程序白屏，并报错：<span style="color:red;">插件申请成功，待审核确认</span>，如果调用未申请的插件，则使用者小程序白屏，并会报错：<span style="color:red;">插件未授权</span>。</p><p>同时，插件使用者需要关注插件开发文档中的插件申请条件，若不满足申请条件，插件开发者一般不会通过插件申请。</p><p>一个小程序最多添加5个小程序插件。</p><h4>2. 插件的使用</h4><p><strong>1）插件基本使用方法</strong></p><p>以“好物推荐”插件为例，使用插件可以按照以下几个步骤：</p><ul><li><p>在小程序<code>app.json</code>文件中引用插件：</p></li><li><p>在引用插件组件的页面中引用插件组件：</p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image5.png" style="width:600px;border:1px solid #ededed;"></li><li><p>在引用插件组件的页面中写入插件组件：</p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image6.png" style="width:600px;border:1px solid #ededed;"></li><li><p>在引用插件组件的页面中定义插件所需参数，即可使用插件</p></li><li><p>为保证小程序正常运行，插件使用者需要针对插件调用失败等特殊情况做兜底逻辑</p></li></ul><p>如果插件只在一个分包内用到，可以将插件仅放在这个分包内，例如： <img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image7.png" style="width:600px;border:1px solid #ededed;"></p><p>但分包内使用插件有如下限制：</p><ul><li>在分包内使用的插件仅能在分包内使用；</li><li>同一个插件不能被多个分包同时引用；</li><li>不能从分包外的页面直接跳入分包内的插件页面，需要先跳入分包内的非插件页面，再跳入同一分包内的插件页面</li></ul><p><strong>2）依赖版本</strong></p><ul><li>引用的插件版本不被支持，即引用的插件版本号 &lt;最低可用版本号，或 &gt;最新版本号，使用者小程序白屏，并报错“插件版本不存在”</li><li>公共库版本 &lt; 2.2.2，无法正常使用插件，并调试工具报错“将版本更新至🔥请将调试基础库上调到2.2.2以上”</li><li>（TODO：真机测试公共库版本）</li></ul><p><strong>3）其他</strong></p><ul><li>插件使用方计算代码包大小时会合并计入引用的插件大小，因此如果插件只有一个分包使用，可以尽量将插件放在分包下</li><li>插件开发者可以获得因为引用插件而传入的数据，为保护数据安全，要关注插件开发文档中的参数要求，避免传入不必要的数据</li></ul><h4>3. 插件的更新</h4><p>若小程序开发者发布小程序时勾选了“快速更新”选项，则插件使用者小程序管理员会在微信收到模板消息，并附有“快速更新”的链接，可以实现一键更新小程序中引用的插件版本，同时该次更新不必审核。</p><h3>三. 插件的限制</h3><h4>1. 调用API的限制</h4><p>插件可以调用的 API 与小程序不同，主要有两个区别：</p><ul><li>插件的请求域名列表与小程序相互独立；</li><li>一些 API 不允许插件调用（这些函数不存在于 <code>wx</code> 对象下）。</li></ul><p>允许插件调用的API及其对应版本要求列表可参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/api-limit.html" target="_blank">[官方说明]</a>，若在插件中调用了不支持的API，监听fail回调，可获得错误信息为<code>getUserInfo:fail 系统错误，错误码：-12015,system error</code>。有些接口，例如<code>wx.login</code>、<code>wx.getUserInfo</code>、虽然在插件中不能使用，但可以通过插件功能页来达到目的，例如用户信息功能页、支付功能以及收货地址功能：</p><ul><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/user-info.html" target="_blank">[用户信息功能页]</a>：相当于调用<code>wx.login</code>和<code>wx.getUserInfo</code>，自基础库2.3.1开始，用户在功能页授权后，插件就可以直接调用<code>wx.login</code>和<code>wx.getUserInfo</code>无需再次进入功能页获取信息，自基础库版本2.6.3起，可以使用<code>wx.getSetting</code>查询用户是否授权过。用户信息功能页相关开发可按照如下步骤：</p><ul><li><p>在插件页面中引用<code>functional-page-navigator</code></p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image8.png" style="width:600px;border:1px solid #ededed;"></li><li><p>在插件页面中声明用户信息获取成功的回调</p><img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image9.png" style="width:600px;border:1px solid #ededed;"></li><li><p>即可使用用户信息 <img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image10.png" style="width:600px;border:1px solid #ededed;"></p></li></ul></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/request-payment.html" target="_blank">[支付功能页]</a>：相当于调用<code>wx.requestPayment</code>的功能，支付功能页的使用与用户信息功能页类似，<code>function-page-navigator</code>参数<code>name=requestPayment</code>。<strong>需要注意的是插件使用支付功能，需要在管理后台 小程序插件 -&gt; 基本设置 -&gt; 支付能力”设置项中。另外，无论是否通过申请，主体为个人小程序在使用插件时，都无法正常使用插件里的支付功能。</strong></p></li><li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages/choose-address.html" target="_blank">[收货地址功能页]</a>：相当于调用<code>wx.chooseAddress</code>的功能，支付功能页的使用与用户信息功能页类似，<code>function-page-navigator</code>参数<code>name=chooseAddress</code>。</p><p>​ <img src="https://zhangmingemma.github.io/dist/images/2019-07-16/20190716image11.png" style="width:600px;border:1px solid #ededed;"></p></li></ul><h4>2. 使用组件的限制</h4><p>在插件开发中，以下组件不能在插件页面中使用：</p><ul><li>开放能力（open-type）为以下之一的button： <ul><li>contact（打开客服会话）</li><li>getPhoneNumber（获取用户手机号）</li><li>getUserInfo（获取用户信息）</li></ul></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html" target="_blank">[open-data]</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html" target="_blank">[web-view]</a></li></ul><p>以下组件的使用对基础库版本有要求：</p><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html" target="_blank">[navigator]</a><a href></a> 需要基础库版本 [2.1.0]</li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-player.html" target="_blank">[live-player]</a> 和 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/live-pusher.html" target="_blank">[live-pusher]</a> 需要基础库版本 [2.3.0]</li></ul>',43);function O(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n,l,j,b,h,g,i])}const r={};r.render=O;e["default"]=r},"353e":function(t,e,s){},3548:function(t,e,s){},"3af7":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>上两篇解释了如何从项目文件夹内读取markdown文件，渲染文章页面，并生成目录树，锚定页面。本篇主要解释的是如何在文章内添加评论，将整个博客项目部署到github，通过github.io进行访问。</p><p>博客源码github: <a href="https://github.com/zhangmingemma/zhangmingemma.github.io" target="_blank">博客仓库地址</a></p><h2>1. 文章评论</h2><p>我这边不太想用服务器那一套，不想自己做存储，所以使用的是凹凸实验室开发的<code>gitalk</code>评论体系，它的原理其实是在github仓库内根据<code>id</code>新增issue，发表的评论便是新增的issue回复。指引中关于使用方法，其实说明的已经非常清楚了，这里就不做赘述了~~~</p><p>gitalk源码与指引: <a href="https://github.com/gitalk/gitalk" target="_blank">gitalk源码与指引</a> gitalk示例Demo: <a href="https://gitalk.github.io/" target="_blank">gitalk示例Demo</a></p><h2>2. 部署github</h2>',6),n=Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["g"])("在"),Object(c["h"])("code",null,"vue.config.js"),Object(c["g"])("配置根目录和"),Object(c["h"])("code",null,"index.html"),Object(c["g"])("的文件路径：")]),Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["g"])("设置"),Object(c["h"])("code",null,"publicPath"),Object(c["g"])("，是因为默认"),Object(c["h"])("code",null,"build"),Object(c["g"])("后的文件内容全部防止在"),Object(c["h"])("code",null,"dist"),Object(c["g"])("文件夹内，包含编译后的"),Object(c["h"])("code",null,"js"),Object(c["g"])("文件、"),Object(c["h"])("code",null,"css"),Object(c["g"])("文件、静态文件、"),Object(c["h"])("code",null,"public"),Object(c["g"])("文件夹下的内容等，因此我们需要将线上环境的根目录指向"),Object(c["h"])("code",null,"/dist"),Object(c["g"])("，这样"),Object(c["h"])("code",null,"index.html"),Object(c["g"])("中引用的"),Object(c["h"])("code",null,"js"),Object(c["g"])("和"),Object(c["h"])("code",null,"css"),Object(c["g"])("的路径才是正确的。")]),Object(c["h"])("li",null,[Object(c["g"])("设置"),Object(c["h"])("code",null,"indexPath"),Object(c["g"])("，是因为"),Object(c["h"])("code",null,"build"),Object(c["g"])("后的"),Object(c["h"])("code",null,"index.html"),Object(c["g"])("默认也是防止在"),Object(c["h"])("code",null,"dist"),Object(c["g"])("文件夹内的，所以部署后访问自己的页面，需要是"),Object(c["h"])("code",null,"zhangmingemma.github.io/dist"),Object(c["g"])("，太丑了，所以我们这边配置后将"),Object(c["h"])("code",null,"index.html"),Object(c["g"])("放在最外层，可以直接访问"),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-built_in"},"module"),Object(c["g"])(".exports = {\n    "),Object(c["h"])("span",{class:"hljs-attr"},"parallel"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"false"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"publicPath"),Object(c["g"])(": process.env.NODE_ENV === "),Object(c["h"])("span",{class:"hljs-string"},'"production"'),Object(c["g"])(" ? "),Object(c["h"])("span",{class:"hljs-string"},'"/dist"'),Object(c["g"])(" : "),Object(c["h"])("span",{class:"hljs-string"},'"/"'),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"indexPath"),Object(c["g"])(": path.resolve(__dirname, "),Object(c["h"])("span",{class:"hljs-string"},"'index.html'"),Object(c["g"])(")\n}\n")])])])])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["h"])("code",null,"vue-router"),Object(c["g"])("使用hash模式，而非history模式，原因是history模式的路由跳转，会向服务器重新发起页面请求，而GitHub Pages并没有提供服务器，所以我们需要使用hash模式")]),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" router = createRouter({\n    "),Object(c["h"])("span",{class:"hljs-attr"},"history"),Object(c["g"])(": createWebHashHistory(),\n    routes\n})\n")])])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["g"])("新建代码仓库"),Object(c["h"])("code",null,"username.github.io"),Object(c["g"])("，将build后包含dist文件夹的代码"),Object(c["h"])("code",null,"push"),Object(c["g"])("到仓库的"),Object(c["h"])("code",null,"gh-pages"),Object(c["g"])("分支，之后就可以访问"),Object(c["h"])("code",null,"https://username.github.io"),Object(c["g"])("，看到自己的博客了。")])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["g"])("这里"),Object(c["h"])("code",null,"markdown"),Object(c["g"])("中我有引用一些存储在"),Object(c["h"])("code",null,"public/images"),Object(c["g"])("目录下的本地图片，在部署之后，markdown没有被webpack解析到内容，所以图片的路径并没有得到转换，访问的是域名根目录，我这里的处理方式是转换为线上地址，本地开发的时候配置代理来访问。如果大家有更好的处理方式可以评论告诉我。我的具体做法是")]),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-markdown"},"// 原来图片的引用路径\n![](../images/2021-07-03/1.png)\n\n// 修改后图片的引用路径\n![](https://username.github.io/dist/images/2021-07-03/1.png)\n")]),Object(c["h"])("p",null,"本地开发时配置的代理是："),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},"username.github.io/dist/images http://127.0.0.1:8080/images \n")])])],-1);function l(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n])}const j={};j.render=l;e["default"]=j},"3f9c":function(t,e,s){"use strict";s("6237")},"44f1":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<h3>BFC</h3><p>BFC(Blocking Formatting Contexts)，翻译过来是“块级格式化上下文”，在了解BFC之前，让我们先来看看FC(Formatting Contexts)，<a href="https://www.w3.org/TR/CSS22/visuren.html#block-formatting">W3C的官方解释</a>是：</p><blockquote><p>文档中的每个元素都是FC的一部分，FC包BFC、IFC等多种类型。块级元素在BFC中排布，行内元素在IFC中排布。</p></blockquote><p>简单来说，FC就是格式化上下文，可以理解为布局环境，不同类型的格式化上下文定义了不同的内容元素排布方式，如果不了解块级元素、行内元素，可以去看看<a href="https://zhangmingemma.github.io/#/post?file=2022-10-12-Box" target="_blank">《CSS基础系列之块级元素、行内元素》</a>。BFC是一个完全独立的空间，空间里的子元素不会影响到外面的布局。BFC的创建方式：</p><blockquote><ol><li>浮动定位</li><li>绝对定位，position的值设为<code>absolute</code>、<code>fixed</code></li><li><code>display</code>的值设为<code>inline-block</code>、<code>table-cells</code>、<code>table-captions</code>、<code>flex</code></li><li><code>overflow</code>不为<code>visible</code>，值为<code>scroll</code>、<code>auto</code>、<code>hidden</code></li><li><code>&lt;html&gt;</code></li></ol></blockquote><p>W3C也定义了BFC的规则：</p><blockquote><ol><li>BFC内的子元素从容器顶部自上而下顺次纵向排布，BFC内每个子元素的左边贴近容器的左边（从右至左排布的容器子元素右边贴近容器的右边）</li></ol></blockquote>',7),n=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"background: lightgrey; overflow: auto;"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),l=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/5.png"},null,-1),j=Object(c["h"])("blockquote",null,[Object(c["h"])("ol",{start:"2"},[Object(c["h"])("li",null,"BFC内上下邻近的两个子元素之间的间距取决于margin的值，并且同一BFC上下元素margin会重叠")])],-1),b=Object(c["h"])("p",null,"下面的例子中本身定义的两个div的间距为20px，但实际展示为10px",-1),h=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"background: lightgrey;overflow:auto"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow; margin: 0 0 10px 10px;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; margin: 10px 0 0 10px;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),g=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/6.png"},null,-1),i=Object(c["h"])("blockquote",null,[Object(c["h"])("ol",{start:"4"},[Object(c["h"])("li",null,"BFC高度计算时，浮动元素也参与计算，下面的例子中，容器包含浮动元素和普通div，高度为两个元素的高度和")])],-1),O=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"background: lightgrey; overflow: auto;"'),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; float: left;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),r=Object(c["f"])('<img src="https://zhangmingemma.github.io/dist/images/2022-10-11/7.png" style="width:400px;"><h4>BFC的应用场景</h4><p>鉴于BFC内的子元素的布局不会影响到外面，同样外面也不会影响到BFC内部的元素，因此，我们可以通过BFC来解决一些实际问题：</p><h5>1. 清除浮动，解决高度塌陷</h5><p>在下面的例子中，<code>div</code>容器中包含了一个<code>float</code>元素，但<code>float</code>元素的高度并没有撑开<code>div</code>容器的高度，导致<code>div</code>容器的<code>border</code>从<code>float</code>元素下面穿过。</p>',5),p=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"background: grey; border: 5px solid black"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"float:left; width: 200px; height: 150px; background: purple;"'),Object(c["g"])(">")]),Object(c["g"])("\n    I am a floated box\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"p"),Object(c["g"])(">")]),Object(c["g"])("I am the content inside the container"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"p"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),o=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/1.png"},null,-1),d=Object(c["h"])("p",null,[Object(c["g"])("此时就可以用BFC将float元素包裹起来，或者让"),Object(c["h"])("code",null,"div"),Object(c["g"])("容器自身变成一个BFC容器，就可以清除浮动，解决高度塌陷的问题")],-1),u=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"background: lightgrey; border: 5px solid black; overflow: auto;"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"float:left; width: 200px; height: 150px; background: yellow;"'),Object(c["g"])(">")]),Object(c["g"])("I am a floated box"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"p"),Object(c["g"])(">")]),Object(c["g"])("I am the content inside the container"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"p"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),m=Object(c["f"])('<img src="https://zhangmingemma.github.io/dist/images/2022-10-11/2.png"><h5>2. margin边距重叠</h5><p>在下面的例子中，<code>container</code>容器中包含了两个上下排布的<code>div</code>，按照定义，外边距定义为<code>10px</code>，我们期望两个<code>div</code>之间的边距为<code>20px</code>，但实际上会发生<code>margin</code>重叠，两个<code>div</code>之间的边距只有<code>10px</code>。并且两个<code>div</code>的上下边距也都是失效的，贴近容器边，而不是定义的上下边距均为<code>10px</code></p>',3),f=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"background: lightgrey;"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow; margin: 10px;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; margin: 10px;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),v=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/3.png"},null,-1),y=Object(c["h"])("p",null,"可以用BFC将子节点包起来，形成BFC之后，就可以避免其他节点的影响，解决margin边距重叠的问题",-1),k=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"background: lightgrey;"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"display: flex;"'),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: yellow; margin: 10px;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"display: flex;"'),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width: 200px; height: 150px; background: blueviolet; margin: 10px;"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),w=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/4.png"},null,-1),x=Object(c["h"])("h3",null,"IFC",-1),P=Object(c["h"])("p",null,"开头提到FC包含多种类型，IFC也是其中的一种，IFC(Inline Formatting Contexts)，翻译为行内格式化上下文，在W3C中的定义是：",-1),T=Object(c["h"])("blockquote",null,[Object(c["h"])("p",null,"当块级容器内仅包含行内元素就会创建IFC")],-1),I=Object(c["h"])("p",null,"IFC的布局规则定义是：",-1),C=Object(c["h"])("blockquote",null,[Object(c["h"])("ol",null,[Object(c["h"])("li",null,"在IFC中，子元素自容器顶部水平顺次排布，垂直方向上可以按照顶部对齐、底部对齐、水平线对齐等各种方式对齐")])],-1),A=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["g"])(".container {\n  background:lightgrey; \n  width:500px; \n  height:200px; \n  vertical-align:middle; \n  line-height:200px;\n}\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("I am a span"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"b"),Object(c["g"])(">")]),Object(c["g"])("I am b element"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"b"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),S=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/8.png",style:{width:"400px"}},null,-1),z=Object(c["h"])("blockquote",null,[Object(c["h"])("ol",{start:"2"},[Object(c["h"])("li",null,[Object(c["g"])("在IFC中，包含一行内所有子元素的矩形区域成为"),Object(c["h"])("code",null,"line box"),Object(c["g"])("，即行框，行框的宽度取决于子元素的宽度和浮动，框的高度由所有子元素的高度撑开，最终高度可由所有元素最顶边到最底边的距离计算")])])],-1),N=Object(c["h"])("p",null,"下面的例子中最终行框的高度为最大的b的高度50px",-1),F=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["g"])(".container {\n  background:lightgrey; \n}\nspan {\n  line-height: 20px;\n  background: lightblue;\n}\nb {\n  line-height: 50px;\n  background: yellow;\n}\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("I am a span"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"b"),Object(c["g"])(">")]),Object(c["g"])("I am b element"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"b"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),_=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/10.png",style:{width:"400px"}},null,-1),q=Object(c["h"])("blockquote",null,[Object(c["h"])("ol",{start:"3"},[Object(c["h"])("li",null,[Object(c["g"])("行框能够包含所有子元素，如果子元素的高度小于行框的高度，则其垂直方向的排布取决于"),Object(c["h"])("code",null,"vertical-align"),Object(c["g"])("，如果子元素的宽度小于行框的宽度，则其水平方向的排布取决于"),Object(c["h"])("code",null,"text-align")]),Object(c["h"])("li",null,"如果行框在水平方向上放不下所有行内元素，则会换行，如果包含不可换行的元素，则会溢出")])],-1),E=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["g"])(".container {\n  background:lightgrey; \n  width: 400px;\n  height: 100px;\n}\n.container2 {\n  background:lightgrey; \n  width: 400px;\n  height: 100px;\n  margin-top: 50px;\n  white-space: nowrap;\n}\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("An inline formatting context is established by a block container box that contains no block-level boxes. In an inline formatting context, boxes are laid out horizontally, one after the other. "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container2"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("An inline formatting context is established by a block container"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),D=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/11.png",style:{width:"400px"}},null,-1),M=Object(c["h"])("blockquote",null,[Object(c["h"])("ol",{start:"5"},[Object(c["h"])("li",null,"在IFC中，如果混入块级元素，则水平方向无法容纳所有子元素，则会进行换行，分布在多个垂直排布的行框内，但不会重叠"),Object(c["h"])("li",null,"在IFC中，子元素只会计算水平margin，而垂直方向上的margin不会被计算")])],-1),L=Object(c["h"])("p",null,"下面的例子中，b元素设置了四周边距为30px，但实际上只有左右边距生效了，上下边距并未生效",-1),B=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["g"])(".container {\n  background:lightgrey; \n  width:500px; \n  height:200px; \n  margin-top: 100px;\n}\nb {\n  margin: 30px;\n}\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"container"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("I am a span"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"b"),Object(c["g"])(">")]),Object(c["g"])("I am b element"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"b"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),H=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/9.png",style:{width:"400px"}},null,-1),R=Object(c["h"])("h4",null,"IFC的应用场景",-1),W=Object(c["h"])("p",null,[Object(c["g"])("IFC针对行内元素，鉴于其高度由子元素完全撑开，并且内部元素的排列依赖"),Object(c["h"])("code",null,"text-align"),Object(c["g"])("/"),Object(c["h"])("code",null,"vertical-align"),Object(c["g"])("，因此，我们可以用IFC来实现：")],-1),$=Object(c["h"])("h5",null,"1. 元素的水平垂直居中",-1),U=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width:300px;height:200px;background: lightgray;"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width:50px; height:50px; background:palegreen;"'),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),G=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/12.png",style:{width:"200px"}},null,-1),V=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2022-10-11/13.png",style:{width:"200px"}},null,-1),K=Object(c["h"])("p",null,[Object(c["g"])("上面的示例中，绿色的块在灰色的块中沿左上边布局，想要让它居中，我们只需要将绿色块变成行内元素，灰色块就是IFC了，利用"),Object(c["h"])("code",null,"text-align"),Object(c["g"])("/"),Object(c["h"])("code",null,"vertical-align"),Object(c["g"])("即可")],-1),J=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width:300px; height:200px; background: lightgray; line-height:200px; vertical-align:middle; text-align:center;"'),Object(c["g"])(">")]),Object(c["g"])("\n  "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"width:50px; height:50px; background:palegreen;display:inline-block;"'),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1);function X(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n,l,j,b,h,g,i,O,r,p,o,d,u,m,f,v,y,k,w,x,P,T,I,C,A,S,z,N,F,_,q,E,D,M,L,B,H,R,W,$,U,G,V,K,J])}const Y={};Y.render=X;e["default"]=Y},"4ddc":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["h"])("p",null,"文本预处理是要文本处理成计算机能识别的格式，是文本分类、文本可视化、文本分析等研究的重要步骤。具体流程包括文本分词、去除停用词、词干抽取(词形还原)、文本向量表征、特征选择等步骤，以消除脏数据对挖掘分析结果的影响。",-1),n=Object(c["h"])("p",null,"本文仅针对英文文本，中文文本暂时还没有研究过。介绍的全部都是基于Python2.7，利用NLTK库进行文本分类的过程。",-1),l=Object(c["h"])("h3",null,"文本分词",-1),j=Object(c["h"])("p",null,"文本分词即将文本拆解成词语单元，英文文本以英文单词空格连接成句，分词过程较为简单。以下介绍几种方法。",-1),b=Object(c["h"])("p",null,[Object(c["h"])("strong",null,"正则表达式分词")],-1),h=Object(c["h"])("p",null,"以空格进行分词",-1),g=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> import re\n>>> text = 'I was just a kid, and loved it very much! What a fantastic song!'\n>>> print re.split(r' ',text)\n\n['I', 'was', 'just', 'a', 'kid,', 'and', 'loved', 'it', 'very', 'much!', 'What', 'a', 'fantastic', 'song!']\n")],-1),i=Object(c["h"])("p",null,"re匹配符号进行分词",-1),O=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> print re.split(r'\\W+', text)\n\n['I', 'was', 'just', 'a', 'kid', 'and', 'loved', 'it', 'very', 'much', 'What', 'a', 'fantastic', 'song', '']\n")],-1),r=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> print re.findall(r'\\w+|\\S\\w*', text)\n\n['I', 'was', 'just', 'a', 'kid', ',', 'and', 'loved', 'it', 'very', 'much', '!', 'What', 'a', 'fantastic', 'song', '!']\n")],-1),p=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> print re.findall(r\"\\w+(?:[-']\\w+)*|'|[-.(]+|\\S\\w*\", text)\n\n['I', 'was', 'just', 'a', 'kid', ',', 'and', 'loved', 'it', 'very', 'much', '!', 'What', 'a', 'fantastic', 'song', '!']\n")],-1),o=Object(c["h"])("p",null,"NLTK正则表达式分词器",-1),d=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> import re\n>>> import nltk\n>>> text = 'I was just a kid, and loved it very much! What a fantastic song!'\n>>> pattern = r\"\"\"(?x)                   # set flag to allow verbose regexps \n\t              (?:[A-Z]\\.)+           # abbreviations, e.g. U.S.A. \n\t              |\\d+(?:\\.\\d+)?%?       # numbers, incl. currency and percentages \n\t              |\\w+(?:[-']\\w+)*       # words w/ optional internal hyphens/apostrophe \n\t              |\\.\\.\\.                # ellipsis \n\t              |(?:[.,;\"'?():-_`])    # special characters with meanings \n\t            \"\"\" \n>>> print nltk.regexp_tokenize(text, pattern)\n\n['I', 'was', 'just', 'a', 'kid', ',', 'and', 'loved', 'it', 'very', 'much', 'What', 'a', 'fantastic', 'song']\n")],-1),u=Object(c["h"])("p",null,[Object(c["h"])("strong",null,"最大匹配算法（MaxMatch）分词")],-1),m=Object(c["h"])("p",null,"MaxMatch算法在中文自然语言处理中常常用来进行分词（或许从名字上你已经能想到它是基于贪婪策略设计的一种算法），算法从右侧开始逐渐减少字符串长度，以此求得可能匹配到nltk字库中词语的最大长度的字符串。这种方法其实更常用于中文文本分词，但是不排除某些英文文本并不以空格作为分隔符，特此介绍一下",-1),f=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> import nltk\n>>> from nltk.corpus import words  \n>>> wordlist = set(words.words())   \n>>> def max_match(text):  \n    pos2 = len(text)  \n    result = ''  \n    while len(text) > 0:         \n        word = text[0:pos2]\n        if word in wordlist:  \n            result = result + text[0:pos2] + ' '  \n            text = text[pos2:]  \n            pos2 = len(text)  \n        else:  \n            pos2 = pos2-1                 \n    return result[0:-1]  \n>>> string = 'theyarebirds'  \n>>> print(max_match(string))\n\nthey are bird s\n")],-1),v=Object(c["h"])("h3",null,"停用词去除",-1),y=Object(c["h"])("p",null,"简单易懂，匹配词库中的停用词，去除！以消除冠词、连词等一些无意义无作用的词增加数据占用空间，并避免其为挖掘计算带来的干扰。",-1),k=Object(c["h"])("p",null,[Object(c["h"])("strong",null,"NLTK停用词库")],-1),w=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> import nltk\n>>> from nltk.corpus import stopwords\n>>> stopworddic = set(stopwords.words('english'))  \n>>> text = ['I', 'was', 'just', 'a', 'kid',  'and', 'loved', 'it', 'very', 'much', 'What', 'a', 'fantastic', 'song']\n>>> text = [i for i in text if i not in stopworddic ]\n>>> print text\n　　\n['I', 'kid', 'loved', 'much', 'What', 'fantastic', 'song']\n")],-1),x=Object(c["h"])("p",null,[Object(c["h"])("strong",null,"自定义词库")],-1),P=Object(c["h"])("p",null,"方法同上，自定义停用词，或者下载网络上的停用词库进行停用词去除",-1),T=Object(c["h"])("h3",null,"词干抽取",-1),I=Object(c["h"])("p",null,"将文本列表中的词语抽取其词干，以统一特征表征形式，特征降维以减少计算量。NLTK中提供了三种最常用的词干提取器接口，即 Porter stemmer, Lancaster Stemmer 和 Snowball Stemmer。抽取词的词干或词根形式（不一定能够表达完整语义）",-1),C=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> from nltk.stem.porter import PorterStemmer  \n>>> porter_stemmer = PorterStemmer()  \n\n>>> from nltk.stem.lancaster import LancasterStemmer  \n>>> lancaster_stemmer = LancasterStemmer()  \n\n>>> from nltk.stem import SnowballStemmer  \n>>> snowball_stemmer = SnowballStemmer(“english”)  \n\n>>> porter_stemmer.stem(‘maximum’)  \nu’maximum’  \n>>> lancaster_stemmer.stem(‘maximum’)  \n‘maxim’  \n>>> snowball_stemmer.stem(‘maximum’)  \nu’maximum’  \n\n>>> porter_stemmer.stem(‘presumably’)  \nu’presum’  \n>>> snowball_stemmer.stem(‘presumably’)  \nu’presum’  \n>>> lancaster_stemmer.stem(‘presumably’)  \n‘presum’  \n\n>>> porter_stemmer.stem(‘multiply’)  \nu’multipli’ \n>>> snowball_stemmer.stem(‘multiply’)  \nu’multipli’  \n>>> lancaster_stemmer.stem(‘multiply’)  \n‘multiply’ \n\n>>> porter_stemmer.stem(‘provision’)  \nu’provis’  \n>>> snowball_stemmer.stem(‘provision’)  \nu’provis’  \n>>> lancaster_stemmer.stem(‘provision’)  \nu’provid’  \n\n>>> porter_stemmer.stem(‘owed’)  \nu’owe’  \n>>> snowball_stemmer.stem(‘owed’)  \nu’owe’  \n>>> lancaster_stemmer.stem(‘owed’)  \n‘ow’   \n")],-1),A=Object(c["h"])("p",null,"各有优劣，看具体文本情况。对于分类、聚类这样对于特征词语的具体形态没有要求的情况下，进行词干抽取虽然抽取后的词干可能无实际意义但是却会大大减少计算时间，提高效率。",-1),S=Object(c["h"])("h3",null,"词形还原",-1),z=Object(c["h"])("p",null,"词形还原Lemmatization是把一个任何形式的语言词汇还原为一般形式（能表达完整语义）。相对而言，词干提取是简单的轻量级的词形归并方式，最后获得的结果为词干，并不一定具有实际意义。词形还原处理相对复杂，获得结果为词的原形，能够承载一定意义，与词干提取相比，更具有研究和应用价值。",-1),N=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},">>> from nltk.stem import WordNetLemmatizer  \n>>> wordnet_lemmatizer = WordNetLemmatizer()  \n>>> word = wordnet_lemmatizer.lemmatize('birds')  \n\nbird\n")],-1),F=Object(c["h"])("p",null,"nltk的lemmatization算法很鸡肋，基本可以理解为只有复数还原为单数形式，当然feet这样的非常态复数形式也可以实现，但是你要想形容词变名词，就不太怎么好使了，比如我在实验中geology，geography，geographic，geographical这几个词就无法还原成统一体。",-1),_=Object(c["h"])("h3",null,"文本向量表征以及TF-IDF权重表示",-1),q=Object(c["h"])("p",null,[Object(c["g"])("这一部分是基于Python的"),Object(c["h"])("a",{href:"http://radimrehurek.com/gensim/"},"Gensim"),Object(c["g"])("库将文本特征抽取为词袋，并将词袋表征为id,以特征id以及文档频率表征成文本向量。"),Object(c["h"])("a",{href:"http://baike.baidu.com/link?url=o8wTt7PnzFPnNWbP-sZ3Sn0kzpGVojCsbYQC3bx-86k5KQfVJo55Sxapb4l2ybnuozKf4KY2tSka5GLdrBooSa"},"TF-IDF"),Object(c["g"])("权重是很可靠的权重表征方式，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。TF-IDF加权的各种形式常被搜索引擎应用，作为文件与用户查询之间相关程度的度量或评级。")],-1),E=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},'#coding:utf-8\nfrom gensim import corpora, models, similarities\n\ndocuments = ["Shipment of gold damaged in a fire","Delivery of silver arrived in a silver truck","Shipment of gold arrived in a truck"]\n\n#分词#\ntexts = [[word for word in document.lower().split()] for document in documents]\nprint texts\n\n#抽取词袋，将token映射为id\ndictionary = corpora.Dictionary(texts)\nprint dictionary.token2id\n\n#由文档向量以及频率构成文档向量\ncorpus = [dictionary.doc2bow(text) for text in texts]\nprint corpus\n\n#计算tfidf权重,注意在gensim的tfidf算法中到文档频率的求解过程中对数之后+1了\ntfidf = models.TfidfModel(corpus)\ncorpus_tfidf = tfidf[corpus]\nfor doc in corpus_tfidf:\n\tprint doc\nprint tfidf.dfs\nprint tfidf.idfs\n')],-1),D=Object(c["h"])("p",null,"除此之外，最近导师推给我的一篇文章Word2vec也是文本向量表征的一种方式，考虑了上下文的语义联系，可以深入研究。",-1),M=Object(c["h"])("h3",null,"特征选择",-1),L=Object(c["h"])("p",null,"根据研究的需求进行特征的选择已达到特征降维，减小噪音的影响。常见的是根据词频（TF）、倒文档频率（IDF）、TFIDF权重等设定阈值进行筛选，无非是在TF/IDF/TFIDF权重计算结果的基础上设定阈值进行筛检。除此之外互信息、信息增益、X平方统计也是常见的方法。除此之外，如果你的研究是在给定类别名称的前提下进行语义文本分类，那么判断特征词与分类之间的语义相似度，从而进行筛选也是一种可行的方法。这里介绍的便是基于WordNet进行语义相似度的介绍。",-1),B=Object(c["h"])("p",null,"WordNet计算语义相似度常见的包括两种主要方法： path_similarity(sense1,sense2) # 词在词典层次结构中的最短路径 wup_similarity(sense1, sense2) # Wu-Palmer 提出的最短路径",-1),H=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},"#coding:utf-8\nimport nltk\nfrom nltk.corpus import wordnet as wn\nfrom heapq import *  \nfrom itertools import product\n\nword1 = 'hen'\nword2 = 'chicken'\n\nsense1 = wn.synsets(word1)\nsense2 = wn.synsets(word2)\n\nsim_wup = max(word1.wup_similarity(word2) for (word1, word2) in product(sense1, sense2))\nprint sim_wup\n\nsim_path = max(word1.path_similarity(word2) for (word1, word2) in product(sense1, sense2))\nprint sim_path\n")],-1),R=Object(c["h"])("p",null,"运行结果",-1),W=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},"0.962962962963\n0.5\n")],-1);function $(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n,l,j,b,h,g,i,O,r,p,o,d,u,m,f,v,y,k,w,x,P,T,I,C,A,S,z,N,F,_,q,E,D,M,L,B,H,R,W])}const U={};U.render=$;e["default"]=U},5765:function(t,e,s){"use strict";s("b601")},"597d":function(t,e,s){"use strict";var c=s("1da1"),a=s("5530"),n=s("d4ec"),l=s("bee2"),j=(s("96cf"),s("fb6a"),s("4de4"),s("4e82"),s("498a"),s("d3b7"),s("ddb0"),s("3ca3"),s("d81d"),s("7db0"),s("b0c0"),s("a1e9")),b=s("5c40"),h=s("b81d"),g=s("a7bb"),i=function(){function t(){Object(n["a"])(this,t),this.TotalPost=[]}return Object(l["a"])(t,[{key:"listCompiler",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=e.tags,c=void 0===s?[]:s,n=e.banPagination,l=void 0!==n&&n,h=Object(j["k"])(0),i=Object(j["j"])({postList:[]}),O=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=e.tags,c=void 0===s?[]:s,a=e.startIndex,n=void 0===a?0:a,l=e.endIndex,j=void 0===l?0:l,b=t.filterPost({list:t.TotalPost.slice(),tags:c});h.value=b.length,i.postList=t.filterPost({list:b,startIndex:n,endIndex:j})},r=this.getAllPostContent(),p=r.res;return Object(b["P"])((function(){if(p.value){var e=p.value.slice().filter((function(t){return t.date&&t.title}));t.TotalPost=t.sortPost(e),O(l?{tags:c}:{tags:c,endIndex:g["b"].PageSie})}})),Object(a["a"])({total:h,reloadList:O},Object(j["r"])(i))}},{key:"filterPost",value:function(t){var e=t.list,s=t.tags,c=void 0===s?[]:s,a=t.startIndex,n=void 0===a?0:a,l=t.endIndex,j=void 0===l?0:l,b=j||e.length,h=e.slice();return c&&c.length&&(h=e.filter((function(t){return(null===t||void 0===t?void 0:t.tags)&&Object(g["d"])(t.tags,c).length}))),h.slice(n,b)}},{key:"sortPost",value:function(t){var e=t.slice();return e.sort((function(t,e){var s,c,a=((null===(s=t.date)||void 0===s?void 0:s.replaceAll("-",""))||"").trim(),n=((null===(c=e.date)||void 0===c?void 0:c.replaceAll("-",""))||"").trim();return parseInt(n)-parseInt(a)})),e}},{key:"getAllPostPath",value:function(){var t=s("83f3");return t.keys()}},{key:"getAllPostContent",value:function(){var t=this;if(this.TotalPost.length){var e=Object(j["k"])([]);return e.value=this.TotalPost,{res:e}}var s=this.getAllPostPath();return Object(g["e"])(Promise.all(s.map(function(){var e=Object(c["a"])(regeneratorRuntime.mark((function e(s){var c,a;return regeneratorRuntime.wrap((function(e){while(1)switch(e.prev=e.next){case 0:return c=h["a"].getPostName(s),e.next=3,h["a"].getPostInfo(c);case 3:return a=e.sent,t.TotalPost.find((function(t){return t.name==c}))||t.TotalPost.push(a),e.abrupt("return",a);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())))}},{key:"getAllPostTag",value:function(){var t=[];return this.TotalPost.map((function(e){var s;null===e||void 0===e||null===(s=e.tags)||void 0===s||s.map((function(e){t.indexOf(e)<0&&t.push(e)}))})),t}}]),t}();e["a"]=new i},6237:function(t,e,s){},"62b5":function(t,e,s){"use strict";var c=s("d4ec"),a=s("bee2"),n=(s("159b"),s("ac1f"),s("466d"),s("5319"),s("99af"),s("d81d"),function(){function t(){Object(c["a"])(this,t),this.CatalogMaxLevels=3,this.CatalogList=[],this.CatalogOffset=null}return Object(a["a"])(t,[{key:"getCatalogOffset",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.CatalogOffset||t){var e=document.getElementById("js-catalog");this.CatalogOffset={left:(null===e||void 0===e?void 0:e.offsetLeft)||0,top:(null===e||void 0===e?void 0:e.offsetTop)||0,width:(null===e||void 0===e?void 0:e.offsetWidth)||0}}return this.CatalogOffset}},{key:"getCatalogHtml",value:function(){var t=this,e=this.getAllH(),s=[],c="";if(this.CatalogList=e,!e||!e.length)return c;e.forEach((function(e,a){var n=t.getHText(e),l=t.getHLabel(e),j=s.indexOf(l);if(j<0)s.length<t.CatalogMaxLevels&&(s.unshift(l),c+=t.addStartUl(),c+=t.addLi(n,a));else if(0===j)c+=t.addLi(n,a);else{while(j--)s.shift(),c+=t.addEndUl();c+=t.addLi(n,a)}}));while(s.length)s.shift(),c+=this.addEndUl();return c}},{key:"anchor",value:function(t){if("A"===(null===t||void 0===t?void 0:t.target.nodeName)){var e,s,c=null===(e=t.target.attributes)||void 0===e||null===(s=e.href)||void 0===s?void 0:s.value,a=c.substring(1,c.length),n=document.getElementById(a);n&&n.scrollIntoView({behavior:"smooth"})}}},{key:"getAllH",value:function(){var t=document.getElementById("js-markdown-body"),e=t.innerHTML.match(/<[hH][1-6](\s.*?)>.*?<\/[hH][1-6]>/g);return e}},{key:"getHLabel",value:function(t){var e,s=null===(e=t.match(/<\w+?(\s.*?)>/))||void 0===e?void 0:e[0];return s.replace(/id=\"(.*?)\"/,"").replaceAll(/\s/g,"")}},{key:"getHText",value:function(t){return t.replace(/<[^>]+>/g,"")}},{key:"addStartUl",value:function(){return'<ul class="catalog-list">'}},{key:"addEndUl",value:function(){return"</ul>\n"}},{key:"addLi",value:function(t,e){return'<li class="item"><a href="#heading-'.concat(e,'" title="').concat(t,'">').concat(t,"</a></li>\n")}},{key:"setHId",value:function(){var t=this;this.CatalogList&&this.CatalogList.map((function(e,s){for(var c=t.getHText(e),a=t.getHLabel(e),n=a.replace("<","").replace(">",""),l=document.getElementsByTagName(n),j=0;j<l.length;j++){var b=l[j];if((null===b||void 0===b?void 0:b.innerHTML)===c){var h="heading-".concat(s);b.setAttribute("id",h)}}}))}}]),t}());e["a"]=new n},"699a":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>上篇主要解释了如何从项目文件夹内读取文章，并解析文章的标题、时间、摘要等基本内容，渲染为文章列表，单项可以携带文章文件名跳转到文章内页。本篇主要解释在文章内页如何将Markdown渲染为Html，并抽取文章目录，实现文章锚点，本文主要用到的库是<a href="https://github.com/markedjs/marked">marked</a>，marked能够通过正则表达式将markdown文件解析为<code>html</code>文本。</p><p>博客源码github: <a href="https://github.com/zhangmingemma/zhangmingemma.github.io" target="_blank">博客仓库地址</a>，目录抽取的代码写在<code>CatalogHanlder.ts</code>中</p><h3>1. 文章html渲染</h3><p>首先获取单篇文章文本，处理思路有很多种，因为上篇我们已经解释了如何拿到文章文本，这里不做赘述：</p><ul><li>在<code>main.ts</code>中执行文章列表获取的方法，获得文章列表，存储全局数据，在文章内页通过文件名拿到当前文章的文本内容；</li><li>根据文章文件名，通过<code>axios</code>单独获取</li></ul><p>其次是将文本渲染为html：</p>',6),n=Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["g"])("使用"),Object(c["h"])("code",null,"marked"),Object(c["g"])("将markdown文本转换生成"),Object(c["h"])("code",null,"html"),Object(c["g"])("，在页面中通过"),Object(c["h"])("code",null,"v-html"),Object(c["g"])("标签引入即可。")])]),Object(c["h"])("li",null,[Object(c["h"])("p",null,[Object(c["g"])("再添加样式库让文章内容美观呈现，markdown格式化使用的样式库是"),Object(c["h"])("code",null,"github-markdown-css"),Object(c["g"])("，代码高亮使用的样式库是"),Object(c["h"])("code",null,"highlight.js"),Object(c["g"])("。如果代码仍旧不能高亮，需要在"),Object(c["h"])("code",null,"main.ts"),Object(c["g"])("中"),Object(c["h"])("code",null,"import 'highlight.js/styles/github.css'"),Object(c["g"])("，原因是Vue中"),Object(c["h"])("code",null,"v-html"),Object(c["g"])("中的"),Object(c["h"])("code",null,"html"),Object(c["g"])("文本只能应用全局样式")]),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"import"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-string"},"'github-markdown-css'"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-keyword"},"import"),Object(c["g"])(" hljs "),Object(c["h"])("span",{class:"hljs-keyword"},"from"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-string"},"'highlight.js'"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-keyword"},"import"),Object(c["g"])(" { useRoute } "),Object(c["h"])("span",{class:"hljs-keyword"},"from"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-string"},"'vue-router'"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" marked = "),Object(c["h"])("span",{class:"hljs-built_in"},"require"),Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-string"},"'marked'"),Object(c["g"])(")\n"),Object(c["h"])("span",{class:"hljs-keyword"},"import"),Object(c["g"])(" { defineComponent, Ref, watchEffect } "),Object(c["h"])("span",{class:"hljs-keyword"},"from"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-string"},"'@vue/runtime-core'"),Object(c["g"])("\n\n"),Object(c["h"])("span",{class:"hljs-comment"},"// marked需要设置一下高亮引用样式库，否则代码不会高亮"),Object(c["g"])("\nmarked.setOptions({\n    "),Object(c["h"])("span",{class:"hljs-attr"},"renderer"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-keyword"},"new"),Object(c["g"])(" marked.Renderer(),\n    "),Object(c["h"])("span",{class:"hljs-attr"},"gfm"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"true"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-comment"},"//默认为true。 允许 Git Hub标准的markdown."),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-attr"},"tables"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"true"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-comment"},"//默认为true。 允许支持表格语法。该选项要求 gfm 为true。"),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-attr"},"breaks"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"true"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-comment"},"//默认为false。 允许回车换行。该选项要求 gfm 为true。"),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-attr"},"pedantic"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"false"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-comment"},"//默认为false。 尽可能地兼容 markdown.pl的晦涩部分。不纠正原始模型任何的不良行为和错误。"),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-attr"},"smartLists"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"true"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"smartypants"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"true"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-comment"},"//使用更为时髦的标点，比如在引用语法中加入破折号。"),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-attr"},"highlight"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-keyword"},"function"),Object(c["g"])(" ("),Object(c["h"])("span",{class:"hljs-params"},"code:any"),Object(c["g"])(") ")]),Object(c["g"])("{\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" hljs.highlightAuto(code).value;\n    },\n});\n\n"),Object(c["h"])("span",{class:"hljs-keyword"},"export"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-keyword"},"default"),Object(c["g"])(" defineComponent({\n    setup() {\n        "),Object(c["h"])("span",{class:"hljs-comment"},"// 从路由参数中获取markdown文件名"),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" route = useRoute()\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" fileName = route.query.fileName\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" postHtml:Ref<string> = ref("),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(")\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" { res } = getPostInfo(fileName) "),Object(c["h"])("span",{class:"hljs-comment"},"// 获取单个文章文本"),Object(c["g"])("\n        \n        watchEffect("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"()"),Object(c["g"])(" =>")]),Object(c["g"])(" {\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (res.value) {\n                postHtml = marked(res.value)\n            }\n        })\n\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" {\n            postHtml\n        }\n    }\n})\n")])]),Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-comment"},"\x3c!-- 样式库定义为类名为markdown-body，所以这里markdown容器的类名必须有markdown-body --\x3e"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"markdown-body"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-html"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"postHtml"'),Object(c["g"])("/>")]),Object(c["g"])("\n")])])])],-1),l=Object(c["f"])('<h3>2. 文章目录抽取</h3><p>文章目录抽取的实现过程大致可以划分为三个步骤，第一步就是获取标题节点，得到标题树；第二步是根据标题树的标题等级、文本组成目录html；第三步就是展示目录实现锚点定位</p><h4>1) 获取标题节点</h4><p>获取标题节点的方式有两种</p><ul><li>第一种是基于<code>marked-ast</code>从AST语法树中抽取<code>heading</code>标签</li><li>第二种是从已渲染的文章<code>html</code>中根据正则规则抽取<code>h</code>标签，比较感兴趣的话可以移步这篇文章，讲解的还是很清楚的：<a href="https://juejin.cn/post/6844904007069089805" target="_blank">《实现一个掘金Style的markdown目录》</a>。</li></ul><p>这里我们主要讲解第一种从AST语法树中抽取标题节点。上篇<a href="https://zhangmingemma.github.io/#/post?file=2021-07-03-Blog%201">Vue3.0搭建博客 (一)：文章html渲染, 抽取目录</a>我们讲过如何使用<code>marked-ast</code>解析markdown文本为AST语法树，通过语法树可以拿到标题<code>type=heading</code>，level代表标题层级~~~</p>',6),j=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" getPostCatalog = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"markdownText:string"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" ast:object[] = markedAST.parse(markdownText.trim())\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" headingArr = ast.filter("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"astItem"),Object(c["g"])(" =>")]),Object(c["g"])(" astItem.type==="),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(")\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" headingArr\n}\n")])],-1),b=Object(c["h"])("p",null,"例如下面的标题列表",-1),h=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(c["h"])("span",{class:"hljs-section"},"## 标题1 "),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"### 标题1.1"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"#### 标题1.1.1"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"## 标题2"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"### 标题2.1"),Object(c["g"])("\n")])],-1),g=Object(c["h"])("p",null,"会抽析出结果",-1),i=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["g"])("[{\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"level"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"2"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'标题1'"),Object(c["g"])("]\n},{\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"level"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"3"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'标题1.1'"),Object(c["g"])("]\n},{\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"level"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"4"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'标题1.1.1'"),Object(c["g"])("]\n},{\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"level"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"2"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'标题2'"),Object(c["g"])("]\n},{\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"level"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"3"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'标题2.1'"),Object(c["g"])("]\n}]\n")])],-1),O=Object(c["h"])("h4",null,"2) 组合目录html",-1),r=Object(c["h"])("p",null,"拿到标题节点树之后，就可以组合目录html了",-1),p=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["g"])("getCatalogHtml(markdownText:string) {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" CatalogMaxLevels:number = "),Object(c["h"])("span",{class:"hljs-number"},"3"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-comment"},"// 我这里设置最多显示三层目录"),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" headingArr:IAst[] = getPostCatalog(markdownText)\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" levelStack:string[] = [] \n    "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" htmlResult:string = "),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])("(!headingArr || !headingArr.length) {\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" htmlResult\n    }\n    headingArr.forEach("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"item:IAst, index:number"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" itemText:string = item?.text?.["),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])("]\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" itemLabel:string = "),Object(c["h"])("span",{class:"hljs-string"},[Object(c["g"])("`h"),Object(c["h"])("span",{class:"hljs-subst"},"${item?.level}"),Object(c["g"])("`")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" levelIndex:number = levelStack.indexOf(itemLabel)\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (levelIndex < "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(" ) {\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (levelStack.length < CatalogMaxLevels) {\n                levelStack.unshift(itemLabel)\n                htmlResult += "),Object(c["h"])("span",{class:"hljs-keyword"},"this"),Object(c["g"])(".addStartUl()\n                htmlResult += "),Object(c["h"])("span",{class:"hljs-keyword"},"this"),Object(c["g"])(".addLi(itemText, index)\n            }\n        } \n        "),Object(c["h"])("span",{class:"hljs-keyword"},"else"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (levelIndex === "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(") {\n            htmlResult += "),Object(c["h"])("span",{class:"hljs-keyword"},"this"),Object(c["g"])(".addLi(itemText, index)\n        }\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"else"),Object(c["g"])(" {\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"while"),Object(c["g"])("(levelIndex--) {\n                levelStack.shift()\n                htmlResult += "),Object(c["h"])("span",{class:"hljs-keyword"},"this"),Object(c["g"])(".addEndUl()\n            }\n            htmlResult += "),Object(c["h"])("span",{class:"hljs-keyword"},"this"),Object(c["g"])(".addLi(itemText, index)\n        }\n    })\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"while"),Object(c["g"])("(levelStack.length) {\n        levelStack.shift()\n        htmlResult += "),Object(c["h"])("span",{class:"hljs-keyword"},"this"),Object(c["g"])(".addEndUl()\n    }\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" htmlResult\n}\n\n"),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" addStartUl = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"()"),Object(c["g"])(" =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-string"},'`<ul class="catalog-list">`'),Object(c["g"])("\n}\n\n"),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" addEndUl = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"()"),Object(c["g"])(" =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-string"},"`</ul>\\n`"),Object(c["g"])("\n}\n\n"),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" addLi = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"text:string, index:number"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-string"},[Object(c["g"])('`<li class="item"><a href="#heading-'),Object(c["h"])("span",{class:"hljs-subst"},"${index}"),Object(c["g"])('" title="'),Object(c["h"])("span",{class:"hljs-subst"},"${text}"),Object(c["g"])('">'),Object(c["h"])("span",{class:"hljs-subst"},"${text}"),Object(c["g"])("</a></li>\\n`")]),Object(c["g"])("\n}\n")])],-1),o=Object(c["h"])("p",null,"执行之后",-1),d=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(c["h"])("span",{class:"hljs-section"},"## 标题1 "),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"### 标题1.1"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"#### 标题1.1.1"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"## 标题2"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-section"},"### 标题2.1"),Object(c["g"])("\n")])],-1),u=Object(c["h"])("p",null,"上面的markdown文件，解析后获得的目录html会变成",-1),m=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"item"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"href"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"#heading-0"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"title"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"标题1"'),Object(c["g"])(">")]),Object(c["g"])("标题1"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"item"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"href"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"#heading-1"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"title"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"标题1.1"'),Object(c["g"])(">")]),Object(c["g"])("标题1.1"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(c["g"])(">")]),Object(c["g"])("\n            "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"item"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"href"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"#heading-2"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"title"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"标题1.1.1"'),Object(c["g"])(">")]),Object(c["g"])("标题1.1.1"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"item"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"href"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"#heading-3"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"title"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"标题2"'),Object(c["g"])(">")]),Object(c["g"])("标题2"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-list"'),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"item"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"href"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"#heading-4"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"title"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"标题2.1"'),Object(c["g"])(">")]),Object(c["g"])("标题2.1"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"li"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"ul"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),f=Object(c["h"])("p",null,"在页面中展示html，设置样式即可得到掘金样式的目录啦~我这里做了一个额外的处理，页面滚动的时候设置了目录吸顶。除此之外，博客的浏览场景大概率是PC Web，因此浏览器可视范围的尺寸改变，会影响到目录展示的位置，也需要监听窗口尺寸的改变，来修正目录吸顶时的展示位置。",-1),v=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"export"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-keyword"},"default"),Object(c["g"])(" defineComponent({\n    setup() {\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" route = useRoute()\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" router = useRouter()\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" fileName:any = route.query.file "),Object(c["h"])("span",{class:"hljs-comment"},"//从路由参数中拿到文章的文件名"),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" markdownText:string =  getSinglePost(fileName) "),Object(c["h"])("span",{class:"hljs-comment"},"// 获取单个文章的markdown文本"),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" isCatalogFixed = ref<boolean>("),Object(c["h"])("span",{class:"hljs-literal"},"false"),Object(c["g"])(")\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" catalogHtml = ref<string>("),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(")\n        catalogHtml.value = getCatalogHtml()\n\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" state = reactive({\n            "),Object(c["h"])("span",{class:"hljs-attr"},"CatalogOffset"),Object(c["g"])(":"),Object(c["h"])("span",{class:"hljs-literal"},"null"),Object(c["g"])(" | {\n                "),Object(c["h"])("span",{class:"hljs-attr"},"left"),Object(c["g"])(":number, \n                "),Object(c["h"])("span",{class:"hljs-attr"},"top"),Object(c["g"])(":number, \n                "),Object(c["h"])("span",{class:"hljs-attr"},"width"),Object(c["g"])(":number\n            } = "),Object(c["h"])("span",{class:"hljs-literal"},"null"),Object(c["g"])("\n        })\n        "),Object(c["h"])("span",{class:"hljs-built_in"},"window"),Object(c["g"])(".onresize = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"()"),Object(c["g"])(" =>")]),Object(c["g"])(" {\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" catalogEle:HTMLElement|"),Object(c["h"])("span",{class:"hljs-literal"},"null"),Object(c["g"])(" = "),Object(c["h"])("span",{class:"hljs-built_in"},"document"),Object(c["g"])(".getElementById("),Object(c["h"])("span",{class:"hljs-string"},"'js-catalog'"),Object(c["g"])(")\n            state.catalogOffset = {\n                "),Object(c["h"])("span",{class:"hljs-attr"},"left"),Object(c["g"])(": catalogEle?.offsetLeft || "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(",\n                "),Object(c["h"])("span",{class:"hljs-attr"},"top"),Object(c["g"])(": catalogEle?.offsetTop || "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(",\n                "),Object(c["h"])("span",{class:"hljs-attr"},"width"),Object(c["g"])(": catalogEle?.offsetWidth || "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])("\n            }\n        }\n        "),Object(c["h"])("span",{class:"hljs-built_in"},"window"),Object(c["g"])(".addEventListener("),Object(c["h"])("span",{class:"hljs-string"},"'scroll'"),Object(c["g"])(", ()=> {\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" pageY:number = "),Object(c["h"])("span",{class:"hljs-built_in"},"window"),Object(c["g"])(".pageYOffset\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" catalogEle:HTMLElement|"),Object(c["h"])("span",{class:"hljs-literal"},"null"),Object(c["g"])(" = "),Object(c["h"])("span",{class:"hljs-built_in"},"document"),Object(c["g"])(".getElementById("),Object(c["h"])("span",{class:"hljs-string"},"'js-catalog'"),Object(c["g"])(")\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" targetY:number = catalogEle?.offsetTop\n            isCatalogFixed.value = pageY > targetY\n        }, "),Object(c["h"])("span",{class:"hljs-literal"},"false"),Object(c["g"])(")\n\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" {\n            catalogHtml\n        }\n    }\n})\n")])],-1),y=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-comment"},"\x3c!--吸顶时占位--\x3e"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"post-catalog"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},"\"`${isCatalogFixed? 'js-catalog':''}`\""),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-if"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"isCatalogFixed && catalogHtml"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"`width:${catalogOffset.width}px`"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"post-catalog"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},"\"`${isCatalogFixed? '':'js-catalog'}`\""),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"{fixed: isCatalogFixed}"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":style"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},"\"`${isCatalogFixed ? 'left:'+catalogOffset.left+'px':''}`\""),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-if"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-title"'),Object(c["g"])(">")]),Object(c["g"])("目录"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-body"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-html"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"@click.prevent"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"anchor($event)"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),k=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-scss"},[Object(c["h"])("span",{class:"hljs-selector-class"},".post-catalog"),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"max-width"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$aside-width"),Object(c["g"])(";\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"box-sizing"),Object(c["g"])(": border-box;\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"flex-shrink"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"padding-left"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"4.5rem"),Object(c["g"])(";\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"padding-top"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"2rem"),Object(c["g"])(";\n    &"),Object(c["h"])("span",{class:"hljs-selector-class"},".fixed"),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"position"),Object(c["g"])(": fixed;\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"z-index"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"2"),Object(c["g"])(";\n        -webkit-"),Object(c["h"])("span",{class:"hljs-attribute"},"font"),Object(c["g"])("-smoothing: subpixel-antialiased;\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"top"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"left"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"969px"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"padding-top"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"2rem"),Object(c["g"])(";\n    }\n    "),Object(c["h"])("span",{class:"hljs-selector-class"},".catalog-title"),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"font-size"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$font-size-h1-excerpt"),Object(c["g"])(";\n    }\n    "),Object(c["h"])("span",{class:"hljs-selector-class"},".catalog-body"),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"margin"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"1rem"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n    }\n}\n"),Object(c["h"])("span",{class:"hljs-comment"},"// catalog-list为v-html模板中的样式，因此需要定义为全局样式"),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"position"),Object(c["g"])(": relative;\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"padding"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"margin"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n    @include before-line();\n    "),Object(c["h"])("span",{class:"hljs-selector-class"},".item"),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"margin"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"padding"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"font-size"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$font-size-h1-excerpt"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"line-height"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$line-height"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"list-style"),Object(c["g"])(": none;\n        "),Object(c["h"])("span",{class:"hljs-selector-tag"},"a"),Object(c["g"])(" {\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"text-decoration"),Object(c["g"])(": none;\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"color"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$font-dark-grey"),Object(c["g"])(";\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"font-weight"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$font-weight-bold"),Object(c["g"])(";\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"margin"),Object(c["g"])(": ."),Object(c["h"])("span",{class:"hljs-number"},"4rem"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"padding"),Object(c["g"])(": ."),Object(c["h"])("span",{class:"hljs-number"},"2rem"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(" ."),Object(c["h"])("span",{class:"hljs-number"},"2rem"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-number"},"1.3rem"),Object(c["g"])(";\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"display"),Object(c["g"])(": block;\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"position"),Object(c["g"])(": relative;\n            @include singleLine;\n            @include item-dot(6px, 50%);\n            &"),Object(c["h"])("span",{class:"hljs-selector-pseudo"},":hover"),Object(c["g"])(" {\n                "),Object(c["h"])("span",{class:"hljs-attribute"},"background"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(c["g"])(";\n                "),Object(c["h"])("span",{class:"hljs-attribute"},"border-radius"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"3px"),Object(c["g"])(";\n            }\n            &"),Object(c["h"])("span",{class:"hljs-selector-pseudo"},":active"),Object(c["g"])(", &"),Object(c["h"])("span",{class:"hljs-selector-pseudo"},":focus"),Object(c["g"])(" {\n                "),Object(c["h"])("span",{class:"hljs-attribute"},"color"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$link-red"),Object(c["g"])(";\n                "),Object(c["h"])("span",{class:"hljs-attribute"},"background"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(c["g"])(";\n                "),Object(c["h"])("span",{class:"hljs-attribute"},"border-radius"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"3px"),Object(c["g"])(";\n            }\n        }\n    }\n\n    "),Object(c["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"margin-left"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"2rem"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-selector-tag"},"a"),Object(c["g"])(" {\n            @include item-dot(5px, 0);\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"font-weight"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$font-weight"),Object(c["g"])(";\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"font-size"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$font-size-h3-excerpt"),Object(c["g"])(";\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"margin"),Object(c["g"])(": ."),Object(c["h"])("span",{class:"hljs-number"},"1rem"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"padding"),Object(c["g"])(": ."),Object(c["h"])("span",{class:"hljs-number"},"1rem"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(" ."),Object(c["h"])("span",{class:"hljs-number"},"1rem"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-number"},"1.3rem"),Object(c["g"])(";\n        }\n    }\n\n    "),Object(c["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-selector-class"},".catalog-list"),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-selector-tag"},"a"),Object(c["g"])(" {\n            @include item-dot(5px, 50%);\n            "),Object(c["h"])("span",{class:"hljs-attribute"},"font-size"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$font-size-h5-excerpt"),Object(c["g"])(";\n        }\n    }\n}\n")])],-1),w=Object(c["h"])("p",null,"样式中有用到一些混入和变量",-1),x=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-scss"},[Object(c["h"])("span",{class:"hljs-variable"},"$font-size-h1-excerpt"),Object(c["g"])(":   "),Object(c["h"])("span",{class:"hljs-number"},"1rem"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$font-size-h3-excerpt"),Object(c["g"])(":   ."),Object(c["h"])("span",{class:"hljs-number"},"95rem"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$font-size-h5-excerpt"),Object(c["g"])(":   ."),Object(c["h"])("span",{class:"hljs-number"},"9rem"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$line-height"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"1.6"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$font-weight"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"400"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$font-weight-bold"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"600"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$font-dark-grey"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"#333"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$link-red"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"#fc4d50"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"#f2f3f4"),Object(c["g"])(";\n"),Object(c["h"])("span",{class:"hljs-variable"},"$aside-width"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"310px"),Object(c["g"])(";\n@mixin singleLine() {\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"white-space"),Object(c["g"])(": nowrap;\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"text-overflow"),Object(c["g"])(": ellipsis;\n    "),Object(c["h"])("span",{class:"hljs-attribute"},"overflow"),Object(c["g"])(": hidden;\n}\n@mixin item-dot("),Object(c["h"])("span",{class:"hljs-variable"},"$size"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-variable"},"$border-radius"),Object(c["g"])(":"),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-variable"},"$left"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"5px"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-variable"},"$top"),Object(c["g"])(":"),Object(c["h"])("span",{class:"hljs-number"},"50%"),Object(c["g"])(") {\n    &::before {\n        content: "),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"position"),Object(c["g"])(": absolute;\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"top"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$top"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"left"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$left"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"margin-top"),Object(c["g"])(": -#{"),Object(c["h"])("span",{class:"hljs-variable"},"$size"),Object(c["g"])("}/"),Object(c["h"])("span",{class:"hljs-number"},"2"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"width"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$size"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"height"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$size"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"background"),Object(c["g"])(": currentColor;\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"border-radius"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$border-radius"),Object(c["g"])(";\n    }\n}\n@mixin before-line("),Object(c["h"])("span",{class:"hljs-variable"},"$color"),Object(c["g"])(":"),Object(c["h"])("span",{class:"hljs-variable"},"$line-catalog-grey"),Object(c["g"])(") {\n    &::before {\n        content: "),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"position"),Object(c["g"])(": absolute;\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"top"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"left"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"7px"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"bottom"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"width"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"2px"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"background"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-variable"},"$color"),Object(c["g"])(";\n        "),Object(c["h"])("span",{class:"hljs-attribute"},"opacity"),Object(c["g"])(": ."),Object(c["h"])("span",{class:"hljs-number"},"5"),Object(c["g"])(";\n    } \n}\n")])],-1),P=Object(c["f"])("<h4>3) 目录锚定页面</h4><p>目录锚定页面其实基于的原理就是<code>&lt;a href=&quot;#id1&quot;&gt;text&lt;/a&gt;</code>中的<code>href</code>为标题行的<code>id</code>，如<code>&lt;h1 id=&quot;id1&quot;&gt;text&lt;/h1&gt;</code>。基于<code>marked</code>渲染的markdown页面，标题的h标签都携带了<code>id</code>属性，为标题文本，这样会存在一个问题，当标题文本包含特殊标点符号的时候，例如我们常用的<code>1. 标题</code>这种类型，会导致锚定失效。我们在上一节已经在生成目录html的时候，设定了单行目录为<code>&lt;a href=&quot;#heading-2&quot; title=&quot;标题1.1.1&quot;&gt;标题1.1.1&lt;/a&gt;</code>，只需要在对应的标题行修正<code>id=heading-index</code>的样式即可。</p><ul><li>修正h标签id</li></ul>",3),T=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" setHId = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"markdownText:string"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" headingArr:IAst[] = getPostCatalog(markdownText)\n    headingArr.map("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"item:IAst, index:number"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" itemText:string = item?.text?.["),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])("]\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" tagEle = "),Object(c["h"])("span",{class:"hljs-built_in"},"document"),Object(c["g"])(".getElementById(itemText)\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (tagEle) {\n            tagEle.setAttribute("),Object(c["h"])("span",{class:"hljs-string"},"'id'"),Object(c["g"])(", id)\n        }\n    })\n}\n")])],-1),I=Object(c["h"])("ul",null,[Object(c["h"])("li",null,[Object(c["g"])("vue-router环境下锚定冲突处理 处理完"),Object(c["h"])("code",null,"h"),Object(c["g"])("标签的id之后，实际发现，并不能够锚定，原因是锚定会与vue-router的路由跳转冲突，需要手动处理锚定跳转。上一节目录页面中我们已经为目录绑定了"),Object(c["h"])("code",null,"anchor"),Object(c["g"])("事件。")])],-1),C=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"post-catalog"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"{hide: isCatalogFixed}"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"id"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"js-catalog"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-if"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-title"'),Object(c["g"])(">")]),Object(c["g"])("目录"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalog-body"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-html"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"catalogHtml"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"@click.prevent"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"anchor($event)"'),Object(c["g"])(">")]),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),A=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["g"])("anchor(event:any) {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])("(event?.target.nodeName === "),Object(c["h"])("span",{class:"hljs-string"},"'A'"),Object(c["g"])(") {\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" href:string = event.target.attributes?.href?.value\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" anchorName:string = href.substring("),Object(c["h"])("span",{class:"hljs-number"},"1"),Object(c["g"])(", href.length)\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" anchorEle = "),Object(c["h"])("span",{class:"hljs-built_in"},"document"),Object(c["g"])(".getElementById(anchorName)\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" ( anchorEle ) {\n            anchorEle.scrollIntoView({"),Object(c["h"])("span",{class:"hljs-attr"},"behavior"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},'"smooth"'),Object(c["g"])("})\n        }\n    }\n}\n")])],-1),S=Object(c["h"])("p",null,"至此，可以锚定的目录就已经做好啦~~~",-1),z=Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2021-07-04/2.jpg",style:{border:"1px solid #ededed"}},null,-1);function N(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n,l,j,b,h,g,i,O,r,p,o,d,u,m,f,v,y,k,w,x,P,T,I,C,A,S,z])}const F={};F.render=N;e["default"]=F},"6a7c":function(t,e,s){},"7e5f":function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>GeoServer是 OpenGIS Web 服务器规范的 J2EE 实现，利用 GeoServer 可以方便的发布地图数据，允许用户对特征数据进行更新、删除、插入操作，通过 GeoServer 可以比较容易的在用户之间迅速共享空间地理信息。它兼容 WMS 和 WFS 特性；支持 PostgreSQL、 Shapefile 、 ArcSDE 、 Oracle 、 VPF 、 MySQL 、 MapInfo ；支持上百种投影；能够将网络地图输出为 jpeg 、 gif 、 png 、 SVG 、 KML 等格式；能够运行在任何基于 J2EE/Servlet 容器之上；嵌入 MapBuilder 支持 AJAX 的地图客户端OpenLayers；除此之外还包括许多其他的特性。</p><p><strong>JAVA环境安装配置</strong></p><ul><li><p>GeoServer需要JAVA环境，所以需要先安装<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank">JAVA JDK,比如本文下载的是8u152_x64</a>,这里我的安装路径为系统默认的C:\\Program Files\\Java <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20170831image1.png" alt> 安装之后会存在两个文件包分别是JDK的文件包和JRE的文件包</p></li><li><p>接下来为重要的环境变量配置！！！奉上一个<a href="http://blog.csdn.net/tiantang_1986/article/details/53894947" target="_blank">环境配置链接</a></p></li></ul><p>其中需要设置的环境变量为</p>',4),n=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":""},"JAVA_HOME：C:\\Program Files\\Java\\jre1.8.0_152\nCLASSPATH: .;%JAVA_HOME%\\jdk1.8.0_152\\lib\nPath: %JAVA_HOME%\\jdk1.8.0_152\\bin\n")],-1),l=Object(c["f"])('<ul><li>cmd命令输入java -version如果出现对应版本号，说明配置成功</li></ul><p><strong>GeoServer安装</strong></p><ul><li><p>首先下载，Stable版本的GeoServer无需安装TomCat等服务器，如果想要用TomCat来运行的话，选择下载Web Archive。<a href="http://geoserver.org/download/" target="_blank">GeoServer——Stable</a><img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20170831image2.png" alt></p></li><li><p>安装过程中就按照指令一步步安装就好了，其中需要注意的有：</p></li></ul><p>(1)首先，JRE的路径选择，JRE的路径为上文提到的C:\\Program Files\\Java下的C:\\Program Files\\Java\\jre1.8.0_144 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20170831image3.png" alt></p><p>(2)其次，GeoServer运行端口的选择，以及登录名和密码的设置</p><ul><li>以上都完成了之后，Start GeoServer，成功运行之后，浏览器打开http://localhost:7070/geoserver/web/，输入用户名密码之后便可操作</li></ul><p><strong>利用GeoServer发布WMS</strong></p><ul><li>新建工作区 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image1.png" alt></li></ul><p>命名工作区 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image2.png" alt></p><ul><li>新建数据存储， <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image3.png" alt></li></ul><p>这里选择的是shp文件 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image4.png" alt></p><p>发布该数据 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image5.png" alt></p><p>设置投影，并计算经纬度包围盒 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image6.png" alt></p><ul><li><p>新建样式，这里选择的是sld文件 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image7.png" alt></p></li><li><p>预览图层 <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image8.png" alt></p></li></ul><p>输入样式名，显示对应样式下的WMS <img src="https://zhangmingemma.github.io/dist/images/2017-08-31/20171130image9.png" alt></p>',15);function j(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n,l])}const b={};b.render=j;e["default"]=b},"83f3":function(t,e,s){var c={"./2016-11-20-Cluster Paper Reading.md":"2863","./2016-12-03-Text Categorization Summary.md":"dda5","./2017-03-29-Python NLTK.md":"4ddc","./2017-08-31-Geoserver.md":"7e5f","./2019-07-16-Miniprogram Plugin.md":"32d2","./2021-07-03-Blog1.md":"9379","./2021-07-04-Blog2.md":"699a","./2021-07-05-Blog3.md":"3af7","./2022-10-11-BFC.md":"44f1","./2022-10-12-Box.md":"0f04","./2022-10-13-OSI.md":"da8c","./2022-10-15-TCP-UDP.md":"deab","./2022-10-16-DNS.md":"a7cc","./2022-10-17-HTTP.md":"0ed1"};function a(t){var e=n(t);return s(e)}function n(t){if(!s.o(c,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return c[t]}a.keys=function(){return Object.keys(c)},a.resolve=n,t.exports=a,a.id="83f3"},9379:function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>之前的博客是用jekyll写的，总觉得用起来很不顺手，所以重构了一遍，用vue3来写博客，没有后台，文章存储在项目文件夹内，逻辑简单。之所以没有用VuePress、Jekyll之类的模板，是为了更多能力能够自己定制，也是拿Vue3.0来练手一个项目。本篇主要讲解第一部分，从项目文件夹内读取文章列表，并抽析单篇文章的标题、时间戳、标签、摘要等信息，作为首页文章列表展示。</p><p>博客源码github: <a href="https://github.com/zhangmingemma/zhangmingemma.github.io" target="_blank">博客仓库地址</a>，读取列表的代码写在<code>ListHanlder.ts</code>中，文章标题解析写在<code>PostHandler.ts</code>中</p><h3>1. 获取文章列表</h3><p>我们封装一个整体的函数来获取文章列表信息，先用<code>require.context</code>获得文件夹内的文章列表文件名；再通过<code>axios</code> 来发起请求，获取本地文件，拿到Markdown文件的文本内容；最后通过函数<code>getPostInfo</code>解析获得单篇文章的基本信息。</p>',4),n=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" getAllPostContent = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"()"),Object(c["g"])(" =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" state = reactive({\n        "),Object(c["h"])("span",{class:"hljs-attr"},"postList"),Object(c["g"])(": [] "),Object(c["h"])("span",{class:"hljs-keyword"},"as"),Object(c["g"])(" IPost[]\n    })\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" files = "),Object(c["h"])("span",{class:"hljs-built_in"},"require"),Object(c["g"])(".context("),Object(c["h"])("span",{class:"hljs-string"},'"../../../public/posts"'),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-literal"},"true"),Object(c["g"])(", /\\.md/)\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (files && files.length) {\n        "),Object(c["h"])("span",{class:"hljs-built_in"},"Promise"),Object(c["g"])(".all(files.keys().map("),Object(c["h"])("span",{class:"hljs-keyword"},"async"),Object(c["g"])(" (path:string) => {\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" paths:string[] = path.split("),Object(c["h"])("span",{class:"hljs-string"},"'/'"),Object(c["g"])(")\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" fileName:string = paths.pop()!.replace("),Object(c["h"])("span",{class:"hljs-regexp"},"/\\.\\w+$/"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(")\n            "),Object(c["h"])("span",{class:"hljs-comment"},"// 博客部署到github后，访问的是域名根目录，因此这里需要重新定义线上环境访问dist/posts"),Object(c["g"])("\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" baseUrl:string = process.env.NODE_ENV === "),Object(c["h"])("span",{class:"hljs-string"},'"production"'),Object(c["g"])(" ? "),Object(c["h"])("span",{class:"hljs-string"},'"./dist/posts"'),Object(c["g"])(" : "),Object(c["h"])("span",{class:"hljs-string"},'"./posts"'),Object(c["g"])(" \n            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" info:IPost = "),Object(c["h"])("span",{class:"hljs-keyword"},"await"),Object(c["g"])(" getSinglePost(fileName)\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" info\n        })).then("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"res"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n            state.postList = res\n        })\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" {\n            ...toRefs(state)\n        }\n    }\n}\n"),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" getSinglePost = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"fileName:string"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" post:AxiosResponse = "),Object(c["h"])("span",{class:"hljs-keyword"},"await"),Object(c["g"])(" axios.get("),Object(c["h"])("span",{class:"hljs-string"},[Object(c["g"])("`"),Object(c["h"])("span",{class:"hljs-subst"},"${getPostPath()}"),Object(c["g"])("/"),Object(c["h"])("span",{class:"hljs-subst"},"${fileName}"),Object(c["g"])(".md`")]),Object(c["g"])(")\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" info:IPost = getPostInfo(post.data)\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" info\n}\n")])],-1),l=Object(c["f"])("<p>关于Markdown的文件路径，有两点需要注意：</p><ul><li>Vue仅把 <code>public</code> 路径下的文件当做对外公开的目录，因此markdown文件必须要放在 <code>public</code> 文件夹下， <code>axios</code> 访问的文件根目录就是<code>public</code>。我这里所有的Markdown文件都放在了<code>public/posts</code>文件夹内。</li><li>博客<code>build</code>之后，<code>public</code>内的文件都会编译到<code>dist</code>文件夹内，部署到线上后，<code>axios</code>访问的根目录即项目文件，文章会访问不到。因此这里需要定义一下线上环境和生产环境的基础路径，线上为<code>./dist/posts</code>。</li></ul><h3>2. 解析文章标题、时间戳、标签</h3><p>首先，我们需要在markdown文件头部按照既定格式定义好标题、时间戳、标签，并注释掉，避免在文章渲染时将这些内容渲染出来</p>",4),j=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(c["h"])("span",{class:"xml"},[Object(c["h"])("span",{class:"hljs-comment"},"\x3c!-- ---\ntitle: Test Title\ndate: 2016-11-20 \ntags: Vue3.0, Javascript\n--- --\x3e")]),Object(c["g"])("\n\n"),Object(c["h"])("span",{class:"hljs-section"},"### 标题1"),Object(c["g"])("\n内容1\n\n"),Object(c["h"])("span",{class:"hljs-section"},"### 标题2"),Object(c["g"])("\n内容2\n")])],-1),b=Object(c["h"])("p",null,"接下来要做的就是用正则规则把头部的内容提取出来了",-1),h=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" getPostInfo = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"data:string, fileName:string"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (!data) "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" {}\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" info:IPost = { "),Object(c["h"])("span",{class:"hljs-attr"},"name"),Object(c["g"])(": fileName }\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" content:string = data.split("),Object(c["h"])("span",{class:"hljs-string"},"'\\n'"),Object(c["g"])(").map("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"s"),Object(c["g"])(" =>")]),Object(c["g"])(" s.trim()).join("),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(")\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" layout:RegExpMatchArray|"),Object(c["h"])("span",{class:"hljs-literal"},"null"),Object(c["g"])(" = content.match("),Object(c["h"])("span",{class:"hljs-regexp"},"/-+title: (.*?)date: (.*?)tags: (.*?)-+/"),Object(c["g"])(")\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (layout && layout.length >= "),Object(c["h"])("span",{class:"hljs-number"},"4"),Object(c["g"])(") {\n        info["),Object(c["h"])("span",{class:"hljs-string"},"'title'"),Object(c["g"])("] = layout["),Object(c["h"])("span",{class:"hljs-number"},"1"),Object(c["g"])("]\n        info["),Object(c["h"])("span",{class:"hljs-string"},"'date'"),Object(c["g"])("] = layout["),Object(c["h"])("span",{class:"hljs-number"},"2"),Object(c["g"])("]\n        info["),Object(c["h"])("span",{class:"hljs-string"},"'tags'"),Object(c["g"])("] = layout["),Object(c["h"])("span",{class:"hljs-number"},"3"),Object(c["g"])("].split("),Object(c["h"])("span",{class:"hljs-string"},"','"),Object(c["g"])(").map("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"s"),Object(c["g"])(" =>")]),Object(c["g"])(" s.trim())\n    }\n    "),Object(c["h"])("span",{class:"hljs-comment"},"// 解析文章摘要"),Object(c["g"])("\n    info["),Object(c["h"])("span",{class:"hljs-string"},"'abstract'"),Object(c["g"])("] = getPostAbstract(data)\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" info\n}\n")])],-1),g=Object(c["f"])('<h3>3. 解析文章摘要</h3><p>解析文章摘要主要用到的库是<a href="https://github.com/pdubroy/marked-ast" target="_blank">marked-ast</a>,它能够通过正则表达式将文章转换为AST语法树，文本类型包含<code>list</code>、<code>heading</code>、<code>paragraph</code>、<code>code</code>、<code>blockquote</code>等</p><blockquote><p>引用内容</p></blockquote>',3),i=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-markdown"},[Object(c["h"])("span",{class:"hljs-section"},"### 标题1"),Object(c["g"])("\n文本内容\n"),Object(c["h"])("span",{class:"hljs-bullet"},"* "),Object(c["g"])("条目1\n\nconst a = 1 //代码块\n"),Object(c["h"])("span",{class:"hljs-quote"},"> 引用内容"),Object(c["g"])("\n")])],-1),O=Object(c["h"])("p",null,[Object(c["h"])("code",null,"marked-ast"),Object(c["g"])("解析后的AST语法树变成")],-1),r=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["g"])("[{\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'标题1'"),Object(c["g"])("],\n    "),Object(c["h"])("span",{class:"hljs-attr"},"level"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"3"),Object(c["g"])("\n}, {\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'paragraph'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'文本内容'"),Object(c["g"])("]\n}, {\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'list'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"ordered"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-literal"},"false"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"body"),Object(c["g"])(": [{\n        "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'listitem'"),Object(c["g"])(",\n        "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'条目1'"),Object(c["g"])("]\n    }]\n}, {\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'code'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"code"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'const a = 1'"),Object(c["g"])("\n}, {\n    "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'blockquote'"),Object(c["g"])(",\n    "),Object(c["h"])("span",{class:"hljs-attr"},"quote"),Object(c["g"])(": [{\n        "),Object(c["h"])("span",{class:"hljs-attr"},"type"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'paragraph'"),Object(c["g"])(",\n        "),Object(c["h"])("span",{class:"hljs-attr"},"text"),Object(c["g"])(": ["),Object(c["h"])("span",{class:"hljs-string"},"'引用内容'"),Object(c["g"])("]\n    }]\n}]\n")])],-1),p=Object(c["h"])("p",null,"整理清楚之后，抽取摘要就非常容易了，我这里摘要限制500字，摘要内不展示代码，你也可以按照你的要求去解析语法树。",-1),o=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" markedAST = "),Object(c["h"])("span",{class:"hljs-built_in"},"require"),Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-string"},"'marked-ast'"),Object(c["g"])(")\n"),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" getPostAbstract = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"text:string"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" ast:object[] = markedAST.parse(text.trim())\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" abstract:string = parseMarkAst(ast).slice("),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-number"},"500"),Object(c["g"])(")\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" abstract\n}\n\n"),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" parseMarkAst = "),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"ast:IAst[]"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"let"),Object(c["g"])(" result:string = "),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (ast && ast.length) {\n        ast.map("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"astItem:IAst"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n            "),Object(c["h"])("span",{class:"hljs-comment"},"// 解析平铺的文本段落"),Object(c["g"])("\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (["),Object(c["h"])("span",{class:"hljs-string"},"'paragraph'"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-string"},"'heading'"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-string"},"'strong'"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-string"},"'em'"),Object(c["g"])("].indexOf(astItem.type) >= "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(") {\n                "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (astItem.text && astItem.text.length) {\n                    astItem.text.map("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"textItem:IAst"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n                        "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" ("),Object(c["h"])("span",{class:"hljs-keyword"},"typeof"),Object(c["g"])(" textItem === "),Object(c["h"])("span",{class:"hljs-string"},"'string'"),Object(c["g"])(") {\n                            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" noSpaceText = text.replaceAll("),Object(c["h"])("span",{class:"hljs-string"},"'\\n'"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(").trim()\n                            result += noSpaceText.replace("),Object(c["h"])("span",{class:"hljs-regexp"},"/<[^>]+>/g"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-string"},"' '"),Object(c["g"])(")\n                        } "),Object(c["h"])("span",{class:"hljs-keyword"},"else"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" ("),Object(c["h"])("span",{class:"hljs-keyword"},"typeof"),Object(c["g"])(" textItem === "),Object(c["h"])("span",{class:"hljs-string"},"'object'"),Object(c["g"])(") {\n                            "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" text = textItem?.text?.["),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])("]\n                            "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])("( text && "),Object(c["h"])("span",{class:"hljs-keyword"},"typeof"),Object(c["g"])(" text === "),Object(c["h"])("span",{class:"hljs-string"},"'string'"),Object(c["g"])(") {\n                                result += text.replaceAll("),Object(c["h"])("span",{class:"hljs-string"},"'\\n'"),Object(c["g"])(","),Object(c["h"])("span",{class:"hljs-string"},"''"),Object(c["g"])(").trim()\n                            }\n                        }\n                    })\n                }\n            }\n            "),Object(c["h"])("span",{class:"hljs-comment"},"// 解析嵌套列表"),Object(c["g"])("\n            "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (astItem.type === "),Object(c["h"])("span",{class:"hljs-string"},"'list'"),Object(c["g"])(" && astItem.body && astItem.body.length) {\n                astItem.body.map("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["g"])("("),Object(c["h"])("span",{class:"hljs-params"},"listItem:IAst"),Object(c["g"])(") =>")]),Object(c["g"])(" {\n                    "),Object(c["h"])("span",{class:"hljs-keyword"},"if"),Object(c["g"])(" (listItem.type === "),Object(c["h"])("span",{class:"hljs-string"},"'listitem'"),Object(c["g"])(") {\n                        result += parseMarkAst(astItem)\n                    }\n                })\n            } \n        })\n    }\n    "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" result\n}\n")])],-1),d=Object(c["h"])("p",null,[Object(c["g"])("最终我们就可以获得摘要啦，图片展示的便是文件夹内的文章列表，抽取标题、时间戳、标签之后渲染为文章列表，进一步抽取摘要后渲染首页文章Block展示的效果~~~ "),Object(c["h"])("img",{src:"https://zhangmingemma.github.io/dist/images/2021-07-03/1.png",alt:""}),Object(c["g"])(" 以首页文章Block的展示为例")],-1),u=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-html"},[Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"template"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-for"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"(post, index) in postList"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":key"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"index"'),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"article"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-if"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"post"'),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"h1"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"@click"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"tapPost(post.name)"'),Object(c["g"])(">")]),Object(c["g"])("{{post.title}}"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"h1"),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"abstract"'),Object(c["g"])(">")]),Object(c["g"])("{{post.abstract}}"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"@click"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"tapPost(post.name)"'),Object(c["g"])(">")]),Object(c["g"])("点我阅读更多..."),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"a"),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"footer"'),Object(c["g"])(">")]),Object(c["g"])("\n            "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"footer-tags"'),Object(c["g"])(">")]),Object(c["g"])("\n                "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"class"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"blog-tag"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},"v-for"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"tag in post.tags"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":key"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"tag"'),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-attr"},":tag"),Object(c["g"])("="),Object(c["h"])("span",{class:"hljs-string"},'"tag"'),Object(c["g"])(">")]),Object(c["g"])("{{tag}}"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n            "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n            "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("<"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("{{post.date}}"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"span"),Object(c["g"])(">")]),Object(c["g"])("\n        "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"div"),Object(c["g"])(">")]),Object(c["g"])("\n    "),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"article"),Object(c["g"])(">")]),Object(c["g"])("\n"),Object(c["h"])("span",{class:"hljs-tag"},[Object(c["g"])("</"),Object(c["h"])("span",{class:"hljs-name"},"template"),Object(c["g"])(">")]),Object(c["g"])("\n")])],-1),m=Object(c["h"])("pre",null,[Object(c["h"])("code",{"v-pre":"",class:"language-javascript"},[Object(c["h"])("span",{class:"hljs-keyword"},"export"),Object(c["g"])(),Object(c["h"])("span",{class:"hljs-keyword"},"default"),Object(c["g"])(" defineComponent({\n    setup() {\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" router = useRouter()\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" listHandler = getAllPostContent()\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"const"),Object(c["g"])(" tapPost = (name:string) {\n            setTimeout("),Object(c["h"])("span",{class:"hljs-function"},[Object(c["h"])("span",{class:"hljs-params"},"()"),Object(c["g"])(" =>")]),Object(c["g"])(" {\n                "),Object(c["h"])("span",{class:"hljs-built_in"},"window"),Object(c["g"])(".scrollTo({ "),Object(c["h"])("span",{class:"hljs-attr"},"top"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-number"},"0"),Object(c["g"])(", "),Object(c["h"])("span",{class:"hljs-attr"},"behavior"),Object(c["g"])(": "),Object(c["h"])("span",{class:"hljs-string"},"'smooth'"),Object(c["g"])("})\n            })\n            router.push("),Object(c["h"])("span",{class:"hljs-string"},[Object(c["g"])("`/post?file="),Object(c["h"])("span",{class:"hljs-subst"},"${name}"),Object(c["g"])("`")]),Object(c["g"])(")\n        }\n        "),Object(c["h"])("span",{class:"hljs-keyword"},"return"),Object(c["g"])(" {\n            ...listHandler\n        }\n    }\n})\n")])],-1);function f(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a,n,l,j,b,h,g,i,O,r,p,o,d,u,m])}const v={};v.render=f;e["default"]=v},a7bb:function(t,e,s){"use strict";s.d(e,"a",(function(){return a})),s.d(e,"b",(function(){return n})),s.d(e,"e",(function(){return l})),s.d(e,"f",(function(){return j})),s.d(e,"d",(function(){return b})),s.d(e,"c",(function(){return h}));s("4de4");var c=s("a1e9"),a={ClientID:"f2fc4c018508a76889b4",ClientSecret:"c61f4feab775f95de8af0e4e215e1a5b2b54707c",Repo:"zhangmingemma.github.io",Owner:"zhangmingemma"},n={PageSie:5},l=function(t){var e=Object(c["k"])(null);return t.then((function(t){e.value=t})),{res:e}},j=function(){setTimeout((function(){window.scrollTo({top:0,behavior:"smooth"})}))},b=function(t,e){return t instanceof Array&&e instanceof Array&&t.filter((function(t){return e.indexOf(t)>=0}))||[]},h=function(){return"./dist/posts"}},a7cc:function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>因特网采用层次树状结构命名，任何一个连接在因特网上的主机或者路由器，都有一个唯一的层次结构的名字，即域名。从语法上讲，每个域名都是由标号序列组成，而各标号之间用&quot;.&quot;隔开。例如下面的域名由三个标号组成，其中标号com是顶级域名，标号cctv是二级域名，标号mail是三级域名。标号不得超过63个字符，也不区分大小写，总域名不超过255个字符。各级标号域名由上一级的域名管理机构管理，顶级域名由ICANN管理</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/1.jpeg" style="display:inline-block;margin-bottom:16px;width:300px;"></div><p>因特网上的DNS域名服务器也是按照层次结构安排的，一个域名服务器都只对域名体系中的一部分进行管辖。每个域名服务器一般都会做数据备份，有一个主域名服务器，若干辅助域名服务器。根据域名服务器所起的作用，可以把域名服务器划分为：</p><ol><li>根域名服务器：层次最高的域名服务器，也是最重要的域名服务器，所有根域名服务器都知道顶级域名服务器的域名和IP地址。如果因特网上任何一个域名无法解析时，就会求助于根域名服务器。目前全球有a.rootservers,net ~ m.rootservers.net 13个跟域名服务器，对应无数台机器，分布在全球很多地方。很多根域名服务器在查询过程中，并不会将IP地址直接返回，而是告诉本地域名服务器下一步的顶级域名服务器是哪一个。</li><li>顶级域名服务器：负责管理在该项域名下所有的二级域名，当收到DNS查询时，给出响应的回答，可能是IP地址，也可能是下一步应该找的域名服务器的IP地址</li><li>权限域名服务器：当收到DNS查询时，给出响应的回答，可能是IP地址，也可能是下一步应该找的域名服务器的IP地址</li><li>本地域名服务器：并不属于上面图片中的域名服务器层次结构，但当一个主机发出DNS请求时，这个查询请求报文就发送给本地域名服务器，当所查询的主机属于同一个本地ISP时，就能直接给出IP地址，不需逐层向上查询。</li></ol><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/2.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h2>DNS域名解析过程</h2><p>整个DNS域名的解析过程如下：</p><ol><li>主机向本地域名服务器发起查询，采用的是<strong>递归查询</strong>，所谓递归查询就是如果主机所询问的本地域名服务器不知道准确的IP地址，那么本地域名服务器会作为请求方，向上级域名服务器发起请求</li><li>本地域名服务器向根域名服务器发起查询，采用的是<strong>迭代查询</strong>，所谓迭代查询就是根域名服务器收到本地域名服务器发出的报文时，要么给出IP地址，要么就是告诉本地域名服务器下一步要查询的域名服务器</li></ol><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/3.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>以上面的图片为例，如果<code>m.xyz.com</code>要向<code>y.abc.com</code>发送消息，就首先会向本地域名服务器<code>dns.xyz.com</code>发起DNS查询，本地域名服务器采用迭代查询的方式，向一个根域名服务器发起查询，根域名服务器告诉本地域名服务器顶级域名服务器<code>dns.com</code>的IP地址，本地域名服务器向<code>dns.com</code>发起查询，返回<code>dns.abc.com</code>的IP地址，本地域名服务器再向<code>dns.abc.com</code>发起查询，返回<code>y.abc.com</code>的IP地址。</p><h2>DNS域名解析提速</h2><p>如果每次都进行DNS域名的查询，会耗费大量的成本和耗时，也会加重根域名服务器的负荷，因此：</p><ol><li>为了提高DNS的查询效率，减轻根域名服务器的负荷，都会进行缓存，告诉缓存用来存放最近查询过的域名以及何处获得域名的映射表。</li><li>实现全局负载均衡，实现不同地域服务器的流量调配能够保证用户的请求被离用户最近或者服务质量最好的服务器来处理，确保服务质量。</li></ol><h2>DNS域名解析问题</h2><p>因为DNS域名解析导致的常见问题有：</p><ol><li>运营商劫持（DNS劫持）：通过劫持DNS域名服务器，获取域名解析记录的控制权，修改域名的解析结果，导致用户访问到假网址，从而窃取资料或者破坏原有服务的正常服务</li></ol><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-16/4.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><ol start="2"><li>DNS解析域名时缓存解析结果：我们在开发的过程中经常会出现，配置了代理没有生效，或者举例联通用户在手机浏览器中输入baidu.com，本来应该是由一个本地域名服务器向百度权限域名服务器查询应该访问哪台服务器，本地域名服务器根据返回结果进行查询，并返回给用户。但当本地域名服务器有缓存的时候，就不会发起查询，而是直接返回缓存中的结果，如果IP地址已经发生了改变，那就会导致用户访问不到</li></ol><p>参考文献： [1] 计算机网络 谢希仁著 [2] <a href="https://juejin.cn/post/6844903987796246542">全面理解DNS及HTTPDNS</a></p>',19);function n(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a])}const l={};l.render=n;e["default"]=l},b419:function(t,e,s){"use strict";s("6a7c")},b601:function(t,e,s){},b81d:function(t,e,s){"use strict";var c=s("53ca"),a=s("5530"),n=s("1da1"),l=s("d4ec"),j=s("bee2"),b=(s("c740"),s("b0c0"),s("4de4"),s("18a5"),s("99af"),s("d81d"),s("ac1f"),s("1276"),s("498a"),s("5319"),s("a15b"),s("466d"),s("fb6a"),s("96cf"),s("a1e9")),h=s("5c40"),g=s("bc3a"),i=s.n(g),O=s("62b5"),r=s("a7bb"),p=s("1487"),o=s.n(p),d=s("597d"),u=s("0e54"),m=s("589c");u.setOptions({renderer:new u.Renderer,gfm:!0,tables:!0,breaks:!0,pedantic:!1,smartLists:!0,smartypants:!0,highlight:function(t){return o.a.highlightAuto(t).value}});var f=function(){function t(){Object(l["a"])(this,t),this.Post={}}return Object(j["a"])(t,[{key:"postCompiler",value:function(t){var e=Object(b["k"])(""),s=Object(b["k"])(""),c=Object(b["j"])({catalogOffset:null,post:{},prePost:null,nextPost:null,sameSetPostList:[]}),l=Object(r["e"])(this.getPostInfo(t)),j=l.res;Object(h["P"])(Object(n["a"])(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:if(!j.value||!j.value.content){t.next=10;break}return c.post=j.value,e.value=u(j.value.content),t.next=5,Object(h["s"])();case 5:return s.value=O["a"].getCatalogHtml(),O["a"].setHId(),t.next=9,Object(h["s"])();case 9:c.catalogOffset=O["a"].getCatalogOffset(!0);case 10:case"end":return t.stop()}}),t)}))));var g=d["a"].listCompiler({banPagination:!0});return Object(h["P"])((function(){if(g.postList){var e,s,a=g.postList.value.findIndex((function(e){return e.name==t}));c.prePost=(null===(e=g.postList.value)||void 0===e?void 0:e[a+1])||null,c.nextPost=(null===(s=g.postList.value)||void 0===s?void 0:s[a-1])||null,c.post.set&&(c.sameSetPostList=g.postList.value.filter((function(t){return t.set==c.post.set})))}})),window.onresize=function(){c.catalogOffset=O["a"].getCatalogOffset(!0)},Object(a["a"])(Object(a["a"])({postHtml:e,catalogHtml:s},Object(b["r"])(c)),{},{anchor:O["a"].anchor})}},{key:"getPostInfo",value:function(){var t=Object(n["a"])(regeneratorRuntime.mark((function t(e){var s,c,a,n;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:if(e){t.next=2;break}return t.abrupt("return",{});case 2:return t.next=4,i.a.get("".concat(Object(r["c"])(),"/").concat(e,".md"));case 4:return s=t.sent,c=s.data,a={},c&&(a["content"]=c,a["abstract"]=this.getPostAbstract(c),a["name"]=this.getPostName(e),n=this.matchPostBase(c),n&&n.length>=4&&(a["title"]=n[1],a["date"]=n[2],a["tags"]=n[3].split(",").map((function(t){return t.trim()})),a["set"]=((null===n||void 0===n?void 0:n[4])||"").replace("set: ",""))),t.abrupt("return",a);case 9:case"end":return t.stop()}}),t,this)})));function e(e){return t.apply(this,arguments)}return e}()},{key:"getPostName",value:function(t){if(t){var e=t.split("/");if(e&&e.length){var s=e.pop();if(s)return s.replace(/\.\w+$/,"")}}return""}},{key:"matchPostBase",value:function(t){var e=t.split("\n").map((function(t){return t.trim()})).join("");return e.match(/-+title: (.*?)date: (.*?)tags: (.*?)((set: (.*?))?)-+/)}},{key:"getPostAbstract",value:function(t){var e=t.match(/--- -->(\s+(.*))+/);if(e&&e.length>=1){var s=null===e||void 0===e?void 0:e[0].replace("--- --\x3e",""),c=m.parse(s.trim()),a=this.parseMarkAst(c).slice(0,500);return a+"..."}return""}},{key:"parseMarkAst",value:function(t){var e=this,s="";return t&&t.length&&t.map((function(t){var a;["paragraph","heading","strong","em"].indexOf(null===t||void 0===t?void 0:t.type)>=0&&t.text&&t.text.length&&t.text.map((function(t){if("string"===typeof t)s+=e.getAstText(t);else if("object"===Object(c["a"])(t)){var a,n=null===t||void 0===t||null===(a=t.text)||void 0===a?void 0:a[0];n&&"string"===typeof n&&(s+=n.replaceAll("\n","").trim())}})),"list"===(null===t||void 0===t?void 0:t.type)&&null!==t&&void 0!==t&&null!==(a=t.body)&&void 0!==a&&a.length&&t.body.map((function(c){"listitem"===c.type&&(s+=e.parseMarkAst(t))}))})),s}},{key:"getAstText",value:function(t){var e=t.replaceAll("\n","").trim(),s=e.replace(/<[^>]+>/g," ");return s}}]),t}();e["a"]=new f},c1e3:function(t,e,s){"use strict";s("3548")},cd49:function(t,e,s){"use strict";s.r(e);s("e260"),s("e6cf"),s("cca6"),s("a79d");var c=s("7a23"),a={class:"m-page"};function n(t,e){var s=Object(c["x"])("Nav"),n=Object(c["x"])("router-view");return Object(c["q"])(),Object(c["d"])("div",a,[Object(c["h"])(s),Object(c["h"])(n)])}s("d55a");const l={};l.render=n;var j=l,b=(s("d3b7"),s("3ca3"),s("ddb0"),s("6c02")),h=Object(c["E"])("data-v-3408c6b9");Object(c["t"])("data-v-3408c6b9");var g={class:"home"};Object(c["r"])();var i=h((function(t,e,s,a,n,l){var j=Object(c["x"])("Block"),b=Object(c["x"])("Pagination");return Object(c["q"])(),Object(c["d"])("div",g,[(Object(c["q"])(!0),Object(c["d"])(c["a"],null,Object(c["w"])(t.postList,(function(t,e){return Object(c["q"])(),Object(c["d"])(j,{key:e,post:t},null,8,["post"])})),128)),Object(c["h"])(b,{total:t.total,onPageChange:t.onPageChange},null,8,["total","onPageChange"])])})),O=s("5530"),r=s("597d"),p=s("5c40"),o=s("2efe"),d=Object(c["E"])("data-v-d6a35aac");Object(c["t"])("data-v-d6a35aac");var u={key:0,class:"pagination"},m={class:"pagination-title"},f={class:"pagination-main"};Object(c["r"])();var v=d((function(t,e,s,a,n,l){return t.total>t.pageSize?(Object(c["q"])(),Object(c["d"])("div",u,[Object(c["h"])("div",m,"共计"+Object(c["z"])(t.total)+"篇文章，"+Object(c["z"])(t.pageCount)+"页",1),Object(c["h"])("div",f,[Object(c["h"])("div",{class:["pagination-main-item break start",{disable:1===t.curPage}],onClick:e[1]||(e[1]=function(){return t.toPre&&t.toPre.apply(t,arguments)})},null,2),(Object(c["q"])(!0),Object(c["d"])(c["a"],null,Object(c["w"])(t.pageLine,(function(e){return Object(c["q"])(),Object(c["d"])("div",{class:["pagination-main-item",{active:e===t.curPage,empty:"..."===e}],key:e,onClick:function(s){return t.toJump(e)}},Object(c["z"])(e),11,["onClick"])})),128)),Object(c["h"])("div",{class:["pagination-main-item break",{disable:t.curPage===t.pageCount}],onClick:e[2]||(e[2]=function(){return t.toNext&&t.toNext.apply(t,arguments)})},null,2)])])):Object(c["e"])("",!0)})),y=(s("a9e3"),s("a630"),s("d81d"),s("a7bb")),k=Object(c["i"])({props:{total:{type:Number,default:0},onPageChange:{type:Function,default:function(){return function(){}}}},setup:function(t){var e=y["b"].PageSie,s=6,a=Object(c["v"])(1),n=Object(c["u"])({pageLine:[]}),l=function(){if(j.value<=s){var t=Array.from(new Array(j.value).keys());return t.map((function(t){return t+1}))}var e=[];return a.value-1>1&&e.push(a.value-1),e.push(a.value),a.value+1<j.value&&e.push(a.value+1),e[0]>2&&e.unshift("..."),1!=e[0]&&e.unshift(1),e[e.length-1]<j.value-1&&e.push("..."),e[e.length-1]!=j.value&&e.push(j.value),e},j=Object(c["b"])((function(){return Math.ceil(t.total/e)}));n.pageLine=l(),Object(c["C"])((function(){return a.value}),(function(){n.pageLine=l();var s=(a.value-1)*e,c=s+e;t.onPageChange&&t.onPageChange(s,c)})),Object(c["C"])((function(){return j.value}),(function(){n.pageLine=l()}));var b=function(){var t=a.value-1;a.value=t>=1?t:a.value},h=function(){var t=a.value+1;a.value=t<=j.value?t:a.value},g=function(t){"string"!==typeof t&&(a.value=t>=1&&t<=j.value?t:a.value)};return Object(O["a"])(Object(O["a"])({curPage:a,pageCount:j,pageSize:e},Object(c["A"])(n)),{},{toPre:b,toNext:h,toJump:g})}});s("256c");k.render=v,k.__scopeId="data-v-d6a35aac";var w=k,x=Object(p["l"])({setup:function(){var t=r["a"].listCompiler(),e=function(e,s){Object(y["f"])(),t.reloadList({startIndex:e,endIndex:s})};return Object(O["a"])(Object(O["a"])({},t),{},{onPageChange:e})},components:{Block:o["a"],Pagination:w}});s("b419");x.render=i,x.__scopeId="data-v-3408c6b9";var P=x,T=(s("b0c0"),Object(c["E"])("data-v-712f90fa"));Object(c["t"])("data-v-712f90fa");var I={class:"list"},C={class:"list-tag"},A={class:"list-main"},S={class:"date"},z={class:"title"};Object(c["r"])();var N=T((function(t,e,s,a,n,l){return Object(c["q"])(),Object(c["d"])("div",I,[Object(c["h"])("div",C,[Object(c["h"])("div",{class:["blog-tag",{selected:!t.selectedTags.length}],onClick:e[1]||(e[1]=function(){return t.tapAll&&t.tapAll.apply(t,arguments)})},"All",2),(Object(c["q"])(!0),Object(c["d"])(c["a"],null,Object(c["w"])(t.tagList,(function(e){return Object(c["q"])(),Object(c["d"])("div",{class:["blog-tag",{selected:t.selectedTags.indexOf(e)>=0}],key:e,onClick:function(s){return t.tapTag(e)}},Object(c["z"])(e),11,["onClick"])})),128))]),Object(c["h"])("div",A,[(Object(c["q"])(!0),Object(c["d"])(c["a"],null,Object(c["w"])(t.postList,(function(e,s){return Object(c["q"])(),Object(c["d"])("div",{class:"list-main-item",key:s,onClick:function(s){return t.tapPost(e.name)}},[Object(c["h"])("span",S,Object(c["z"])(e.date),1),Object(c["h"])("span",z,Object(c["z"])(e.title),1)],8,["onClick"])})),128))])])})),F=(s("a434"),Object(c["i"])({setup:function(){var t=Object(b["d"])(),e=Object(c["u"])({tagList:[],selectedTags:[]}),s=r["a"].listCompiler({banPagination:!0});e.tagList=r["a"].getAllPostTag();var a=function(t){if(t){var c=e.selectedTags.indexOf(t);c>=0?e.selectedTags.splice(c,1):e.selectedTags.push(t),s.reloadList({tags:e.selectedTags})}},n=function(){e.selectedTags=[],s.reloadList()},l=function(e){e&&(Object(y["f"])(),t.push("/post?file=".concat(e)))};return Object(O["a"])(Object(O["a"])(Object(O["a"])({},Object(c["A"])(e)),s),{},{tapPost:l,tapTag:a,tapAll:n})}}));s("3f9c");F.render=N,F.__scopeId="data-v-712f90fa";var _=F,q=[{path:"/",name:"Home",component:P},{path:"/list",name:"List",component:_},{path:"/cv",name:"CV",component:function(){return s.e("chunk-14436ac0").then(s.bind(null,"3f23"))}},{path:"/post",name:"Post",component:function(){return s.e("chunk-0180f20d").then(s.bind(null,"37d3"))}},{path:"/tag",name:"Tag",component:function(){return s.e("chunk-a7c54b84").then(s.bind(null,"8ea7"))}}],E=Object(b["a"])({history:Object(b["b"])(),routes:q}),D=E,M=s("cf05"),L=s.n(M),B=Object(c["E"])("data-v-31190f33");Object(c["t"])("data-v-31190f33");var H={class:"header"},R={class:"header-inner-logo"},W=Object(c["h"])("img",{src:L.a},null,-1),$=Object(c["g"])("Gemma's Blog"),U={class:"header-inner-nav"},G=Object(c["g"])("主页"),V=Object(c["g"])("归档"),K=Object(c["g"])("CV");Object(c["r"])();var J=B((function(t,e,s,a,n,l){var j=Object(c["x"])("router-link");return Object(c["q"])(),Object(c["d"])("div",H,[Object(c["h"])("div",{class:["header-inner clearfix",{"larger-nav":t.isPost}]},[Object(c["h"])("div",R,[W,Object(c["h"])(j,{class:["title home",{active:"Home"===t.routeName}],to:"/"},{default:B((function(){return[$]})),_:1},8,["class"])]),Object(c["h"])("div",U,[Object(c["h"])(j,{class:["title",{active:"Home"===t.routeName}],to:"/"},{default:B((function(){return[G]})),_:1},8,["class"]),Object(c["h"])(j,{class:["title",{active:"List"===t.routeName}],to:"/list"},{default:B((function(){return[V]})),_:1},8,["class"]),Object(c["h"])(j,{class:["title",{active:"CV"===t.routeName}],to:"/cv"},{default:B((function(){return[K]})),_:1},8,["class"])])],2)])})),X=Object(c["i"])({setup:function(){var t=Object(c["v"])(""),e=Object(c["v"])(!1),s=Object(b["c"])();return Object(c["C"])((function(){return s.name}),(function(){t.value=s.name,e.value="Post"===s.name})),{routeName:t,isPost:e}}});s("c1e3");X.render=J,X.__scopeId="data-v-31190f33";var Y=X,Q=(s("de77"),s("2c43"),s("9f21"),Object(c["c"])(j));Q.component("Nav",Y),Q.use(D).mount("#app")},ce75:function(t,e,s){},cf05:function(t,e,s){t.exports=s.p+"img/logo.cfd07c7f.png"},d55a:function(t,e,s){"use strict";s("353e")},da8c:function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>互联网的信息传输依赖于各种协议，不同的环节遵循不同的协议，这些协议分布在不同层级共同实现了网络功能，这些层级结构的模型组成常见的有三种说法，分别是TCP/IP的五层模型和OSI的七层模型。</p><h2>一. OSI模型</h2><p>OSI(Open Systems Interconnection, 开放系统互联参考模型)，是ISO在20世纪80年代提出的，将计算机网络通信协议分为七层。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/2.jpg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><p>我们以公司A和公司B的一次商业报价单发送为例子进行每个层的功能的解释：</p><h3>1. 应用层</h3><p>给用户提供网络服务，包含FTP（文件）、SMTP（邮件）、HTTP、DNS、TFTP、SNMP协议。许多大家熟悉的基于Internet的应用实现都离不开这些协议，最常见的，进行万维网(WWW)的访问用到了HTTP协议，文件传输用FTP，电子邮件发送用SMTP，域名解析用DNS，远程登录用TELNET等。</p><ul><li><strong>HTTP(Hypertext Transfer Protocol, 超文本传输协议)</strong>: 是请求-响应的协议，主要服务的场景是web服务，就是网页的传输，默认使用TCP的80端口，更详细的关于HTTP的解释可以看看另外一篇文章<a href="https://zhangmingemma.github.io/#/post?file=2022-10-14-HTTP">《计算机网络系列之HTTP基础》</a></li><li><strong>HTTPS</strong>：是以安全为目标的HTTP通道，在HTTP基础上通过传输加密和身份认证保证了传输过程的安全性，默认使用TCP的443端口</li><li><strong>DNS(Domain Name System, 域名系统)</strong>: 将域名和IP地址进行相互映射，默认使用UDP的53端口，更详细的介绍可以看<a href="https://zhangmingemma.github.io/#/post?file=2022-10-16-DNS">《计算机网络系列之DNS以及网络域名解析》</a></li><li><strong>FTP(File Transfer Protocol, 文件传输协议)</strong>: FTP允许用户以文件操作的方式与另一主机进行相互通信，用户并不是真正登录到想要存取的计算机上面成为完全用户，而是通过FTP程序访问远程资源，实现用户往返传输文件、目录管理以及访问电子邮件等，默认使用TCP的20/21端口</li><li><strong>TFTP(Trivival File Transer Protocol, 简单文件传输协议)</strong>: 提供不复杂、开销不大的文件传输服务，默认使用UDP的69端口</li><li><strong>SNMP(Simple Network Management Protocol, 简单网络管理协议)</strong>: 原来的名字叫简单网管监控协议，专门设计用于在IP网格管理网络节点的一种标准协议，使网络管理员能够管理网格效能，发现并解决网络问题以及规划网络增长，默认使用UDP的161端口</li><li><strong>TELNET</strong>: 是Internet远程登录服务的标准协议和主要方式，为用户提供了在本地计算机完成远程主机工作的能力，默认使用TCP的23端口</li><li><strong>SSH(Secure Shell)</strong>: 较可靠的，专为远程登录会话和网络服务提供安全性的协议，默认使用TCP的22端口</li></ul><p>在我们的例子中，公司A老板就是我们的用户，发送商业报价单就是一种网络服务，类比发送商业合同也是一个网络服务。</p><h3>2. 表示层</h3><p>表示层提供各种应用于应用层的数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别，将接收到的数据转换为计算机二进制数据。数据的压缩和加密也是表示层可提供的功能之一。在我们的例子中，公司A在中国，公司B在英国，要商定英文作为交流的语言，那次是表示层也就是公司的文秘员，就需要将商业报价单翻译为英文，同时为了防止泄密，还会对报价单进行加密处理，这就是表示层的作用。</p><h3>3. 会话层</h3><p>会话层负责建立、管理和终止表示层实体之间的通信对话，该层的通信由不同设备中的应用程序之间的服务请求和响应组成，在我们的例子中，会话层的同事拿到表示层的同事转换后的资料，会话层同事将记录本次会话，找到公司B的地址和联系方式，将整份资料装进信封，写上地址和联系方式，交由传输层将快递寄出，等到公司B接收成功，会话就算结束，会话层的同事就会终止此次会话。</p><h3>4. 传输层</h3><p>为应用层实体提供主机端到端的通信能力，包括处理差错控制和流量控制等问题，保证了数据包的顺序传送及数据的完整性。由于一台主机可以运行多个进程，因此运输层有复用和分用两种能力，复用就是多个应用层进程可以同时使用传输层的服务，分用是指运输层把收到的信息分别交付给应用层的不同进程。运输层包含TCP、UDP两大协议，更细节的分析及两者的区别，可以看看另一篇文章<a href="https://zhangmingemma.github.io/#/post?file=2022-10-15-TCP%26UDP">《计算机网络系列之TCP与UDP》</a></p><ul><li><strong>TCP(Transmission Control Protocol, 传输控制协议)</strong>: 面向连接的、可靠的、基于字节流的传输层通信协议</li><li><strong>UDP(User Datagram Protocol, 用户数据协议)</strong>: 为应用程序提供了一种无需建立连接就可以发送封装的IP数据包的方法，是一种无连接的、不可靠的、快速传输的通信协议。</li></ul><p>在我们的例子中，传输层就是相当于公司服务快递邮件收发的人，负责将上层要寄出的资料投送到快递公司或者邮局</p><h3>5. 网络层</h3><p>主要解决主机到主机的通信问题，网络层包含的协议涉及数据包在整个网络中的逻辑传输，通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。在发送数据时，网络层把传输层产生的报文段或用户数据封装成分组或包进行传送，也就是IP数据报。IP协议是Internet的基础，我们常见的路由器就属于网络层。该层主要包含IP、ICMP、IGMP三个主要协议。</p><ul><li><strong>ICMP(Internet Control Message Protocol, 控制报文协议)</strong>: 用于在IP主机、路由器之间传递控制消息，控制消息包含网络是否连通、主机是否可达、路由是否可用等网络本身的消息，例如ping</li><li><strong>IGMP(Internet Group Management Protocol, 组管理协议)</strong>: 主机和组播路由器间运行的协议。其中单播是1对1发送消息，组播是1对N发送消息，广播是1对全部发送消息</li><li><strong>ARP(Address Resolution Protocol, 地址解析协议)</strong>: 是根据IP协议获取物理地址的一个协议。主机发送消息时将包含目标IP地址的ARP请求广播到局域网络中的所有主机，并接受返回消息，以此确定目标的物理地址。收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。</li><li><strong>RARP(Reverse Address Resolution Protocol, 逆地址解析协议)</strong>: 允许局域网的物理机器从网关服务器的ARP表或者缓存上请求其IP协议。</li></ul><p>在我们的例子中，网络层就是相当于快递公司的庞大网络、全国不同的集散中心，比如深圳发往北京的快递，首先要到深圳集散中心，再到武汉集散中心，再去北京集散中心，每个集散中心就相当于网络中的一个IP节点。</p><h3>6. 数据链路层</h3><p>负责监视数据在主机和网络之间的交换，在两个邻近节点进行数据传送的时候，将网络层交来的IP数据报组装成帧，每一帧包含数据和必要的控制信息（地址信息、同步信息、差错控制等），其中的控制信息使接收端能够知道一个帧从哪个比特开始，到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错，如果发现差错，数据链路层就会丢弃这个出现差错的帧，如果需要改正数据，则需要采用可靠传输协议来纠正出现的错误。数据链路层又分为2个子层：逻辑链路控制子层(LLC)和媒体访问控制子层(MAC)。常见的网卡就是属于数据链路层的。</p><h3>7. 物理层</h3><p>网络实际最终信号的传输是通过物理层实现的，通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用的设备有集线器、中继器、网线、同轴电缆等。</p><h2>二. TCP/IP参考模型</h2><p>TCP/IP（Transmission Control Protocol / Internet Protocol，传输控制协议/网际协议）不是指这两个具体的协议，其中包含了多种协议类型，如IP、ICMP、TCP、UDP、TELNET、FTP以及HTTP，是网际协议族，只是因为TCP和IP两个协议比较具有代表性，所以叫TCP/IP协议。TCP/IP参考模型的诞生起源于担心珍贵的主机、路由器和互联网关可能会突然崩溃，但不想网络受子网硬件损失的影响，已经建立的会话不会被取消，想要整个网络体系较为灵活。TCP/IP参考模型自上而下包含应用层、传输层、网络层、网络接口四层。其中数据链接层和物理层合并成为网络接口层，应用层对应OSI模型中的应用层、表示层和会话层。但后来为了更方便地描述，并综合OSI和TCP/IP的优点，采用的都是五层网络模型，包含应用层、传输层、网络层、数据链路层、物理层。</p><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/1.jpeg" style="display:inline-block;margin-bottom:16px;"></div><p>在实际应用中，OSI模型常被作为理论的参考模型被广泛讨论和使用，而TCP/IP协议紧密结合实际已经作为网络互连的事实标准。</p><h3>数据传输过程</h3><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/3.jpg"><p>假定主机1的应用进程AP1，想要跟主机2的应用进程AP2进行通信，整个通信过程可以概括为：</p><ul><li>应用层：AP1将数据交给本主机的第5层应用层，应用层加上必要的控制信息，并将数据转换为二进制数据，转换后交给传输层</li><li>传输层：第4层传输层收到数据单元后，加上本层的控制信息，TCP头部报文(TCP头部的关键信息 - 端口号)，再交给网络层</li><li>网络层：第3层网络层收到上一层的数据包后，加上本层控制信息，即IP头部(IP头部的关键信息 - IP地址)，在交给数据链路层</li><li>数据链路层：第2层数据链路层收到数据包后，加上本层的控制信息，即MAC头部(MAC头部的关键信息 - MAC地址)，再交给物理层</li><li>物理层：将二进制数据组成比特流转换为电信号，通过传输介质到达目的主机2</li></ul><img src="https://zhangmingemma.github.io/dist/images/2022-10-13/4.jpg"><p>到达目的主机2后，就从目的主机2的物理层逐次上升到应用层，</p><ul><li>物理层：将电信号转换为二进制数据</li><li>数据链路层：查看目标MAC地址，吻合则拆掉MAC头部，否则丢弃数据</li><li>网络层：查看目标IP地址，吻合就拆掉IP头部，否则丢弃数据</li><li>传输层：根据TCP头部判断数据段运送到哪里，之后将被分组的数据段重组，运送到应用层</li><li>应用层：将二进制数据还原成原始信息交给目的进程AP2</li></ul><h2>四. 小结</h2><p>总结一下OSI七层模型，每层的主要作用</p><ol><li>应用层：网络服务与最终用户的一个接口</li><li>表示层：数据的表示、安全和压缩</li><li>会话层：建立、管理和终止会话</li><li>传输层：定义传输数据的协议端口号，以及控流</li><li>网络层：定义逻辑地址、实现的不同</li><li>数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等</li><li>物理层：建立、维护、断开物理连接</li></ol><p>参考文献： [1] <a href="https://juejin.cn/post/7049265346296938504">《OSI七层模型与TCP/IP五层模型》</a> [2] 《计算机网络》谢希仁著</p>',40);function n(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a])}const l={};l.render=n;e["default"]=l},dda5:function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>文本分类是一项系统的工程，所涉及的技术很多，按流程可以将文本分类分为:文本预处理阶段、训练阶段、分类阶段、评价四个阶段，其中预处理阶段要文本处理成计算机能识别的格式，首先对文本进行分词处理，中文文本和英文文本组织形式不同，中文文本的分词过程比英文分词要复杂得多。分词后文本的特征词非常多，而我们需要的只是少数有使用价值的特征词，因此分词后的文本要进行特征选择，并将特征选择后的特征项加权，最后将文本表示成向量空间模型(VSM)，经过预处理后的文本才能进行分类。分类算法是文本分类的核心技术。评估阶段是对文本分类的效果进行评价，常用的指标有:准确率、召回率、以及综合这两个指标的评价方法一F1值等。</p><h3>文档表示方法</h3><p>文档集划分为训练集和测试集两个部分，训练集用于分类模型的学习，一般占整个文档集的70%;测试集用于评价分类模型，一般占整个文档集的30%。开放的英文文档集Reuters-21578和20NewsGroups。前者比后者更为常用。</p><p>经过半个世纪的发展，在文本处理领域，研究者提出了一些文本表示模型，主要有：布尔模型、向量空间模型、概率检索模型、n-Gram模型等，其中使用最广、效果最好的是向量空间模型。</p><p><strong>向量空间模型</strong></p><p>20世纪60年代，Salton G等人提出了向量空间模型，并成功应用于SMART文本检索系统，其基本思想是:将文本表征成由特征项(词)构成的向量空间中的一个点，（W1,W2,…,Wi），其中Wi为第i个特征项的权重，然后通过计算空间两点之间的相似度来表示两个文本的相关程度，相似度计算一般采用欧氏距离或向量夹角的余弦值。向量空间模型在实际使用中取得了很好的效果，常用的文本分类算法中，支持向量机、K近邻、和NB都是基于向量空间模型的。</p><p><strong>布尔模型</strong></p><p>布尔模型可以看作是向量模型的一种特例，根据特征是否在文档中出现，特征的权值只能取1或0。许多时候，使用二值特征的分类效果结果并不比考虑特征频率的差。决策树方法、关联规则方法和Boosting方法就是基于布尔模型。</p><p><strong>概率模型</strong></p><p>我们可以用该流程的思想来解决出现在文档检索中的不确定性和找寻的不清楚性。概率模型的理论是基于概率排队的：如果文件是按相关概率递减方向排队时，那么就会出现最大的检索性能。选用此种模型可以克服BM和SVM中的不足，此种模型根据词与词间和文档间与词条的概率关联性进行搜索。设文档d和顾客查询c都用（a1,a2,…an）表示，当词条ti∈d时，有ai=1.否则ai=0,这种关系可数学表示为： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image1.png" class="center"> 其中 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image2.png" class="center"> 　　f是所有参加训练的文档的总和，r则为顾客查询与文档集中相关的文档数，fi则表示训练文档集中有ti的文档数，ri则表示r个相关文档中有ti的文档数，模型的有点是有着非常严谨的数学理论基础，解决了不确定性推理的缺点，但是它的不足在于参数估计方面很困难，在文件和查询的表达方面也是很困难</p><h3>文档分词</h3><p>词是文本中最小的具有意义的语言成分，是构造向量空间模型的基础，文本分词的效果直接影响到文本分类的结果。在文本的组织上，中文与以英语为代表的欧美语言有着很大的不同，在西方语言中，词与词是使用空格隔开的，因此不需要进行分词处理，而在中文文本中，字、词是连在一起的，一个语句就是一连串的字、词组合，词与词之间没有明显界限，因此，分词的难度较大。常用的分词算法主要有:基于词典的分词方法、基于理解的分词方法、基于统计的分词方法。</p><p><strong>基于词典的分词方法</strong></p><p>基于词典的分词方法又叫做机械分词方法，它是按照一定的策略将待切分的字符串与词典中的词条进行匹配，若在词典中找到某个字符串，则匹配成功(即识别出一个词)。按照扫描方向的不同，基于词典的分词方法可以分为正向匹配和逆向匹配;按照不同长度优先匹配的情况，可以分为最大匹配和最小匹配;按照是否与词性标注过程相结合，又可以分为单纯分词方法和分词与标注相结合的一体化方法，常用的几种基于词典分词方法如下:正向最大匹配法(由左到右的方向)、逆向最大匹配法(由右到左的方向)、逐词遍历法。</p><p>在实际应用中，常常将上述方法结合起来。例如，可以将正向最大匹配方法和逆向最大匹配方法结合起来构成双向匹配法。由于汉语单字成词的特点，正向最小匹配和逆向最小匹配一般很少使用。一般说来，逆向匹配的切分精度略高于正向匹配，遇到的歧义现象也较少。</p><p>再一种方法是改进扫描方式，称为特征扫描或标志切分，优先在待分析字符串中识别和切分出一些带有明显特征的词，以这些词作为断点，可将原字符串分为较小的串再来进行机械分词，从而减少匹配的错误率。还有一种方法是将分词和词类标注结合起来，利用丰富的词类信息对分词决策提供帮助，并且在标注过程中又反过来对分词结果进行检验、调整，从而极大地提高切分的准确率。目前实用的自动分词系统基本上都是以采用机械分词为主，辅以少量的词法、语法和语义信息的分词系统。该方法的优点是易于实现，但精度较低，远远不能满足实际的需要。实际使用的分词系统，都是把机械分词作为一种初分手段，再利用各种其它的语言信息来进一步提高切分的准确率。</p><p><strong>基于理解的分词方法</strong></p><p>又称人工智能分词法，这种分词方法是通过让计算机模拟人对句子的理解，达到识别词的效果。其基本思想就是在分词的同时进行句法、语义分析，利用句法信息和语义信息来处理歧义现象。它通常包括三个部分:分词子系统、句法语义子系统、总控部分。在总控部分的协调下，分词子系统可以获得有关词、句子等的句法和语义信息来对分词歧义进行判断，即它模拟了人对句子的理解过程。这种分词方法需要使用大量的语言知识和信息。由于汉语语言知识的笼统、复杂性，难以将各种语言信息组织成机器可直接读取的形式，因此目前基于理解的分词系统还处在试验阶段。</p><p><strong>基于统计的分词方法</strong></p><p>基于统计的分词算法的思想是:找出输入字符串的所有可能的切分结果，对每种切分结果利用能够反映语言特征的统计数据计算它的出现概率，然后从结果中选取概率最大的一种。词是稳定的字的组合，因此在上下文中，如果相邻的字共现的次数越多，就越有可能构成一个词。因此字与字相邻出现的频率或概率能够较好的反映成词的可信度。通过对语料中相邻共现的各个字的组合频度进行统计，计算它们的互现信息。互现信息体现了汉字之间结合关系的紧密程度。当紧密程度高于某一个阈值时，便可认为此字组可能构成了一个词。这种方法只需对语料中的字组频度进行统计，不需要切分词典，因而又叫做无词典分词法或统计取词方法。但这种方法也有一定的局限性，会经常抽出一些共现频度高、但并不是词的常用字组，并且对常用词的识别精度差，时空开销大。实际应用的统计分词系统都要使用一部基本的分词词典进行串匹配分词，同时使用统计方法识别一些新的词，即将串频统计和串匹配结合起来，既发挥匹配分词切分速度快、效率高的特点，又利用了无词典分词结合上下文识别生词、自动消除歧义的优点。</p><p>对于任何一个成熟的中文分词系统来说，不可能单独依靠某一种算法来实现，需要 综合不同的算法来处理不同的问题。</p><h3>停用词处理技术</h3><p>经过分词处理的文本，并不是所有的特征都对构造向量空间模型和分类有帮助，相反，将对文本分类没有帮助的词作为特征项，会对分类的精度造成很大的影响，特别对于使用文档频率(DF)进行特征选择的分类方法，影响更大。另外，去停用词可以很大程度上减小特征项的数量，对文本降维具有很大帮助，所以在构造向量空间模型前，要对分类无帮助的词进行尽可能彻底的清理。去停用词在技术上实现并不复杂，只需建立一个停用词词典停用词词典内的词条进行匹配，如果匹配成功，则将该词去掉。</p><h3>特征选择方法</h3><p>在经过文本分类系统的分词、去停用词处理后，文本的特征维数仍然很高，这里所指的特征维数是指要构造VSM空间的所有文本的特征之和，一个文本集合很可能包含十几万个特征词，而每篇文本包含的特征词却很少，这样构造的向量空间模型是一个高维的稀疏矩阵，会对分类算法的时间复杂度和空间复杂度造成很大的影响。实验显示，当向量空间的特征维度达到一定值时就可以实现很高的分类性能，随着特征维度的增加，分类性能反而会下降。因此，必须对特征项进行有效的筛选。常用的文本特征选择方法有:文档频率(DF)、信息增益(IG)、互信息(MI)、X2统计量(CHI)、期望交叉嫡等，这些方法的基本思想都是对每一个特征(在这里是中文词)，计算某种统计度量值，然后设定一个阈值T，把度量值小于T的那些特征过滤掉，剩下的即认为是有效特征。</p><p><strong>文档频率（DF）</strong></p><p>DF值低于某个阈值的词条是低频词，它们不含或含有较少的类别信息。将这样的词条从原始特征空间中移除，不但能够降低特征空间的维数，而且还有可能提高分类的精度。DF高于某个阈值的词为中、高频词，这些词被认为对分类的影响较大，应该保留。在英文环境中，当IG和CHI等统计方法的计算复杂度太高时，DF可以代替它们被使用。</p><p><strong>互信息（MI）</strong></p><p>如果用A表示包含词条t且属于类别c的文档频数，B为包含t但不属于c的文档频数，C表示属于c但是不包含t的文档频数，N表示语料中的文档总数，t和c的互信息由下式计算： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image3.png" class="center"></p><p>如果t和c无关（即P(tc)=P(t)*P(c)），I(t,c)值自然为零。为了将互信息应用于多个类别，由下式计算t对于c的互信息： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image4.png" class="center"></p><p>其中m为类别数，将低于特定阈值的词条从原始特征空间中移除，降低特征空间的维数，保留高于阈值的词条</p><p><strong>信息增益（IG）</strong></p><p>表示文档包含某一特征时文档类的平均信息量，定义为某一特征在文档中出现前后的信息熵之差。假定c为文本类变量，C为文本类的集合，d为文本，f为特征。对于特征f其信息增益记为IG(f)，计算公式 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image5.png" class="center"></p><p><strong>X2统计（CHI）</strong></p><p>CHI统计方法度量词条t和文档类别c之间的相关程度，并假设t和c之间符合具有一阶自由度的x2分布，词条对于某类的x2统计值越高，它与类之间的相关性越大，携带的类别信息也较多，令N表示训练语料中的文档总数，c为某一特定类别，t表示特定的词条，A表示属于c类且包含t的文档频数，B表示不属于c类但包含t的文档频数，C表示属于c类但不包含t的文档频数，D表示既不属于c也不包含t的文档频数，则t对于c的CHI值计算公式： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image6.png" class="center"></p><p>对于多类问题，分别计算t对于每个类别的CHI值，可以用下面两种标准计算t对整个训练集的CHI： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image7.png" class="center"></p><p>其中m为类别数，从原始特征空间中移除低于特定阈值的词条，保留高于该阈值的词条作为文档表示的特征</p><h3>特征权重计算方法</h3><p><strong>布尔权重</strong></p><p>均权，布尔权重是最最简单的一种赋权方法，这种方法将所有特征同等看待，既不突出又不抑制任何一个特征。特征项的权值或者等于1，或者等于0,计算公式为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image8.png" class="center"></p><p>其中Wi为特征项i的权重，TF为特征项i出现的次数，这种方法的缺点就是无法体现一个词在文本中的重要程度。</p><p><strong>TF权重</strong></p><p>TF权重(Term Frequency)又称词频权重，或称特征项频率。不同类别的文档，在特征项的出现频率上有很大差异，因此特征项频率信息是文本分类的重要参考之一，一般较大的特征项在该类文档中具有较高的权重。它的计算公式为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image9.png" class="center"></p><p>实际应用中各类别文本的长度很难一致，各类文本包含的字数、词数可能差别会很大，这对词频会造成直接影响，因此通常对词频作归一化处理。另外，如果特征选择后的特征项中含有较多的非名词(如代词、数词、连词)，而这些词出现的概率非常高，如果使用TF权重加权，会赋值给这些词较高的权重，这势必对分类结果产生不利影响，因此，TF权重对去停用词的效果具有较强依赖性。</p><p><strong>IDF权重</strong></p><p>IDF越大，此特征项在文档中的的分布越集中，说明它在区分该文档内容属性方面的能力越强。反文档频率是特征项在文档集分布情况的量化。该方法以出现特征词的文本数为参数构建的函数代表特征项的权重。这体现了信息论中集中度的思想，具有一定的合理性，但忽略了分散度和频度两个因素，因此具有片面性，公式如下: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image11.png" class="center"></p><p><strong>TFIDF权重</strong></p><p>TFIDF(Term Frequency-Inverse Document Frequency)是由是由Salton在1988年提出的，TFIDF权重综合考虑了TF权重和IFD权重的优点和不足，是目前加权效果最好的权重计算方法，广泛应用于文本处理领域。其基本思想是:如果特征项t在一类文档的出现的次数越多，而在整个文档集中出现的频率越低，那么t对分类的作用越大，应该赋予越高的权重，例如，助词“的”几乎在每篇文档中都出现，因此它的TF值非常高，相反，IDF值却非常低，综合考虑TF和IDF，该词将被赋予很低的权重。TFIDF权重，即TF权重和IDF权重的组合，利用了词频和文本频率两种信息，公式如下: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image12.png" class="center"></p><p>式中TF为第k个特征词在第1篇文本中出现次数，N为训练集中总文本数，nk为出 现第k个特征词的文本数，a为一个经验值，一般取0. 01, 0. 1或者1</p><h3>相似度计算</h3><p><strong>向量夹角的余弦</strong></p><p>设文档A在VSM空间中的向量形式为a(x1,x2,…,xa)，文档B在VSM空间中向量形式为b(y1,y2,…,yb),则A,B文本的向量夹角的余弦表示为 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image13.png" class="center"></p><p>两个向量夹角的余弦值越大，表示这两个向量的相似度越高</p><p><strong>欧氏距离</strong></p><p>欧式距离是通过空间向量点之间的距离来表示文本的相关程度，具体的形式为： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image14.png" class="center"></p><p>其中d(x,y)是样本x和y的欧式距离，m是样本属性总数，两个向量点之间的欧式距离越小，表示两个向量的相似度越高，在文本分类领域，使用向量夹角余弦计算文本相似度的效果，要好于欧式距离</p><h3>文本分类方法</h3><p>从文本分类的方法来看，现有的文本分类技术主要采用三种类型的方法:基于统计的方法，基于连接的方法和基于规则的方法。</p><p><strong>基于连结的方法</strong></p><p>即人工神经网络，是设计来模拟人脑神经网络的，并期望其能像大脑一样地运作，像大脑一样地学习，从而产生智慧。这种方法具有信息分布存放、运算全局并行、处理的非线性、容错性等特点，适用于学习一个复杂的非线性映射。但是使用它学习所形成的知识结构是人所难以理解的，系统本身对于使用的人来说就象是一个变魔术的黑盒子，根据输入给出输出，答案正确但不知道是怎么算出来的。</p><p><strong>基于规则的方法</strong></p><p>一种唯理主义方法，本质上是一种确定性的演绎推理方法，优点在于根据上下文对确定性事件进行定性描述，能充分利用现有的语言学成果。它成立的前提是有大量的知识，而这些知识是人类专家总结出来的，至少解释这些知识的各种“事实”以及对事实的解释“规则”是专家总结归纳的。由于必须有人的参与，所以对于知识的可理解性，可读性非常重视。同时，在不确定性事件的描述，规则之间的相容性等方面存在一些缺陷和限制。该算法在领域专家的知识上具有依赖性，分类体系好，错误率低，but在专业领域的知识组织和管理中比较实用，实现困难，成本高，没有普遍性，不容易移植等缺点。但是，有些统计方法无法解决的问题，利用规则却很容易解决。常用的基于规则的方法有决策树、关联规则等。</p><p><strong>基于统计的方法</strong></p><p>本质上是一种非确定性的定量推理方法，定量是基于概率的，因此其必然会掩盖小概率事件的发生。基于统计的方法是一种经验主义方法，其优势在于它的全部知识是通过对大规模语料库分析得到的，可以取得很好的一致性和非常高的覆盖率，对语言处理提供了比较客观的数据依据和可靠的质量保证。常用的基于统计的方法有Naive Bayes , KNN等。</p><p><strong>NaiveBayes算法</strong></p><p>贝叶斯分类是统计学分类方法，它是一类利用概率统计知识进行分类的算法。在许多场合，朴素贝叶斯(NaiveBayes, NB)分类算法可以与决策树和神经网络分类算法相媲美，该算法能运用到大型数据库中，且方法简单、分类准确率高、速度快。由于贝叶斯定理假设一个属性值对给定类的影响独立于其它属性的值，而此假设在实际情况中经常是不成立的，因此其分类准确率可能会下降。具体地，设每个数据样本用一个n维特征向量来描述n个属性的值，即:X={X1,X2,…,Xn}假定有m个类，分别用C1,C2,…,Cm表示。给定一个未知的数据样本X,若朴素贝叶斯分类法将未知的样本X分配给类C，则一定是: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image15.png" class="center"></p><p>根据贝叶斯定律： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image16.png" class="center"></p><p>由于P(X)对于所有类为常数，最大化后验概率P(Ci |x)可转化为最大化先验概率P(x|Ci)P(Ci)。如果训练数据集中有许多属性和元组，计算P(x|Ci)的开销可能非常大，为此，通常假设各属性的取值相互独立，这样 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image17.png" class="center"></p><p>先验概率可以从训练数据集中求得。根据此方法，对于一个位置类别的样本X，可以分别计算出X属于每一个类别Ci的概率然后选择其中概率最大的类别作为其类别。</p><p>Naive Bayes方法分为最大似然模型(Maximum Likelihood Model )、多项式模型(Multinomial Model )、泊松模型(PoisonModel)等。朴素贝叶斯算法的主要优点是：对于文本数据和数值数据的分类效果较好，与其他算法相比易于实现和计算。主要缺点：朴素贝叶斯算法成立的前提是各属性之间相互独立 ，当数据集满足这种独立性假设时，分类的准确度较高，否则可能较低。</p><p><strong>KNN算法</strong></p><p>KNN算法最初由Cover和Hart于1986年提出，该算法的基本思想：根据传统的向量空间模型，文本内容被形式化为特征空间中的加权特征向量，即D=D(T1,W1;T2,W2;…;Tm,Wm)。对于测试文本，计算它与训练样本集中每个文本的相似度，找出K个最相似的文本，根据加权距离和判断测试文本所属的类别。具体算法步骤如下：</p><ul><li><p>对于一个测试文本，根据特征词形成测试文本向量</p></li><li><p>计算该测试文本与训练集中每个文本的文本相似度： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image18.png" class="center"></p></li></ul><p>式中di为测试文本的特征向量，dj为第j类的中心向量；M为特征向量的维数；Wk为向量的第k维。k的值的确定一般先采用一个初始值，然后根据实验测试K的结果调整K值，一般初值设定为几十到几百</p><ul><li><p>按照文本相似度，在训练文本集中选出与测试文本最相似的k个文本</p></li><li><p>在测试文本的k个近邻中，依次计算每类的权重，计算公式 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image19.png" class="center"></p></li></ul><p>x为测试文本的特征向量；Sim(x,di)为相似度计算公式；b为阈值，有嗲与优化选择；而y(di,cj)的取值为1或者0，如果di属于cj，则函数值为1，否则为0</p><ul><li>比较类的权重，将文本分到权重最大的那个类别 也就是说，如果在这k个文档中，有多个文档同属于一个类，则该类的分值为这些文档与测试文档之间的相似度之和。对这k个文档所属类的分值统计完毕后，即按分值进行排序。</li></ul><p><strong>类中心向量法</strong></p><p>类中心向量法的算法思想非常简单：将每一类别文本训练后得到该类别的中心向量Cj(W1,W2,…,Wj)分类时，将待分类文本T表示成n维向量的形式T(W1,W2,…,Wn)然后，计算文本T与每类中心向量的相似度，相似度计算可以采用向量夹角的余弦或是欧氏距离表示，将T归类为与其相似度最大的类中： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image20.png" class="center"></p><p>类中心的选择有三种方式：平均中心、和平均、归一化平均。和中心是某一类别中所有向量相加之和： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image21.png" class="center"></p><p>将和中心与该类向量的个数相除得到类别的平均中心： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image22.png" class="center"></p><p>而采用二范数对平均中心归一化处理得到归一化中心： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image23.png" class="center"></p><p>类中心向量法的优点是对训练集进行了最大程度的裁剪，待分类文本只需与极少的类中心向量对比，就可以将其分类，因此训练和分类速度很快。缺点是分类精度受类别的分布影响较大，当类别分布均匀，边界清晰时，分类精度较高;当类别分布不平衡，边界模糊时，分类的效果不好。</p><p><strong>SVM算法</strong></p><p>支持向量机SVM(Support Vector Machines)是Vapnik等人提出的一种基于统计学习理论的机器学习方法。SVM建立在统计学理论的VC理论和结构风险最小化原理基础上，其基本思想是:使用简单的线形分类器划分样本空间，如果一个训练集中的矢量被一个超平面正确地线性分割，且距离超平面最近的矢量之间的距离最大，则称该超平面为最佳超平面，其中距离超平面最近的对决策面设计起作用的点称为支持向量(Support Verctors)。支持向量机在解决小样本，非线性及高维模式识别问题等方面表现出明显的优势。</p><p>SVM的基本思想可用图3-1的两维情况来说明。图中，实心点和空心点代表两类样本，H为分类线，H1, H2分别为过各类中离分类线最近的样本且平行于分类线的直线，它们之间的距离叫做分类间隔(margin)。所谓最优分类线就是要求分类线不但能将两类正确分开(训练错误率为0)，而且使分类间隔最大。 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image24.png" class="center"></p><p>支持向量机主要优点：对高维、稀疏数据不敏感，更好的捕捉了数据的内在特征，准确率高；缺点：对于非线性问题，核函数选择较为困难，分类结果召回率较低</p><p>训练样本在各个类别中分布的不均匀性对许多分类器会形成噪声。例如:在Bayes模型中，如果先验分布无法确定，“均匀分布”是符合信息论的最大嫡原则( Maximum Entropy)的;对于KNN和SVM分类器，远离类别边界的样本往往对分类没有什么作用，KNN分类器还会因为类别边界部分样本分布的不均匀而造成测试样本的错分。从候选训练样本集中选择合适的训练样本子集，不仅可以减少分类器的学习时间，甚至可以提高分类器的准确性。四种方法的实验结果比较： <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image25.png" class="center"> 　 　　可以看出支持向量机具有最好的分类效果，各项指标全面领先于其他分类算法。KNN分类效果仅次于支持向量机，而类中心向量法也有很好的分类表现，贝叶斯的分类效果最差，与其它三种算法相比有较大差距。在追求分类效率而对分类精度要求不高的领域，可以考虑使用类中心向量分类法，可以极大提高分类的效率;在对对分类精度要求较高时，可以采用SVM或KNN分类法。</p><h3>分类结果评估</h3><p><strong>单标注分类问题</strong></p><p>文档分类中普遍使用的性能评估指标有查全率(Recall，简记为:r)、查准率（C Precision， 简记为P)。对于文档类中的每一个类别，使用列联表(Contingency Table )来计算查全率和查准率。</p><table><thead><tr><th>Tables</th><th>真正属于该类的文档数</th><th>真正不属于该类的文档数</th></tr></thead><tbody><tr><td>判断为属于该类的文档数</td><td>a</td><td>b</td></tr><tr><td>判断为不属于该类的文档数</td><td>c</td><td>d</td></tr></tbody></table><p>这时，r和P分别定义为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image26.png" class="center"></p><p><strong>宏平均and微平均</strong></p><p>用列联表只能评价单个类的分类性能，如果要对分类的整体性能进行评价，通常使用宏 平均 &lt; Macro-Averaging)和微平均 ( Micro-Averaging )。宏观平均是先对每一个类统计r、p值，然后对所有的类求r、P的平均值，即 <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image27.png" class="center"></p><p>微观平均是先建立一个全局列联表，然后根据这个全局列联表进行计算，即: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image28.png" class="center"></p><p>显然，宏平均是对类的平均，所以容易受小类的影响，而微平均则是对文档的平均，容易受到大类的影响。</p><p><strong>平衡点(Break-even Point )</strong></p><p>对于分类系统来说，r和p值是互相影响的。提高r会引起p的减小，反之亦然。因此， 为了更全面地反映分类系统的性能，一种做法是选取和p相等时的值来表征系统性能，这个值叫做平衡点(Break-even Point，简称BEP)值。当然，有时通过测试可能得不到和p相等的值。这时取最接近的和p值的平均值作为BEP值，称为插值BEP</p><p><strong>F值(F-measure )</strong></p><p>另一种常用的将查全率和查准率结合起来的性能评价方法是F测量，其计算公式为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image29.png" class="center"></p><p>其中，β是一个用来调节查全率和查准率权重的参数。β一般取值为1,公式转化为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image30.png" class="center"></p><p>显然，BEP是F1的特殊形式，因为当r=p时，有F1 =BEP</p><p><strong>多标注分类问题</strong></p><p>每一个输入的测试文档，都会返回一个排序后的文档类列表。这时，两个指标分别定为: <img src="https://zhangmingemma.github.io/dist/images/2016-12-03/20161203image31.png" class="center"></p><p>整个分类器的评估应该是对所有测试文档的这两个指标的统计平均。通常使用的统计平均为11点插值平均查准率(Interpolated 11-point Average Precision )</p><h3>文本可视化</h3><ul><li><p>标签云：经典的静态可视化分析，Wordle：将关键词或者标签生成为一个可视化的词云</p></li><li><p>ThemeRiver：动态文本可视化，TIARA：参考了wordle的源码实现了系统中的文本静态可视化</p></li><li><p>CiteSpace：以可视化技术针对科学论文以及引文进行网络分析的软件</p></li></ul>',108);function n(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a])}const l={};l.render=n;e["default"]=l},de77:function(t,e,s){},deab:function(t,e,s){"use strict";s.r(e);var c=s("7a23"),a=Object(c["f"])('<p>我们在<a href="https://zhangmingemma.github.io/#/post?file=2022-10-14-HTTP">《计算机网络系列之HTTP基础》</a>那一篇中讲到了传输层有两个代表性的协议就是TCP和UDP，接下来主要讲二者的概念以及主要区别。</p><h2>一. UDP</h2><p>用户数据报协议（User Datagram Protocol，UDP）的主要特点包含：</p><ul><li><strong>无连接</strong>，即发送数据之前无需建立连接，减少了建立连接的时延和开销。在发送端，应用层将数据传递给传输层的UDP协议，UDP只会给数据加一个UDP头标识，就传递给网络层了</li><li>尽最大努力交付，即<strong>不保证可靠交付</strong>。收到什么传递什么，也不会备份数据，也不关心对方是否正确接收到数据</li><li>支持一对一、一对多、多对一和多对多的交互通信</li><li><strong>面向报文</strong>，发送方的UDP对应用层传来的报文，直接添加首部就会交给IP层，既不合并，也不拆分，保留报文的边界。接收方收到IP层传来的报文，直接拆分首部就会返回给应用层，因此应用层必须选择合适大小的报文</li><li><strong>没有拥塞控制</strong>，当实时视频会议要求源主机以恒定的频率发送数据，并且允许在网络发生拥塞的时候丢失一部分数据，UDP就很适合</li><li><strong>UDP首部开销比较小</strong>，只有8个字节，包含4个字段，源端口、目的端口、长度和检验和，长度为数据报文的长度，检验和为数据报文是否出错，出错则会丢弃</li></ul><h2>二. TCP</h2><p>传输控制协议(Transmission Control Protocol, TCP)的主要特点包含：</p><ul><li><strong>面向连接</strong>，即应用程序在使用TCP协议之前，必须要先建立TCP连接，在传送完数据之后，必须释放已经建立的连接</li><li><strong>提供可靠交付的服务</strong>，通过TCP传送的数据，无差错、不丢失、不重复，并且按序到达。TCP判断丢包、误码靠的是TCP的段编号以及确认号，为了保证可靠传输，给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。</li><li><strong>一对一交互通信</strong></li><li><strong>全双工通信</strong>，TCP允许通信双方的应用进程在任何时候都能发送数据，两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。</li><li><strong>面向字节流</strong>，虽然应用程序和TCP的交互是一次一个数据块，但TCP把应用程序交下来的数据当做一连串无结构的字节流，TCP并不理解字节流的含义。TCP不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系(例如，发送方应用程序交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块就把收到的字节流交付上层的应用程序)，但接收方应用程序收到的字节流必须和发送方应用程序发送的字节流完全一样。</li><li><strong>有拥塞控制</strong>，当网络出现拥塞的时候，TCP能够减少向网络中注入数据的速率和数量，缓解拥塞</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/1.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h3>1. 可靠传输</h3><p>TCP提供可靠传输，为保证可靠传输，TCP有一些措施可以实现：</p><ul><li><strong>停止等待</strong>：每发送完一个分组就停止发送，等待对方的确认通知，在收到确认通知后再发送下一个分组</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/2.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><ul><li><strong>超时重传</strong>：如果设计A发送数据给B，A只要超过一段时间仍然没有收到确认，就认为刚刚发送的分组丢失了，会重传前面发送的分组。要实现超时重传，首先需要发送数据的副本，以备重传之需；发送的数据必须要有一个编号，才能确认重传的数据和传送方；超时的倒计时计时器应当大于正常数据往返时间。</li><li><strong>确认丢失和确认迟到</strong>：上面图片中，A发送数据给B，A超过一段时间没有收到确认，此时有A-B数据传送延迟/丢失，或是B-A确认传送延迟/丢失。如果是前者，A重发之后，B会丢弃重复数据，用最新的数据，并发送确认；如果是后者，A重发之后，收到确认之后又收到了确认，则会什么都不做</li></ul><div style="display:flex;justify-content:center;"><img src="https://zhangmingemma.github.io/dist/images/2022-10-15/3.jpeg" style="display:inline-block;margin-bottom:16px;width:500px;"></div><h3>2. 传输效率</h3><p>TCP需要等待请求确认，需要长时占用通信成本，因此TCP采用流水线传输，发送方可连续发送多个分组，不必每发完一个分组就等待确认。</p><h3>1. TCP连接</h3><p>TCP把连接作为最基本的抽象，每条连接唯一地被通信两端的两个端点所确定。TCP连接的两个端点叫做套接字/插口，即端口号拼接到IP地址即形成了套接字。套接字的表示方法就是在点分十进制的IP地址后面写上端口号，中间用冒号隔开。例如<code>192.3.4.5:8080</code>就是一个套接字</p>',18);function n(t,e){return Object(c["q"])(),Object(c["d"])("section",null,[a])}const l={};l.render=n;e["default"]=l}});
//# sourceMappingURL=app.579ecd83.js.map